{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding, CdkTreeNode, CdkTree} from '@angular/cdk/tree';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, Input, Optional, Renderer2, ElementRef} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_treeNode: CdkTreeNode<T>,\n              _tree: CdkTree<T>,\n              _renderer: Renderer2,\n              _element: ElementRef,\n              @Optional() _dir: Directionality) {\n      super(_treeNode, _tree, _renderer, _element, _dir);\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewEncapsulation,\n  IterableDiffers,\n} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef) {\n    super(_differs, _changeDetectorRef);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle, CdkTree, CdkTreeNode} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_tree: CdkTree<T>, _treeNode: CdkTreeNode<T>) {\n    super(_tree, _treeNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.5-03527c6');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance !== 'outline') {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["args","DOCUMENT","MatToolbar","propDecorators","type","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","template","CdkTreeNodeDef","TemplateRef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","_treeNode","_renderer","_element","_dir","CdkTreeNodePadding","Renderer2","Directionality","Optional","level","indent","MatTree","_changeDetectorRef","Component","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","MatTreeNodeToggle","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","NgZone","Inject","_MAT_INK_BAR_POSITIONER","MatInkBar","MatTabLabel","templateRef","viewContainerRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","MatSlider","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_roundToDecimal","toString","split","pop","parseFloat","toFixed","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}