{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-6f7332b');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private _closeKeyEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed: EventEmitter<void | 'click' | 'keydown'>\n      = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // TODO(crisbeto): make the origin required when doing breaking changes.\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    // TODO(crisbeto): switch to a required param when doing breaking changes.\n    private _focusMonitor?: FocusMonitor) {\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel>\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header>\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange: EventEmitter<MatChipSelectionChange>\n      = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["host","class","MatToolbarRow","MatToolbar","_super","elementRef","_platform","_this","call","this","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","slice","_elementRef","nativeElement","childNodes","filter","node","classList","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","PlatformModule","exports","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","role","apply","arguments","MatRow","ctorParameters","MatTableModule","CdkTableModule","CommonModule","MatTable","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRow","MatHeaderRowDef","MatRowDef","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","value","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","next","_sort","sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","pipe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","active","direction","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","MatInkBar","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","Directive","ElementRef","NgZone","MatTabLabel","templateRef","viewContainerRef","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","announcementMessage","duration","horizontalPosition","verticalPosition","MatSnackBarConfig","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","closeWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_onEnter","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","asObservable","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","containerInstance","dismiss","afterOpened","_dismissAfter","announce","politeness","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","MatSnackBarRef","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkCell","CdkHeaderRowDef","CdkRowDef","CDK_ROW_TEMPLATE","MatSidenavContainer","_drawers","ContentChildren","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","_finishDismiss","clearTimeout","_durationTimeoutId","_open","dispose","InjectionToken","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","addEventListener","listener","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","_manualListeners","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","MatListSubheaderCssMatStyler","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","getLabel","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MatDatepickerInput","_dateAdapter","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","_dateFormats","display","dateInput","sameDate","_valueChange","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","selectedChange","selectedDate","_userSelection","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","selectedYear","selectedMonth","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}