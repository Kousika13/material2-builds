{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {take} from 'rxjs/operators/take';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.4-aa2356d');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options');\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar, MAT_SNACK_BAR_DEFAULT_OPTIONS} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [\n    MatSnackBar,\n    LIVE_ANNOUNCER_PROVIDER,\n    {\n      provide: MAT_SNACK_BAR_DEFAULT_OPTIONS,\n      useFactory: MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY\n    },\n  ]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as ConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.onPositionChange.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase\n    implements OnInit, OnDestroy, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [\n    MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n    {provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, useValue: false}\n  ],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_selectedIndex","value","_focusIndex","MatTabHeader","prototype","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","_changeDetectorRef","markForCheck","_selectedIndexChanged","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","selectFocusedIndex","emit","focusIndex","ngAfterContentInit","_this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","requestAnimationFrame","_realignInkBar","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","Object","defineProperty","_isValidIndex","indexFocused","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","PlatformModule","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","state","visibility","transition","animate","verticalStepTransition","trigger","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","matStepperAnimations","horizontalStepTransition","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepHeader","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","_MatTabHeaderMixinBase","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","displayWith","vertical","input","_sliderWrapper","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","useFactory","MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","MatDrawerContainer","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","MatSidenavModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatRadioModule","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","align","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","withPositions","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_previousElevation","newElevation","MatMenu","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","customElevation","c","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","namespace","iconKey","_svgIconConfigs","_getSvgFromConfig","iconSetConfigs","_iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","MatIconRegistry","svgElement","cloneSvg","_loadSvgIconFromConfig","tap","svg","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","log","forkJoin","foundIcon","iconName","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","_dateFilter","controlValue","matDatepickerFilter","_validator","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_lastValueValid","_dateAdapter","createMissingDateImplError","_dateFormats","_localeSubscription","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","deserialize","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","yearSelected","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","getYear","_init","_selectedYear","_minDate","_maxDate","_focusActiveCell","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","createDate","month","getMonth","activeDate","daysInMonth","getNumDaysInMonth","selectedChange","getDate","_handleCalendarBodyKeydown","addCalendarYears","yearsPerPage","_getActiveCell","_matCalendarBody","yearName","getYearName","MatCalendarCell","_shouldEnableYear","dateFilter","firstOfYear","addCalendarDays","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","addCalendarMonths","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","matDatepickerParse","text","compareDate","matDatepickerMin","actual","matDatepickerMax","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_monitoredElements","observableEmpty","info","subject","animationName","isAutofilled","unlisten","_info","MatAutofill","_autofillMonitor","matAutofill","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_overlayAttached","MatAutocompleteTrigger","autocomplete","clickTarget","formField","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}