{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.3-d7a8892');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off.\n    this._tabListContainer.nativeElement.scrollLeft = 0;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Output","selectedTabChange","MatTabGroup","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinDisableRipple","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","backgroundColor","add","updateActiveLink","element","_activeLinkChanged","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatFooterCell","columnDef","cssClassFriendlyName","CdkColumnDef","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","_groupId","coerceBooleanProperty","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatSort","_MatSortMixinBase","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","CdkHeaderCell","MatSlider","_invert","_max","_percent","_calculatePercentage","_value","_min","_step","_roundToDecimal","toString","split","pop","_thumbLabel","_tickInterval","parseFloat","toFixed","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","MatDrawerContent","_container","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_element","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_optionIds","options","option","join","MatSelect","_highlightCorrectOption","empty","_selectionModel","_scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","panel","scrollTop","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","_calculateOverlayPosition","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_appRef","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_isInteractiveList","navList","list","_getListType","_list","hasAttribute","setAttribute","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","hasModifierKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","optionSelected","_uniqueAutocompleteIdCounter","_autoActiveFirstOption","autoActiveFirstOption","MatAutocomplete","_isOpen","showPanel","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}