{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/date-selection-model.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.1.1-2b66521');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off.\n    this._tabListContainer.nativeElement.scrollLeft = 0;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel,\n  ThemePalette\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    if (this._isSelectionInitialized) {\n      this._isSelectionInitialized = false;\n      this._selectionModel.ngOnDestroy();\n    }\n\n    this._selectionModel = this._datepicker._dateSelection;\n\n    this._formatValue(this._selectionModel.getSelection());\n\n    this._datepickerSubscription = this._datepicker._dateSelection.selectionChange.subscribe(() => {\n      this._formatValue(this._selectionModel.getSelection());\n      this._cvaOnChange(this._selectionModel.getSelection());\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._selectionModel ? this._selectionModel.getSelection() : null;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    const oldDate = this._selectionModel.getSelection();\n\n    if (!this._selectionModel) {\n      throw new Error('Input has no MatDatePicker associated with it.');\n    }\n\n    if (!this._dateAdapter.sameDate(value, oldDate)) {\n      this._selectionModel.setSelection(value);\n    }\n\n    this._lastValueValid = this._selectionModel.isValid();\n\n    this._formatValue(this._selectionModel.getSelection());\n\n    if (!this._dateAdapter.sameDate(value, oldDate)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _selectionModel: MatSingleDateSelectionModel<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  private _isSelectionInitialized = true;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n\n    // Set a default model to prevent failure when reading value. Gets overridden when the\n    // datepicker is set.\n    this._selectionModel = new MatSingleDateSelectionModel(_dateAdapter);\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    const current = this._selectionModel.getSelection();\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(current, date)) {\n      this._selectionModel.setSelection(date);\n      this._formatValue(date);\n      this._cvaOnChange(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | MatDateSelectionModel<D> | null) {\n    if (value instanceof MatDateSelectionModel) {\n      value = value.getFirstSelectedDate();\n    }\n\n    this._elementRef.nativeElement.value =\n        value && this._getValidDateOrNull(value) ?\n            this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatYearView<D> implements AfterContentInit, OnDestroy {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /**\n   * The currently selected date.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this._selected.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this._selected instanceof MatSingleDateSelectionModel) {\n      this._selected.add(value);\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody<D>;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell<D>[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  private dateSubscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _selected: MatDateSelectionModel<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n\n    this.extractCurrentMonth();\n    this.dateSubscription = _selected.selectionChange.subscribe(() => this.extractCurrentMonth());\n  }\n\n  ngAfterContentInit() {\n    this._matCalendarBody._updateToday();\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this.dateSubscription.unsubscribe();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const year = this._dateAdapter.getYear(this.activeDate);\n    const start = this._dateAdapter.createDate(year, month, 1);\n    const ariaLabel = this._dateAdapter.format(start, this._dateFormats.display.monthYearA11yLabel);\n    const range = {\n      start,\n      end: this._dateAdapter.createDate(year, month, this._dateAdapter.getNumDaysInMonth(start))\n    };\n    return new MatCalendarCell(\n        range, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  private extractCurrentMonth() {\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected.getFirstSelectedDate());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n  private _selectionSubscription: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /**\n   * The currently selected date.\n   * @deprecated use `selectionModel` to set selected date\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this.selectionModel.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this.selectionModel instanceof MatSingleDateSelectionModel) {\n      this.selectionModel.add(value);\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /**\n   * Emits when the currently selected date changes.\n   * @deprecated Listen to selectionModel valueChange.\n   * @breaking-change 9.0.0\n   */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              readonly selectionModel: MatDateSelectionModel<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n\n    // This should no longer be needed after deprecation of selectedChange\n    this._selectionSubscription = selectionModel.selectionChange.subscribe(() => {\n      this.selectedChange.emit(selectionModel.getFirstSelectedDate() || undefined);\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this._selectionSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /**\n   * Handles date selection in the month view.\n   * @deprecated listen to valueChange in `selectionModel`.\n   * @breaking-change 9.0.0 remove method.\n   */\n  _dateSelected(date: MatDateSelectionModel<D>): void {\n    if (this.selectionModel && !this.selectionModel.isSame(date)) {\n      this.selectedChange.emit(date.getFirstSelectedDate() || undefined);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /**\n   * The currently selected date.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this._selected.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this._selected instanceof MatSingleDateSelectionModel) {\n      this._selected.add(value);\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody<D>;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell<D>[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  private dateSubscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _selected: MatDateSelectionModel<D>,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n\n    this.dateSubscription = _selected.selectionChange.subscribe(() => this.extractYear());\n  }\n\n  ngAfterContentInit() {\n    this._matCalendarBody._updateToday();\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this.dateSubscription.unsubscribe();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this.extractYear();\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const start: D = this._dateAdapter.createDate(year, 0, 1);\n    const end: D = this._dateAdapter.createDate(year, 11, 31);\n    const range = {start, end};\n    const yearName = this._dateAdapter.getYearName(start);\n    return new MatCalendarCell(range, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  private extractYear() {\n    const date = this._selected.getFirstSelectedDate();\n    this._selectedYear = date && this._dateAdapter.getYear(date);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{provide: MatDateSelectionModel, useClass: MatSingleDateSelectionModel}]\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._dateSelection.getSelection(); }\n  set _selected(value: D | null) {\n    this._dateSelection.setSelection(value);\n  }\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _subscriptions = new Subscription();\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MatDateSelectionModel) readonly _dateSelection:\n                  MatSingleDateSelectionModel<D>,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n\n    this._subscriptions.add(_dateSelection.selectionChange.subscribe(() => {\n      this._selectedChanged.next(_dateSelection.getSelection() || undefined);\n    }));\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._subscriptions.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._dateSelection.getSelection();\n    if (!this._dateAdapter.sameDate(oldValue, date)) {\n      this._dateSelection.add(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  ViewEncapsulation,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {take} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n * @breaking-change 9.0.0 remove generic default type\n */\nexport class MatCalendarCell<D = unknown> {\n  constructor(\n      /** The range of dates represented by this cell (inclusive). */\n      public range: { start: D, end: D },\n      /** The text value to display in the cell. */\n      public displayValue: string,\n      /** The aria-label to use for the cell. */\n      public ariaLabel: string,\n      /** Whether the cell is enabled. */\n      public enabled: boolean,\n      public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n})\n// @breaking-change 9.0.0 remove generic default type\nexport class MatCalendarBody<D = unknown> implements OnChanges, OnDestroy {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell<D>[][];\n\n  /**\n   * The value in the table that corresponds to today.\n   * @deprecated No longer needed since MatCalendarBody now gets today value from DateAdapter.\n   * @breaking-change 9.0.0 remove this property\n   */\n  @Input() todayValue: number;\n\n  /**\n   * The value in the table that is currently selected.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selectedValue(): number {\n    if (this._selectionModel instanceof MatSingleDateSelectionModel) {\n      const date = this._selectionModel.getSelection();\n      if (date) {\n        const granularity = this._getFirstCellGranularity();\n        if (granularity == 'day') {\n          return this._dateAdapter.getDate(date);\n        } else if (granularity == 'month') {\n          return this._dateAdapter.getMonth(date);\n        } else {\n          return this._dateAdapter.getYear(date);\n        }\n      }\n    }\n    return null!;\n  }\n  set selectedValue(value: number) {\n    if (this._selectionModel instanceof MatSingleDateSelectionModel) {\n      if (value !== null) {\n        const date = this._selectionModel.getSelection() || this._getFirstCellRange().start;\n        const granularity = this._getFirstCellGranularity();\n        const year = granularity == 'year' ? value : this._dateAdapter.getYear(date);\n        const month = granularity == 'month' ? value : this._dateAdapter.getMonth(date);\n        const day = granularity == 'day' ? value : this._dateAdapter.getDate(date);\n        this._selectionModel.setSelection(this._dateAdapter.createDate(year, month, day));\n      } else {\n        this._selectionModel.setSelection(null);\n      }\n    }\n  }\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /**\n   * Emits when a new value is selected.\n   * @deprecated Please listen for selection change via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  private _today: D;\n  private _selectionSubscription: Subscription;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _cdr: ChangeDetectorRef,\n              private _dateAdapter: DateAdapter<D>,\n              readonly _selectionModel: MatDateSelectionModel<D>) {\n    this._updateToday();\n\n    this._selectionSubscription =\n        this._selectionModel.selectionChange.subscribe(() => this._cdr.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._selectionSubscription.unsubscribe();\n  }\n\n  _cellClicked(cell: MatCalendarCell<D>): void {\n    if (cell.enabled && this._selectionModel instanceof MatSingleDateSelectionModel) {\n      const date = cell.range.start;\n      const granularity = this._getFirstCellGranularity();\n      if (granularity == 'year') {\n        this.selectedValueChange.emit(this._dateAdapter.getYear(date));\n      } else if (granularity == 'month') {\n        this.selectedValueChange.emit(this._dateAdapter.getMonth(date));\n      } else {\n        this.selectedValueChange.emit(this._dateAdapter.getDate(date));\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  _isSelected(item: MatCalendarCell<D>): boolean {\n    return this._selectionModel.overlaps(item.range);\n  }\n\n  _isToday(item: MatCalendarCell<D>): boolean {\n    return this._dateAdapter.compareDate(item.range.start, this._today) <= 0 &&\n        this._dateAdapter.compareDate(item.range.end, this._today) >= 0;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  _updateToday() {\n    this._today = this._dateAdapter.today();\n    // Note(mmalerba): This is required to zero out the time portion of the date.\n    // Revisit this when we support time picking.\n    this._today = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this._today),\n        this._dateAdapter.getMonth(this._today),\n        this._dateAdapter.getDate(this._today));\n  }\n\n  // @breaking-change 9.0.0 remove when deprecated properties relying on it are removed.\n  private _getFirstCellRange() {\n    return (this.rows && this.rows[0] && this.rows[0][0] && this.rows[0][0].range);\n  }\n\n  // @breaking-change 9.0.0 remove when deprecated properties relying on it are removed.\n  private _getFirstCellGranularity(): 'day' | 'month' | 'year' {\n    const range = this._getFirstCellRange();\n    if (this._dateAdapter.getYear(range.start) == this._dateAdapter.getYear(range.end)) {\n      if (this._dateAdapter.getMonth(range.start) == this._dateAdapter.getMonth(range.end)) {\n        if (this._dateAdapter.getDate(range.start) == this._dateAdapter.getDate(range.end)) {\n          return 'day';\n        }\n        return 'month';\n      }\n      return 'year';\n    }\n    return 'day';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n  MatDateFormats,\n  MatDateSelectionModel,\n  MatSingleDateSelectionModel\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatMonthView<D> implements AfterContentInit, OnDestroy {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /**\n   * The currently selected date.\n   * @deprecated Please get/set the selection via the `MatDateSelectionModel` instead.\n   * @breaking-change 9.0.0 remove this property.\n   */\n  @Input()\n  get selected(): D | null { return this._selectionModel.getFirstSelectedDate(); }\n  set selected(value: D | null) {\n    if (this._selectionModel instanceof MatSingleDateSelectionModel) {\n      this._selectionModel.add(value);\n      this.extractDate();\n    }\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody<D>;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell<D>[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  private dateSubscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              readonly _selectionModel: MatDateSelectionModel<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n\n    this.extractDate();\n    this.dateSubscription = _selectionModel.selectionChange.subscribe(() => this.extractDate());\n  }\n\n  ngAfterContentInit() {\n    this._matCalendarBody._updateToday();\n    this._init();\n  }\n\n  ngOnDestroy() {\n    this.dateSubscription.unsubscribe();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this._selectionModel.add(selectedDate);\n      this.selectedChange.emit(selectedDate);\n    }\n\n    if (this._selectionModel.isComplete()) {\n      this._userSelection.emit();\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this._selectionModel.getFirstSelectedDate());\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const range = {start: date, end: date};\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell<D>(range, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Extract selected date from current selection */\n  private extractDate() {\n    this._selectedDate = this._getDateInCurrentMonth(this._selectionModel.getFirstSelectedDate());\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    if (this._ngZone) {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FactoryProvider, Injectable, OnDestroy, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {DateAdapter} from './date-adapter';\n\n\n/** A selection model used to represent the currently selected value in a date picker. */\nexport abstract class MatDateSelectionModel<D> implements OnDestroy {\n  /** Emits when the selected value has changed. */\n  selectionChange = new Subject<void>();\n\n  protected constructor(protected readonly adapter: DateAdapter<D>) {}\n\n  ngOnDestroy() {\n    this.selectionChange.complete();\n  }\n\n  /** Adds a date to the current selection. */\n  abstract add(date: D): void;\n\n  /** Clones this selection model. */\n  abstract clone(): MatDateSelectionModel<D>;\n\n  /** Gets the first date in the current selection. */\n  abstract getFirstSelectedDate(): D|null;\n\n  /** Gets the last date in the current selection. */\n  abstract getLastSelectedDate(): D|null;\n\n  /** Whether the selection is complete for this selection model. */\n  abstract isComplete(): boolean;\n\n  /** Whether the selection model contains the same selection as the given selection model. */\n  abstract isSame(other: MatDateSelectionModel<D>): boolean;\n\n  /** Whether the current selection is valid. */\n  abstract isValid(): boolean;\n\n  /** Whether the given date is contained in the current selection. */\n  abstract contains(value: D): boolean;\n\n  /** Whether the given date range overlaps the current selection in any way. */\n  abstract overlaps(range: DateRange<D>): boolean;\n}\n\n/** Represents a date range. */\nexport interface DateRange<D> {\n  /** The start of the range. */\n  start: D | null;\n\n  /** The end of the range. */\n  end: D | null;\n}\n\n/** A concrete implementation of a `MatDateSelectionModel` that holds a single date. */\n@Injectable()\nexport class MatSingleDateSelectionModel<D> extends MatDateSelectionModel<D> {\n  private date: D | null = null;\n\n  constructor(adapter: DateAdapter<D>) {\n    super(adapter);\n  }\n\n  /** Sets the current selection. */\n  setSelection(date: D | null) {\n    this.date = date;\n  }\n\n  /** Gets the current selection. */\n  getSelection(): D | null {\n    return this.isValid() ? this.adapter.deserialize(this.date) : null;\n  }\n\n  /**\n   * Adds the given date to the selection model. For a `MatSingleDateSelectionModel` this means\n   * simply replacing the current selection with the given selection.\n   */\n  add(date: D) {\n    if (!this.adapter.sameDate(date, this.date)) {\n      this.date = date;\n      this.selectionChange.next();\n    }\n  }\n\n  clone(): MatDateSelectionModel<D> {\n    const cloned = new MatSingleDateSelectionModel<D>(this.adapter);\n    cloned.setSelection(this.date);\n    return cloned;\n  }\n\n  getFirstSelectedDate() { return this.date; }\n\n  getLastSelectedDate() { return this.date; }\n\n  isComplete() { return !!this.date; }\n\n  isSame(other: MatDateSelectionModel<D>): boolean {\n    return other instanceof MatSingleDateSelectionModel &&\n        this.adapter.sameDate(other.date, this.date);\n  }\n\n  isValid(): boolean {\n    return !!(this.date &&\n      this.adapter.isDateInstance(this.date) &&\n      this.adapter.isValid(this.date));\n  }\n\n  contains(value: D): boolean {\n    return !!(this.date && this.adapter.sameDate(value, this.date));\n  }\n\n  /**\n   * Determines if the single date is within a given date range. Retuns false if either dates of\n   * the range is null or if the selection is undefined.\n   */\n  overlaps(range: DateRange<D>): boolean {\n    return !!(this.date && range.start && range.end &&\n        this.adapter.compareDate(range.start, this.date) <= 0 &&\n        this.adapter.compareDate(this.date, range.end) <= 0);\n  }\n}\n\n/**\n * Concrete implementation of a MatDateSelectionModel that holds a date range, represented by\n * a start date and an end date.\n */\n@Injectable()\nexport class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<D> {\n  private start: D | null = null;\n  private end: D | null = null;\n\n  constructor(adapter: DateAdapter<D>) {\n    super(adapter);\n  }\n\n  /** Sets the current selection. */\n  setSelection(range: DateRange<D>) {\n    this.start = range.start;\n    this.end = range.end;\n  }\n\n  /** Gets the current selection. */\n  getSelection(): DateRange<D> {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n\n  /**\n   * Adds the given date to the selection model. For a `MatRangeDateSelectionModel` this means:\n   * - Setting the start date if nothing is already selected.\n   * - Setting the end date if the start date is already set but the end is not.\n   * - Clearing the selection and setting the start date if both the start and end are already set.\n   */\n  add(date: D): void {\n    if (!this.start) {\n      this.start = date;\n    } else if (!this.end) {\n      this.end = date;\n    } else {\n      this.start = date;\n      this.end = null;\n    }\n\n    this.selectionChange.next();\n  }\n\n  clone(): MatDateSelectionModel<D> {\n    const cloned = new MatRangeDateSelectionModel<D>(this.adapter);\n    cloned.setSelection({start: this.start, end: this.end});\n    return cloned;\n  }\n\n  getFirstSelectedDate() { return this.start; }\n\n  getLastSelectedDate() { return this.end; }\n\n  isComplete(): boolean {\n    return !!(this.start && this.end);\n  }\n\n  isSame(other: MatDateSelectionModel<D>): boolean {\n    return other instanceof MatRangeDateSelectionModel &&\n        this.adapter.sameDate(this.start, other.start) &&\n        this.adapter.sameDate(this.end, other.end);\n  }\n\n  isValid(): boolean {\n    return !!(this.start && this.end &&\n        this.adapter.isValid(this.start!) && this.adapter.isValid(this.end!));\n  }\n\n  contains(value: D): boolean {\n    if (this.start && this.end) {\n      return this.adapter.compareDate(this.start, value) <= 0 &&\n          this.adapter.compareDate(this.end, value) >= 0;\n    } else if (this.start) {\n      return this.adapter.sameDate(this.start, value);\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns true if the given range and the selection overlap in any way. False if otherwise, that\n   * includes incomplete selections or ranges.\n   */\n  overlaps(range: DateRange<D>): boolean {\n    if (!(this.start && this.end && range.start && range.end)) {\n      return false;\n    }\n\n    return (\n      this.isBetween(range.start, this.start, this.end) ||\n      this.isBetween(range.end, this.start, this.end) ||\n      (\n        this.adapter.compareDate(range.start, this.start) <= 0 &&\n        this.adapter.compareDate(this.end, range.end) <= 0\n      )\n    );\n  }\n\n  private isBetween(value: D, from: D, to: D): boolean {\n    return this.adapter.compareDate(from, value) <= 0 && this.adapter.compareDate(value, to) <= 0;\n  }\n}\n\nexport function MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY<D>(parent: MatSingleDateSelectionModel<D>,\n                                                           adapter: DateAdapter<D>) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n\nexport const MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\nexport * from './date-selection-model';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n"],"names":["useExisting","MatTreeNodePadding","level","type","Input","args","indent","CdkTreeNodePadding","MatTree","_super","tslib_1.__extends","Component","selector","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","propDecorators","MatTreeNodeToggle","_this","apply","this","arguments","recursive","Directive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNode","MatTreeNodeOutlet","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","prototype","_flattenNode","node","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","_elementRef","_dir","changeDetectorRef","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","ngOnDestroy","unsubscribe","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","inputs","[class.mat-tab-disabled]","[attr.aria-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","style","transform","Math","round","v","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","NgZone","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","platform","globalOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","_ripplesGloballyDisabled","rippleConfig","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_a","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_fixedBottomGap","MatSidenav","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavContent","MatSidenavModule","ScrollingModule","PlatformModule","MatDrawerContainer","MatDrawerContent","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatSpinner","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","scrollDispatcher","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","fromEvent","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","mode","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","_userContent","autosize","_fixedInViewport","_fixedTopGap","tooltipClass","MatTooltip","TooltipComponent","_visibility","_closeOnInteraction","_onHide","_isHandset","delay","_hideTimeoutId","_showTimeoutId","afterHidden","isVisible","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","e","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenu","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","menu","menuData","menuOpened","onMenuOpen","menuClosed","onMenuClose","MatMenuTrigger","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","hasModifierKey","altKey","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","_detach","_portal","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","(touchend)","AriaDescriber","HAMMER_LOADER","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","_attached","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","triggersSubmenu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isInteractiveList","navList","list","_getListType","_list","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","aria-multiselectable","_loadSvgIconSetFromConfig","iconSetConfig","catchError","err","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","forkJoin","iconSetFetchRequests","foundIcon","_extractIconWithNameFromAnySet","iconSetConfigs","getMatIconNameNotFoundError","MatIconRegistry","iconName","svgElement","_extractSvgIconFromSet","_loadSvgIconFromConfig","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","svg","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","dateChange","dateInput","MatDatepickerInput","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","datepicker","_watchStateChanges","datepickerDisabled","_disabledChange","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","MatExpansionModule","CdkAccordionModule","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","_getSvgFromIconSetConfigs","observableThrow","namedIcon","oldActiveDate","_activeDate","activeDate","_dateAdapter","addCalendarMonths","getMonth","addCalendarYears","_monthSelected","compareDate","activeDateChange","_focusActiveCell","_init","_selectedMonth","_getMonthInCurrentYear","_todayMonth","today","_yearLabel","getYearName","monthNames","getMonthNames","_months","month","_createCellForMonth","_matCalendarBody","date","getYear","monthName","year","createDate","format","_dateFormats","display","monthYearA11yLabel","range","end","getNumDaysInMonth","MatCalendarCell","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","dateFilter","firstOfMonth","addCalendarDays","maxDate","maxYear","maxMonth","minDate","minYear","minMonth","_getValidDateOrNull","isDateInstance","isValid","extractCurrentMonth","getFirstSelectedDate","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","DateAdapter","selectedChange","monthSelected","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","selectionModel","createMissingDateImplError","_selectionSubscription","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","dateClass","yearSelected","_userSelection","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateSelection","_subscriptions","_selectedChanged","getSelection","_startAt","_getThemePalette","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","getConnectedOverlayOrigin","MatDateSelectionModel","MatSingleDateSelectionModel","MatDialog","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_formField","_valueChange","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_isSelectionInitialized","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","deserialize","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","_formatValue","oldDate","sameDate","setSelection","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","sibling","_closeDialogs","dialogs","Location","MatDialogConfig","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","OverlayContainer","dialogElementUid","MatDialogClose","dialogRef","getClosestDialog","openDialogs","proxiedChange","_matDialogClose","_matDialogCloseResult","dialogResult","MatDialogRef","MatDialogTitle","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatDialogContainer","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","focused","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[attr.placeholder]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cdr","numCols","activeCell","cellAspectRatio","selectedValueChange","_updateToday","granularity","_getFirstCellGranularity","getDate","_getFirstCellRange","day","_cellClicked","cell","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_isSelected","overlaps","_isToday","_today","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","extractDate","dateSubscription","validDate","clampDate","_hasSameMonthAndYear","_minDate","_maxDate","_dateSelected","_selectedDate","selectedYear","selectedMonth","selectedDate","isComplete","_handleCalendarBodyKeydown","_getDateInCurrentMonth","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","extractYear","_todayYear","activeOffset","_years","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","_shouldEnableYear","firstOfYear","_selectedYear","normalizedDate","MatChip","selectViaInteraction","_dispatchSelectionChange","toggleSelected","chip","removable","DELETE","BACKSPACE","selectable","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","MatChipAvatar","trailingIcon","MatChipTrailingIcon","removeIcon","MatChipRemove","destroyed","_MatChipMixinBase","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","ariaOrientation","_selectable","_chipInput","_hasFocusedChip","chips","chipListSelectable","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","chipList","CHIP_DECLARATIONS","MatChipsModule","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","_afterClosed","_beforeClosed","phaseName","_result","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","siblings","hasAttribute","MatButtonToggleGroup","_buttonToggles","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroupMultiple","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MatButtonToggle","appearance","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultOptions","_isSingleSelector","buttonToggleGroup","_appearance","_syncButtonToggle","_uniqueIdCounter","_isPrechecked","_buttonElement","_onButtonClick","newChecked","MatButtonToggleChange","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","align","[class.mat-card-actions-align-end]","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","CHIP_ATTRIBUTE_NAMES","_removable","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","CHIP_ATTRIBUTE_NAMES_1","tagName","_removeTriggerEvents","_hidden","val","MatBadge","isAbove","isAfter","badgeElement","_badgeElement","description","_renderer","destroyNode","_updateTextContent","_createBadgeElement","rootNode","_updateHostAriaDescription","newDescription","oldDescription","colorPalette","_color","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","_MatBadgeMixinBase","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","_rawValue","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_hasContent","_overlap","_description","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","valueFunction","valuesArray","MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY","adapter","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","cloned","getLastSelectedDate","isSame","other","MatRangeDateSelectionModel","isBetween","to","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded"],"mappings":"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"}