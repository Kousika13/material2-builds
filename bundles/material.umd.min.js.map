{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-rc.12-99f39ca');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatCellDef,\n  MatHeaderCellDef,\n  MatColumnDef,\n  MatHeaderRowDef,\n  MatRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => this._slideRenderer.stopThumbDrag());\n      });\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._getDirection(),\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupRef.setDirection(this._getDirection());\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._getDirection(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n\n  /** Returns the layout direction of the datepicker. */\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return !!this._rawValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","type","ViewportRuler","Directionality","decorators","Optional","MatTabHeader","propDecorators","_tabListContainer","ViewChild","args","_tabList","selectedIndex","Input","selectFocusedIndex","Output","indexFocused","nextId","MatTabChangeEvent","MatTabGroupBase","_elementRef","this","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","Object","defineProperty","prototype","value","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","nativeElement","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","emit","Promise","resolve","then","forEach","tab","index","position","isActive","origin","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","ngOnDestroy","unsubscribe","realignInkBar","_tabHeader","_alignInkBarToSelectedTab","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","style","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","Component","selector","exportAs","template","styles","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_dir","_ngZone","_viewportRuler","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","dirChange","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","_inkBar","show","alignToElement","hide","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","transform","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","_renderChangesSubscription","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","offsetWidth","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[style.margin-left.px]","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","MatOptionModule","MatFormFieldModule","MatSelect","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleDimensions","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","svgElement","_fetchUrl","url","svgText","_svgElementFromString","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","setDirection","_getDirection","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_canOpen","_previousValue","_attachOverlay","_floatLabel","MatAutocompleteTrigger","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","openPanel","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}