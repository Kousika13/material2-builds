{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-1e7eeab');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private _closeKeyEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '*'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '*'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed: EventEmitter<void | 'click' | 'keydown'>\n      = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // TODO(crisbeto): make the origin required when doing breaking changes.\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * <mat-expansion-panel>\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header>\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange: EventEmitter<MatChipSelectionChange>\n      = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["declarations","MatTabGroup","MatTabLabel","MatTab","MatInkBar","MatTabLabelWrapper","MatTabNav","MatTabLink","MatTabBody","MatTabBodyPortal","MatTabHeader","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_elementRef","this","_MatToolbarMixinBase","mixinColor","type","Directive","args","selector","exportAs","host","class","MatToolbarRow","MatToolbar","_super","elementRef","_platform","document","_this","call","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","slice","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","inputs","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","undefined","decorators","Inject","DOCUMENT","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","PlatformModule","exports","VERSION","Version","SELECT_PANEL_PADDING_X","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","role","apply","arguments","MatRow","ctorParameters","MatTableModule","CdkTableModule","CommonModule","MatTable","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRowDef","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","value","_isNumberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","next","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","pipe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","ElementRef","NgZone","templateRef","viewContainerRef","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinDisableRipple","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","_afterDismissed","asObservable","MatSnackBarRef","afterOpened","containerInstance","_onEnter","onAction","_onAction","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","dismiss","_dismissAfter","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkCell","CdkHeaderRowDef","MatSidenavContainer","_drawers","ContentChildren","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterOpened","_dismissedByAction","_finishDismiss","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","dismissedByAction","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","_manualListeners","listener","addEventListener","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","MatListSubheaderCssMatStyler","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","getLabel","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","registerDatepicker","MatDatepickerInput","_datepicker","_registerInput","_dateFilter","_validatorOnChange","_dateAdapter","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","_dateFormats","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","Validators","compose","localeChanges","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles"],"mappings":"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"}