{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null) {\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      // TODO(crisbeto): handle blank/null options inside multi-select.\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.2.1-9b80a4c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 _animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withTransformOriginOn('.mat-menu-panel')\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","_updatePagination","_alignInkBarToSelectedTab","this","_keyManager","FocusKeyManager","_labelWrappers","withHorizontalOrientation","_getLayoutDirection","updateActiveItemIndex","requestAnimationFrame","realign","_realignInkBar","merge","dirChange","resize","subscribe","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","value","_isValidIndex","focusIndex","setActiveItem","indexFocused","emit","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","scrollLeft","scrollWidth","offsetWidth","_dir","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","onKeydown","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","defaults","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","errorStateMatcher","selectionChange","valueChange","MatSelect","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","A11yModule","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","setPositionClasses","posX","posY","xPosition","yPosition","classes","_classList","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","distinctUntilChanged","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","_setSelected","hasChanged","_reportValueChange","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","className","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","A","ctrlKey","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","foundIcon","getMatIconNameNotFoundError","MatIconRegistry","_extractIconWithNameFromAnySet","iconName","iconSetConfigs","svgElement","_extractSvgIconFromSet","_loadSvgIconFromConfig","_fetchUrl","url","svgText","_createSvgElementForSingleIcon","_loadSvgIconSetFromConfig","_svgElementFromString","responseText","svg","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","_getSvgFromIconSetConfigs","observableThrow","namedIcon","iconSetFetchRequests","iconSetConfig","catchError","forkJoin","activeDate","addCalendarYears","_activeDate","yearsPerPage","_yearSelected","getYear","compareDate","oldActiveDate","activeDateChange","_focusActiveCell","_getActiveCell","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":";;;;;;;i/D+JoBA,SAAgB6sF,GAAUC,EAAGxvE,GAEzB,QAASyvE,KAAO3sF,KAAK4sF,YAAcF,EADnCG,GAAcH,EAAGxvE,GAEjBwvE,EAAE3rF,UAAkB,OAANmc,EAAa1b,OAAO0rB,OAAOhQ,IAAMyvE,EAAG5rF,UAAYmc,EAAEnc,UAAW,GAAI4rF,ICJnF,QAAAG,KACE,OAAO,ECFT,QAAAz/E,GAAyD0/E,GACvD,MAAF,UAAA5lF,GAMI,QAAJ6lF,KAAA,IAAgB,GAAhB5nF,MAAAmjD,EAAA,EAAgBA,EAAhB/vC,UAAAhW,OAAgB+lD,IAAAnjD,EAAhBmjD,GAAA/vC,UAAA+vC,EAAI,IAAJ1oD,GAAAsH,EAAA4C,MAAA/J,KAA2CoF,IAA3CpF,WALAH,GAAAygC,WAAiC,IApBjC,MAmBuBl4B,GAAvB4kF,EAAA7lF,GAGI3F,OAAJC,eAAQurF,EAARjsF,UAAA,gBAAI,WAAiB,MAAOf,MAAKsgC,eAC7B,SAAa5+B,GAAc1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,oCAvBtEsrF,GAmBuBD,GCOvB,QAAA/lF,GAAiE+lF,EAC7DE,GACF,MAAF,UAAA9lF,GAmBI,QAAJ6lF,KAAA,IAAgB,GAAhB5nF,MAAAmjD,EAAA,EAAgBA,EAAhB/vC,UAAAhW,OAAgB+lD,IAAAnjD,EAAhBmjD,GAAA/vC,UAAA+vC,EAAI,IAAJ1oD,GAAAsH,EAAA4C,MAAA/J,KACeoF,IADfpF,WAIMH,GAAK48C,MAAQwwC,IAnDnB,MA4BuB7kF,GAAvB4kF,EAAA7lF,GAGI3F,OAAJC,eAAQurF,EAARjsF,UAAA,aAAI,WAA4B,MAAOf,MAAKshF,YACxC,SAAU5/E,GACR,GAAM2gF,GAAe3gF,GAASurF,CAE1B5K,KAAiBriF,KAAKshF,SACpBthF,KAAKshF,QACPthF,KAAK0E,YAAY9B,cAAc4F,UAAUC,OAAO,OAAOzI,KAAKshF,QAE1De,GACFriF,KAAK0E,YAAY9B,cAAc4F,UAAUG,IAAI,OAAO05E,GAGtDriF,KAAKshF,OAASe,oCA3CtB2K,GA4BuBD,GCVvB,QAAA9lF,GAA8D8lF,GAE5D,MAAF,UAAA5lF,GAOI,QAAJ6lF,KAAA,IAAgB,GAAhB5nF,MAAAmjD,EAAA,EAAgBA,EAAhB/vC,UAAAhW,OAAgB+lD,IAAAnjD,EAAhBmjD,GAAA/vC,UAAA+vC,EAAI,IAAJ1oD,GAAAsH,EAAA4C,MAAA/J,KAA2CoF,IAA3CpF,WANAH,GAAAqtF,gBAAsC,IArBtC,MAoBuB9kF,GAAvB4kF,EAAA7lF,GAII3F,OAAJC,eAAQurF,EAARjsF,UAAA,qBAAI,WAAsB,MAAOf,MAAKktF,oBAClC,SAAkBxrF,GAAc1B,KAAKktF,eAAiB7kF,EAAAA,sBAAsB3G,oCAzBhFsrF,GAoBuBD,GCFvB,QAAA3/E,GAAiE2/E,EAASI,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAAhmF,GASI,QAAJ6lF,KAAA,IAAgB,GAAhB5nF,MAAAmjD,EAAA,EAAgBA,EAAhB/vC,UAAAhW,OAAgB+lD,IAAAnjD,EAAhBmjD,GAAA/vC,UAAA+vC,EAAI,IAAJ1oD,GAAAsH,EAAA4C,MAAA/J,KACeoF,IADfpF,WARAH,GAAAu1E,UAAgC+X,IArBhC,MAoBuB/kF,GAAvB4kF,EAAA7lF,GAGI3F,OAAJC,eAAQurF,EAARjsF,UAAA,gBAAI,WAAyB,MAAOf,MAAKoC,UAAY,EAAIpC,KAAKo1E,eAC1D,SAAa1zE,GAEX1B,KAAKo1E,UAAqB,MAAT1zE,EAAgBA,EAAQyrF,mCA1B/CH,GAoBuBD,GCavB,QAAAv1C,GAAsEu1C,GAEpE,MAAF,UAAA5lF,GAyBI,QAAJ6lF,KAAA,IAAgB,GAAhB5nF,MAAAmjD,EAAA,EAAgBA,EAAhB/vC,UAAAhW,OAAgB+lD,IAAAnjD,EAAhBmjD,GAAA/vC,UAAA+vC,EAAI,IAAJ1oD,GAAAsH,EAAA4C,MAAA/J,KACeoF,IADfpF,WAvBAH,GAAA4pF,YAA0B,EAM1B5pF,EAAA45C,aAA4B,GAAI5tC,GAAAA,UA3ChC,MAmCuBzD,GAAvB4kF,EAAA7lF,GAYI6lF,EAAJjsF,UAAA45C,iBAAI,WACE,GAAMgiC,GAAW38E,KAAKypF,WAChBt/D,EAASnqB,KAAKq3C,kBAAoBr3C,KAAKo3C,YACvCg2C,EAAUptF,KAAKkmC,mBAAqBlmC,KAAKm3C,0BACzCn/B,EAAUhY,KAAKs3C,UAAYt3C,KAAKs3C,UAAgC,QAAG,KACnEolC,EAAW0Q,EAAQr1E,aAAaC,EAASmS,EAE3CuyD,KAAaC,IACf38E,KAAKypF,WAAa/M,EAClB18E,KAAKy5C,aAAa7sC,SAxD1BogF,GAmCuBD,GCHvB,QAAAp/D,GAA4Do/D,GAE1D,MAAF,UAAA5lF,GAyBI,QAAJ6lF,KAAA,IAAgB,GAAhB5nF,MAAAmjD,EAAA,EAAgBA,EAAhB/vC,UAAAhW,OAAgB+lD,IAAAnjD,EAAhBmjD,GAAA/vC,UAAA+vC,EAAI,IAAJ1oD,GAAAsH,EAAA4C,MAAA/J,KAA2CoF,IAA3CpF,WAvBAH,GAAAugC,gBAAqB,EAOrBvgC,EAAAwtF,uBAMAxtF,EAAAwe,YAAkB,GAAIivE,GAAAA,WAAiB,SAAAC,GAG7B1tF,EAAKugC,eACPvgC,EAAK2tF,kBAAkBD,GAEvB1tF,EAAwB,oBAAEgV,KAAK04E,OAvDvC,MAkCuBnlF,GAAvB4kF,EAAA7lF,GAgCI6lF,EAAJjsF,UAAAmuB,iBAAI,WACE,GAAIlvB,KAAKogC,eACP,KAAMjX,OAAM,wFAIdnpB,MAAKogC,gBAAiB,EAEtBpgC,KAAwB,oBAAEoJ,QAAQpJ,KAAKwtF,mBACvCxtF,KAAKqtF,oBAAsB,MAI7BL,EAAJjsF,UAAAysF,kBAAI,SAAkBD,GAChBA,EAAW3gF,OACX2gF,EAAW1gF,YAjFjBmgF,GAkCuBD,GChBvB,QAAAU,KACE,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAAAC,GAAkBprF,EAAgBqrF,GAEhC,IAAK,GADCC,GAAc9kE,MAAMxmB,GACjB6H,EAAI,EAAGA,EAAI7H,EAAQ6H,IAC1ByjF,EAAYzjF,GAAKwjF,EAAcxjF,EAEjC,OAAOyjF,GC6PT,QAAAC,GAAmChiF,GAIjCiiF,OAAOnzC,iBAAiB9uC,GAASkiF,iBAAiB,WAMpD,QAAAC,GAAkCvyD,EAAWE,EAAW8uD,GACtD,GAAMwD,GAAQ1qF,KAAKC,IAAID,KAAKk9C,IAAIhlB,EAAIgvD,EAAKxqE,MAAO1c,KAAKk9C,IAAIhlB,EAAIgvD,EAAK79D,QAC5DshE,EAAQ3qF,KAAKC,IAAID,KAAKk9C,IAAI9kB,EAAI8uD,EAAK39D,KAAMvpB,KAAKk9C,IAAI9kB,EAAI8uD,EAAK19D,QACjE,OAAOxpB,MAAK4qF,KAAKF,EAAQA,EAAQC,EAAQA,kCxBlDvC,IAAJ,GALAE,GAAAr1C,EAAA92C,UAG2BosF,EAA3BlwC,EAAAl8C,UACQqsF,EAAe,EACvBnkF,EAAiB,EAAjBA,EAAAm+C,EAAA,EAAAn+C,IACAikF,EAAQjkF,GAARwsC,OAAoBy3C,EAApBjkF,GAAAwsC,QAAA03C,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,gCAcA,OAAAC,GAAAC,EAEAD,EAGIA,EAAJE,EAAAD,EAAA7vC,EACAp7C,KAAAC,IAAA,EAAA+qF,EAAA5vC,EAAA8vC,GAGAD,EyBtSA,QAAA/E,KACE,MAAOxgE,OAAM,gEAIf,QAAA8gE,GAAmDpP,GACjD,MAAO1xD,OAAM,4CAA2C0xD,EAA1D,QAIA,QAAAuP,KACE,MAAOjhE,OAAM,sDZiDf,QAAAmjE,KACE,OAAQzL,uBAAuB,G5IJjC,QAAA3D,GAAyD9yC,GACvD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,cAuBxC,QAAApO,KACE,MAAOr3D,OAAM,6M8HkFf,QAAAogD,GAA8Bh/C,GAC5B,MAAFM,OAAa,GAAIs4D,IAA2B54D,GtCvI5C,QAAAquD,KACE,KAAMzvD,OAAM,yEEMd,QAAA0lE,GAAmDzkD,GACjD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiBC,SAIxC,QAAApc,GAA4Dv+B,GAE1D,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiBC,SAoTxC,QAAAxb,GACIh/C,EAA0BukE,GAC5B,MAAFjkE,OAAaikE,EAAmBvkE,GCvOhC,QAAA4gD,GAA0Bp/D,EAAqBq9D,GAG7C,IAFA,GAAIj/C,GAA6Bpe,EAAQnJ,cAAc6nE,cAEhDtgD,IAAWA,EAAO3hB,UAAU2I,SAAS,yBAC1CgZ,EAASA,EAAOsgD,aAGlB,OAAOtgD,GAASi/C,EAAY38D,KAAK,SAAAu9D,GAAU,MAAAA,GAAO17C,KAApD,EAAmEA,KAAM,K8DlIzE,QAAAu/C,GAAgD3oE,GAC9C,MAAOikB,OAAM,eAAejkB,EAA9B,mCCDA,QAAAw6D,GAA2CqvB,GACzC,MAAO5lE,OACH,wCAAwC4lE,EAD9C,0JnE6CA,QAAA5qB,IAAuD/5B,GACrD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,coE5CxC,QAAArzB,IAA+B75D,GAC7B,MAAO,IAAGA,GAAS,IAOrB,QAAAi1D,IAA+Bj1D,GAC7B,MAAwB,gBAAVA,GAAqB+L,SAAS/L,EAAO,IAAMA,E3E8P3D,QAAA43D,IAAc01B,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAAAj2B,IAAwBr3D,GACtB,MAAQA,GAAMutF,MAAM,aAAgBvtF,EAAQA,EAAQ,Kf5PtD,QAAA4nD,IAA4CG,GAC1C,MAAOtgC,OAAM,sCAAsCsgC,EAArD,KASA,QAAA4B,MACE,MAAOliC,OAAM,8JAWf,QAAAuiC,IAAmD3B,GACjD,MAAO5gC,OAAM,yHACkD4gC,EAAjE,MAQA,QAAA4S,IAAuDJ,GACrD,MAAOpzC,OAAM,2HACkDozC,EAAjE,MAihBA,QAAA5P,IACEuiC,EACAC,EACAC,EACA5+E,GACA,MAAO0+E,IAAkB,GAAI3lC,IAAgB4lC,EAAYC,EAAW5+E,GAiBtE,QAAA6sD,IAAkBhT,GAChB,MAAOA,GAAIM,WAAU,GAIvB,QAAAyB,IAAiBF,EAAmBv0C,GAClC,MAAOu0C,GAAY,IAAMv0C,E2F/lB3B,QAAAq9B,MACE,KAAM7rB,OAAM,yKAYd,QAAA88B,MACE,KAAM98B,OAAM,oIASd,QAAA+8B,MACE,KAAM/8B,OAAM,kItGiCd,QAAAs8B,MACE,OACE/S,gBAAgB,EAChBlB,UAAW,QACXC,UAAW,QACX2D,cAAe,oCC1BnB,QAAAvC,IAAiDzI,GAC/C,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,csGpCxC,QAAAj1C,MACE,MAAOxwB,OAAM,iEASf,QAAAwzB,MACE,MAAOxzB,OAAM,sDAQf,QAAAywB,MACE,MAAOzwB,OAAM,qC9KsGf,QAAA6tB,IAA4D5M,GAE1D,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,cClFxC,QAAA/jD,IAAkDxhC,GAChD,MAAO8f,OAAM,qBAAqB9f,EAApC,iBAQA,QAAA29B,IAAoDoD,GAClD,MAAO,YAAM,MAAAA,GAAQ06C,iBAAiB8J,YAAYS,eAAgBxoD,MAwBpE,QAAAK,MACE,OACEM,UAAW,EACXC,UAAW,EACX4B,kBAAmB,MiEpCvB,QAAAqD,IAAoD4iD,GAClD,MAAOA,IAAc,GAAI9iD,uBGgDD,6BAAF,KAAxB9oC,IAA4CA,EAA5C,KAAAD,KAAAC,IAAAC,EAAAF,KAAAE,IAAAD,EAAAF,IX5CA,QAAAksC,MACE,OAAQO,SAAUV,ILlBpB,QAAA9J,IAA8Cp8B,GAC5C,KAAM8f,OAAM,iDAAgD9f,EAA9D,OAeA,QAAAm5B,MACE,OAAO,ERvBT,QAAA9Y,MACE,MAAO,IAAIlD,IkI/Bb,QAAAiI,IAAgDH,GAC9C,MAAOnF,OAAM,kDAAkDmF,EAAjE,MAIA,QAAAuC,MACE,MAAO1H,OAAM,oFAIf,QAAAoF,MACE,MAAOpF,OAAM,oDAIf,QAAA+E,IAA6ClR,GAC3C,MAAOmM,OAASnM,EAAlB,qDjI0IA,QAAAgS,IAA+BjB,EACAe,GAC7B,GAAIygE,IAA8B,MAAO,OAIzC,OAHa,QAATxhE,GAAmBwhE,EAAUj0C,UAC5BxsB,GAAgBygE,EAAU16E,KAAK,IAE7B06E,EE5IT,QAAAp/D,IAAsDm/D,GACpD,MAAOA,IAAc,GAAIv/D,IlBC3B,QAAAjQ,MAME,MALe,UAAC/T,GAAyB,OACvCoU,KAAMpU,GAAWA,EAAQkX,YAAc,GAAK,KAAO,IACnD7C,MAAOrU,GAAWA,EAAQ/I,aAAe,GAAK,KAAO,kOgIlBzD,GAAI6pF,IAAgBrrF,OAAOguF,iBACpBC,uBAA2BzmE,QAAS,SAAU0jE,EAAGxvE,GAAKwvE,EAAE+C,UAAYvyE,IACvE,SAAUwvE,EAAGxvE,GAAK,IAAK,GAAIqwB,KAAKrwB,GAAOA,EAAE2D,eAAe0sB,KAAIm/C,EAAEn/C,GAAKrwB,EAAEqwB,KAQ9DmiD,GAAWluF,OAAOmuF,QAAU,SAAkB5iB,GACrD,IAAK,GAAI6iB,GAAGvlF,EAAI,EAAGwlF,EAAIr3E,UAAUhW,OAAQ6H,EAAIwlF,EAAGxlF,IAAK,CACjDulF,EAAIp3E,UAAUnO,EACd,KAAK,GAAIkjC,KAAKqiD,GAAOpuF,OAAOT,UAAU8f,eAAezZ,KAAKwoF,EAAGriD,KAAIw/B,EAAEx/B,GAAKqiD,EAAEriD,IAE9E,MAAOw/B,gCkB/BX,MAUA7lD,GAAAC,eAA0B,8BAC1BD,EAAAM,mBAA8B,8BAC9BN,EAAAI,mBAA8B,4BAC9BJ,EAAA4oE,YAAuB,8BAbvB5oE,iCAAA,MAmBAF,GAAAC,QAAmB,QACnBD,EAAAO,SAAoB,QACpBP,EAAAK,QAAmB,QArBnBL,KjBaa+oE,GAAyB,GAAIpwE,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASitE,kBA+BT,QAAFz9E,GAAkE2gF,GAAAhwF,KAAlEgwF,qBAAkEA,EAXlEhwF,KAAAiwF,sBAAiC,EAGjCjwF,KAAAkwF,mBAA8B,EAG9BlwF,KAAAyQ,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5ExQ,KAAAmwF,QAAsC,gBAAXnC,SAAuBA,OAASA,OAAS,KAG5DhuF,KAAKowF,sBAAwBpwF,KAAKiwF,uBACpCjwF,KAAKqwF,yBACLrwF,KAAKswF,uBACLtwF,KAAKiwF,sBAAuB,GAlDlC,MAuDU5gF,GAAVtO,UAAAqvF,6BACI,MAAOpwF,MAAKgwF,sBAAwBr/E,EAAAA,cAAgB3Q,KAAKuwF,cAInDlhF,EAAVtO,UAAAwvF,sBACI,MAAOvwF,MAAKmwF,UAAYnwF,KAAKmwF,QAAmB,WAAKnwF,KAAKmwF,QAAiB,UAGrE9gF,EAAVtO,UAAAsvF,kCACQrwF,KAAKyQ,YAAczQ,KAAKyQ,UAAU+/E,SACpCvzC,QAAQC,KACN,yHAME7tC,EAAVtO,UAAAuvF,gCACI,GAAItwF,KAAKyQ,WAAyC,kBAArBoqC,kBAAiC,CAC5D,GAAM41C,GAAczwF,KAAKyQ,UAAUmgC,cAAc,MAEjD6/C,GAAYjoF,UAAUG,IAAI,2BAC1B3I,KAAKyQ,UAAUigF,KAAK5/C,YAAY2/C,EAEhC,IAAME,GAAgB91C,iBAAiB41C,EAKnCE,IAA2C,SAA1BA,EAAc3/B,SACjC/T,QAAQC,KACN,sLAMJl9C,KAAKyQ,UAAUigF,KAAKtiC,YAAYqiC,KAKpCphF,EAAFtO,UAAA6vF,wBAAE,YACM5wF,KAAKkwF,mBAAsBlwF,KAAKmwF,UAIhCnwF,KAAKowF,sBAAwBpwF,KAAKmwF,QAAgB,QACpDlzC,QAAQC,KACN,wFAEJl9C,KAAKkwF,mBAAoB,mBA9E7BhrF,KAACgK,EAAAA,SAAD9J,OACE+J,SAAU0hF,EAAAA,YACVphF,SAAUohF,EAAAA,oDAeZ3rF,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B6J,EAAAA,OAA3B3J,MAAkC2qF,SA9ClC1gF,KOYayhF,GAAkB,GAAInxE,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS4tE,IAcEsD,IAA4Bl+E,QAASi+E,GAAiBh+E,YAAa66E,EAAAA,WAGhFh8B,GAAA,wBAMA3xD,KAAAgxF,eAA6B,GAAInlF,GAAAA,QArCjC,MAoCErK,QAAFC,eAAMkwD,EAAN5wD,UAAA,qBAAE,WAAwC,MAAOf,MAAKgxF,gDAqLpDr/B,EAAF5wD,UAAAquD,YAAE,SAAY1tD,GACV,MAAa,OAATA,GAAiB1B,KAAKixD,eAAevvD,IAAU1B,KAAK2wD,QAAQjvD,GACvDA,EAEF1B,KAAKoY,WAOdu5C,EAAF5wD,UAAAkwF,UAAE,SAAUC,GACRlxF,KAAKkxF,OAASA,EACdlxF,KAAKgxF,eAAepkF,QAUtB+kD,EAAF5wD,UAAAs9D,YAAE,SAAYte,EAAUoxC,GACpB,MAAOnxF,MAAKo+D,QAAQre,GAAS//C,KAAKo+D,QAAQ+yB,IACtCnxF,KAAK2gE,SAAS5gB,GAAS//C,KAAK2gE,SAASwwB,IACrCnxF,KAAKwgE,QAAQzgB,GAAS//C,KAAKwgE,QAAQ2wB,IAUzCx/B,EAAF5wD,UAAA6vD,SAAE,SAAS7Q,EAAiBoxC,GACxB,GAAIpxC,GAASoxC,EAAQ,CACnB,GAAIC,GAAapxF,KAAK2wD,QAAQ5Q,GAC1BsxC,EAAcrxF,KAAK2wD,QAAQwgC,EAC/B,OAAIC,IAAcC,GACRrxF,KAAKq+D,YAAYte,EAAOoxC,GAE3BC,GAAcC,EAEvB,MAAOtxC,IAASoxC,GAWlBx/B,EAAF5wD,UAAA8+D,UAAE,SAAUtP,EAAS5sD,EAAgBD,GACjC,MAAIC,IAAO3D,KAAKq+D,YAAY9N,EAAM5sD,GAAO,EAChCA,EAELD,GAAO1D,KAAKq+D,YAAY9N,EAAM7sD,GAAO,EAChCA,EAEF6sD,GAxRXoB,KWwBaC,GAAmB,GAAIjyC,GAAAA,eAA+B,oBVV7D2xE,GAAmC,mBAARC,MAI3BC,IACJxhB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzByhB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFxhB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEkI,GAAqC,SAAA9tE,GAAK,MAAAqnF,QAAOrnF,EAAI,IAA/CsnF,GAAqB/D,EAAM,GAAjCzV,IAIMyZ,IACJ5hB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3EyhB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpDxhB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrC4hB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuBniD,GAAxE,GAAF/vC,GACIsH,EADJC,KAAApH,OAAAA,WAFAH,GAAAmyF,kBAA8B,EAI1B7qF,EAAJpG,UAAUkwF,UAAV7pF,KAAAvH,EAAoBkyF,GAGhBlyF,EAAKmyF,kBAAoBpiD,EAASI,QAClCnwC,EAAKoyF,WAAariD,EAASI,SAAWJ,EAASG,OAnFnD,MA4DuC3nC,GAAvC0pF,EAAA3qF,GA0BE2qF,EAAF/wF,UAAAq9D,QAAE,SAAQ7N,GACN,MAAOA,GAAK2hC,eAGdJ,EAAF/wF,UAAA4/D,SAAE,SAASpQ,GACP,MAAOA,GAAKoQ,YAGdmxB,EAAF/wF,UAAAy/D,QAAE,SAAQjQ,GACN,MAAOA,GAAKiQ,WAGdsxB,EAAF/wF,UAAA8vE,aAAE,SAAatgB,GACX,MAAOA,GAAK4hC,UAGdL,EAAF/wF,UAAAggE,cAAE,SAAc19D,GAAd,GAAFxD,GAAAG,IACI,IAAIsxF,GAAmB,CACrB,GAAMc,GAAM,GAAIb,MAAKc,eAAeryF,KAAKkxF,QAAS9wB,MAAO/8D,EAAOivF,SAAU,OAC1E,OAAO1E,GAAM,GAAI,SAAAvjF,GACb,MAAAxK,GAAK0yF,+BAA+B1yF,EAAK2yF,QAAQJ,EAAK,GAAIK,MAAK,KAAMpoF,EAAG,OAE9E,MAAOmnF,IAAoBnuF,IAG7ByuF,EAAF/wF,UAAAiwE,aAAE,WAAA,GAAFnxE,GAAAG,IACI,IAAIsxF,GAAmB,CACrB,GAAMoB,GAAM,GAAInB,MAAKc,eAAeryF,KAAKkxF,QAASyB,IAAK,UAAWL,SAAU,OAC5E,OAAO1E,GAAM,GAAI,SAAAvjF,GAAK,MAAAxK,GAAK0yF,+BACvB1yF,EAAK2yF,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGpoF,EAAI,OAE9C,MAAOsnF,KAGTG,EAAF/wF,UAAA8uE,kBAAE,SAAkBxsE,GAAlB,GAAFxD,GAAAG,IACI,IAAIsxF,GAAmB,CACrB,GAAMsB,GAAM,GAAIrB,MAAKc,eAAeryF,KAAKkxF,QAAS2B,QAASxvF,EAAOivF,SAAU,OAC5E,OAAO1E,GAAM,EAAG,SAAAvjF,GAAK,MAAAxK,GAAK0yF,+BACtB1yF,EAAK2yF,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGpoF,EAAI,OAE9C,MAAOunF,IAA0BvuF,IAGnCyuF,EAAF/wF,UAAA+9D,YAAE,SAAYvO,GACV,GAAI+gC,GAAmB,CACrB,GAAMwB,GAAM,GAAIvB,MAAKc,eAAeryF,KAAKkxF,QAAStyB,KAAM,UAAW0zB,SAAU,OAC7E,OAAOtyF,MAAKuyF,+BAA+BvyF,KAAKwyF,QAAQM,EAAKviC,IAE/D,MAAOmhC,QAAO1xF,KAAKo+D,QAAQ7N,KAG7BuhC,EAAF/wF,UAAA4uE,kBAAE,WAEE,MAAO,IAGTmiB,EAAF/wF,UAAAw/D,kBAAE,SAAkBhQ,GAChB,MAAOvwD,MAAKwgE,QAAQxgE,KAAK+yF,wBACrB/yF,KAAKo+D,QAAQ7N,GAAOvwD,KAAK2gE,SAASpQ,GAAQ,EAAG,KAGnDuhC,EAAF/wF,UAAAiyF,MAAE,SAAMziC,GACJ,MAAOvwD,MAAK++D,WAAW/+D,KAAKo+D,QAAQ7N,GAAOvwD,KAAK2gE,SAASpQ,GAAOvwD,KAAKwgE,QAAQjQ,KAG/EuhC,EAAF/wF,UAAAg+D,WAAE,SAAWH,EAAcwB,EAAe7P,GAGtC,GAAI6P,EAAQ,GAAKA,EAAQ,GACvB,KAAMj3C,OAAM,wBAAwBi3C,EAA1C,6CAGI,IAAI7P,EAAO,EACT,KAAMpnC,OAAM,iBAAiBonC,EAAnC,oCAGI,IAAI9R,GAASz+C,KAAK+yF,wBAAwBn0B,EAAMwB,EAAO7P,EAEvD,IAAI9R,EAAOkiB,YAAcP,EACvB,KAAMj3C,OAAM,iBAAiBonC,EAAnC,2BAAkE6P,EAAlE,KAGI,OAAO3hB,IAGTqzC,EAAF/wF,UAAA4+D,MAAE,WACE,MAAO,IAAI8yB,OAGbX,EAAF/wF,UAAAyvD,MAAE,SAAM9uD,GAGJ,MAAoB,gBAATA,GACF,GAAI+wF,MAAK/wF,GAEXA,EAAQ,GAAI+wF,MAAKA,KAAKjiC,MAAM9uD,IAAU,MAG/CowF,EAAF/wF,UAAAgwD,OAAE,SAAOR,EAAY0iC,GACjB,IAAKjzF,KAAK2wD,QAAQJ,GAChB,KAAMpnC,OAAM,iDAGd,IAAImoE,GAAmB,CAGjBtxF,KAAKiyF,aAAe1hC,EAAK2hC,cAAgB,GAAK3hC,EAAK2hC,cAAgB,QACrE3hC,EAAOvwD,KAAKgzF,MAAMziC,GAClBA,EAAK2iC,YAAYzvF,KAAKC,IAAI,EAAGD,KAAKE,IAAI,KAAM4sD,EAAK2hC,kBAGnDe,EAANpoE,MAA0BooE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAIvB,MAAKc,eAAeryF,KAAKkxF,OAAQ+B,EACjD,OAAOjzF,MAAKuyF,+BAA+BvyF,KAAKwyF,QAAQM,EAAKviC,IAE/D,MAAOvwD,MAAKuyF,+BAA+BhiC,EAAK4iC,iBAGlDrB,EAAF/wF,UAAAi9D,iBAAE,SAAiBzN,EAAY6iC,GAC3B,MAAOpzF,MAAK0gE,kBAAkBnQ,EAAc,GAAR6iC,IAGtCtB,EAAF/wF,UAAA2/D,kBAAE,SAAkBnQ,EAAY8iC,GAC5B,GAAIC,GAAUtzF,KAAK+yF,wBACf/yF,KAAKo+D,QAAQ7N,GAAOvwD,KAAK2gE,SAASpQ,GAAQ8iC,EAAQrzF,KAAKwgE,QAAQjQ,GAUnE,OAJIvwD,MAAK2gE,SAAS2yB,MAActzF,KAAK2gE,SAASpQ,GAAQ8iC,GAAU,GAAK,IAAM,KACzEC,EAAUtzF,KAAK+yF,wBAAwB/yF,KAAKo+D,QAAQk1B,GAAUtzF,KAAK2gE,SAAS2yB,GAAU,IAGjFA,GAGTxB,EAAF/wF,UAAAu+D,gBAAE,SAAgB/O,EAAYgjC,GAC1B,MAAOvzF,MAAK+yF,wBACR/yF,KAAKo+D,QAAQ7N,GAAOvwD,KAAK2gE,SAASpQ,GAAOvwD,KAAKwgE,QAAQjQ,GAAQgjC,IAGpEzB,EAAF/wF,UAAAyyF,UAAE,SAAUjjC,GACR,OACEA,EAAKkjC,iBACLzzF,KAAK0zF,QAAQnjC,EAAKojC,cAAgB,GAClC3zF,KAAK0zF,QAAQnjC,EAAKqjC,eAClBr4C,KAAK,MAQTu2C,EAAF/wF,UAAAquD,YAAE,SAAY1tD,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAImwF,GAAegC,KAAKnyF,GAAQ,CAC9B,GAAI6uD,GAAO,GAAIkiC,MAAK/wF,EACpB,IAAI1B,KAAK2wD,QAAQJ,GACf,MAAOA,IAIb,MAAOppD,GAAXpG,UAAiBquD,YAAjBhoD,KAAApH,KAA6B0B,IAG3BowF,EAAF/wF,UAAAkwD,eAAE,SAAehyC,GACb,MAAOA,aAAewzE,OAGxBX,EAAF/wF,UAAA4vD,QAAE,SAAQJ,GACN,OAAQujC,MAAMvjC,EAAKwjC,YAGrBjC,EAAF/wF,UAAAqX,QAAE,WACE,MAAO,IAAIq6E,MAAKuB,MAIVlC,EAAV/wF,UAAAgyF,wBAAA,SAAkCn0B,EAAcwB,EAAe7P,GAC3D,GAAM9R,GAAS,GAAIg0C,MAAK7zB,EAAMwB,EAAO7P,EAOrC,OAHIqO,IAAQ,GAAKA,EAAO,KACtBngB,EAAOy0C,YAAYlzF,KAAKo+D,QAAQ3f,GAAU,MAErCA,GAQDqzC,EAAV/wF,UAAA2yF,QAAA,SAAkB7D,GACd,OAAQ,KAAOA,GAAG9+E,OAAO,IAUnB+gF,EAAV/wF,UAAAwxF,+BAAA,SAAyCznC,GACrC,MAAOA,GAAI5Z,QAAQ,kBAAmB,KAchC4gD,EAAV/wF,UAAAyxF,QAAA,SAAkBM,EAA0BviC,GACxC,GAAMm8B,GAAI,GAAI+F,MAAKA,KAAKwB,IACpB1jC,EAAK2hC,cAAe3hC,EAAKoQ,WAAYpQ,EAAKiQ,UAAWjQ,EAAK2jC,WAC1D3jC,EAAK4jC,aAAc5jC,EAAK6jC,aAAc7jC,EAAK8jC,mBAC/C,OAAOvB,GAAI/hC,OAAO27B,mBAnQtBxnF,KAACioB,EAAAA,iDAkBDjoB,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B6J,EAAAA,OAA3B3J,MAAkC0rF,QArElC5rF,KAAQ2J,EAAAA,YARRijF,GA4DuCngC,IWjD1B2iC,IACX9jC,OACEb,UAAW,MAEbqB,SACErB,WAAYiP,KAAM,UAAWwB,MAAO,UAAWuyB,IAAK,WACpD3wB,gBAAiBpD,KAAM,UAAWwB,MAAO,SACzC+Q,eAAgBvS,KAAM,UAAWwB,MAAO,OAAQuyB,IAAK,WACrDxxB,oBAAqBvC,KAAM,UAAWwB,MAAO,sCCnBjD,sBAqBAl7D,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUslB,EAAAA,gBACV7hB,YACGC,QAAS8+C,GAAaltC,SAAUqtE,SAxBrCyC,KAgCApc,GAAoDmc,+BAhCpD,sBA8BApvF,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUolF,IACV3hF,YAAaC,QAAS++C,GAAkBwmB,SAA1CD,SAhCAqc,iCCAA,MAcEC,GAAF1zF,UAAAgX,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ08E,OAAUz8E,GAAQA,EAAK08E,4BAH5EzvF,KAACioB,EAAAA,aAZDsnE,iCAAA,MAsBEn8E,GAAFvX,UAAAgX,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQ48E,SAAY38E,GAAQA,EAAK08E,4BAH9EzvF,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY,8GApBzBtH,KCuBau8E,GAAqB,GAAIl1E,GAAAA,eAA8B,qCAiBlE,QAAF+E,GACoDowE,EACpCC,GAFd,GAAFl1F,GAGIsH,EAHJC,KAAApH,OAAAA,WACoDH,GAApDi1F,eAAoDA,EAbpDj1F,EAAAm1F,QAAoD,mBAAXhH,QAAyB,OAAgBiH,OAAS,KAG3Fp1F,EAAAq1F,OAAqBr1F,EAAKm1F,SACtB,YACA,QACA,aACA,WACA,aACA,gBAOID,GACFA,EAAanE,4BA7CnB,MA2BmCxoF,GAAnCsc,EAAAvd,GAmCEud,EAAF3jB,UAAAo0F,YAAE,SAAYppF,GACV,GAAMqpF,GAAK,GAAIp1F,MAAKg1F,QAAQjpF,EAAS/L,KAAK80F,oBAAkBhmF,IAGtDumF,EAAM,GAAIr1F,MAAKg1F,QAAQM,IACvBC,EAAQ,GAAIv1F,MAAKg1F,QAAQQ,MACzBC,EAAQ,GAAIz1F,MAAKg1F,QAAQU,MAKzBC,EAAQ31F,KAAK41F,kBAAkBP,GAAMvrF,MAAO,QAAS+rF,UAAW,GAAIN,GACpEO,EAAY91F,KAAK41F,kBAAkBH,GAAQ3rF,MAAO,YAAaisF,KAAM,KAQ3E,OALAV,GAAIW,cAAcT,GAGlBH,EAAGzsF,KAAK4sF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMpxE,EAAV3jB,UAAA60F,kBAAA,SAA4B7I,EAAkB9zC,GAA9C,IAA4D,GAA5Dg9C,MAAA1tC,EAAA,EAA4DA,EAA5D/vC,UAAAhW,OAA4D+lD,IAAA0tC,EAA5D1tC,EAAA,GAAA/vC,UAAA+vC,EACI,IAAI2tC,GAAa,GAAKnJ,GAAoC,YAAE9zC,EAK5D,OAHAg9C,GAAaphF,KAAKk4E,GAClBkJ,EAAa7sF,QAAQ,SAAAi9C,GAAQ,MAAA6vC,GAAWF,cAAc3vC,KAE/C6vC,kBAlEXhxF,KAACioB,EAAAA,iDAeDjoB,SAAA4J,GAAAzI,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiB6J,EAAAA,OAAjB3J,MAAwByvF,QA/BxB3vF,KAAQmK,GAARhJ,aAAAnB,KAgCKoB,EAAAA,cA1CLoe,GA2BmCyxE,EAAAA,iDC3BnC,sBAsBAjxF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,wBACVU,MAAOC,MAAS,gBAxBlBowF,KAgCA1uC,GAAA,WACE,QAAFA,GAAsBC,EAAoCx1B,GAAxD,GAAFtyB,GAAAG,IAAsBA,MAAtB2nD,OAAsBA,EAAoC3nD,KAA1DmyB,SAA0DA,EACtDnyB,KAAKq2F,cAAcr2F,KAAK2nD,OAAOnlD,QAE/BxC,KAAK2nD,OAAOj+C,QAAQ7I,UAAU,WAC5BhB,EAAKw2F,cAAcx2F,EAAK8nD,OAAOnlD,UArCrC,MAyCUklD,GAAV3mD,UAAAs1F,cAAA,SAAwBC,GACpBt2F,KAAKu2F,gBACS,IAAVD,GAAyB,IAAVA,EACjBt2F,KAAKw2F,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjBt2F,KAAKw2F,UAAU,kBAAkB,IAI7B9uC,EAAV3mD,UAAAw1F,yBACIv2F,KAAKw2F,UAAU,cAAc,GAC7Bx2F,KAAKw2F,UAAU,cAAc,GAC7Bx2F,KAAKw2F,UAAU,kBAAkB,IAG3B9uC,EAAV3mD,UAAAy1F,UAAA,SAAoBrwC,EAAmBswC,GAC/BA,EACFz2F,KAAKmyB,SAASvvB,cAAc4F,UAAUG,IAAIw9C,GAE1CnmD,KAAKmyB,SAASvvB,cAAc4F,UAAUC,OAAO09C,IA5DnDuB,iCAAA,sBAkEAxiD,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,IACVI,SAAU2mF,GAAS/mF,IACnBQ,cAAeumF,QArEjB9yC,iKCkBA,IAAAozC,IAAA,WAKE,QAAFA,GACYC,EACD5qF,EACAwe,GAFCvqB,KAAZ22F,UAAYA,EACD32F,KAAX+L,QAAWA,EACA/L,KAAXuqB,OAAWA,EALXvqB,KAAAmX,MAAuBy/E,GAAYC,OArBnC,MA8BEH,GAAF31F,UAAAg2B,QAAE,WACE/2B,KAAK22F,UAAUG,cAAc92F,OA/BjC02F,KfoDaK,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjC5jB,GAAA,WA+BE,QAAFA,GAAsB6jB,EACAzrF,EACR3G,EACA6qC,GAHZ,GAAF/vC,GAAAG,IAAsBA,MAAtBm3F,QAAsBA,EACAn3F,KAAtB0L,QAAsBA,EAxBtB1L,KAAAo3F,gBAA2B,EAG3Bp3F,KAAAq3F,eAA2B,GAAIxpE,KAG/B7tB,KAAAs3F,eAA2B,GAAInmD,KAS/BnxC,KAAAu3F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA0JvEz3F,KAAA03F,YAAwB,SAAC5tF,GACrB,GAAM6tF,GAAmB93F,EAAK+3F,sBAC1BnF,KAAKoF,MAAQh4F,EAAK+3F,qBAAuBV,EAExCr3F,GAAKs3F,QAAQW,gBAAmBH,IACnC93F,EAAKu3F,gBAAiB,EACtBv3F,EAAKk4F,aAAajuF,EAAM8xB,QAAS9xB,EAAMgyB,QAASj8B,EAAKs3F,QAAQxpF,gBAKnE3N,KAAAg4F,aAAyB,SAACluF,GACjBjK,EAAKs3F,QAAQW,iBAIhBj4F,EAAK+3F,qBAAuBnF,KAAKoF,MACjCh4F,EAAKu3F,gBAAiB,EAEtBv3F,EAAKk4F,aACDjuF,EAAMmuF,QAAQ,GAAGr8D,QAAS9xB,EAAMmuF,QAAQ,GAAGn8D,QAASj8B,EAAKs3F,QAAQxpF,gBAK3E3N,KAAAk4F,YAAwB,WACfr4F,EAAKu3F,iBAIVv3F,EAAKu3F,gBAAiB,EAGtBv3F,EAAKy3F,eAAeluF,QAAQ,SAAA8oE,GAG1B,GAAMhpC,GAAYgpC,EAAO/6D,QAAUy/E,GAAYuB,SAC7CjmB,EAAO3nD,OAAO3c,sBAAwBskE,EAAO/6D,QAAUy/E,GAAYwB,WAEhElmB,EAAO3nD,OAAO2M,YAAcgS,GAC/BgpC,EAAOn7C,cApLP6Y,EAASh/B,YACX5Q,KAAKq4F,kBAAoBtzF,EAAWnC,cAGpC5C,KAAKq3F,eAAe3oE,IAAI,YAAa1uB,KAAK03F,aAC1C13F,KAAKq3F,eAAe3oE,IAAI,UAAW1uB,KAAKk4F,aACxCl4F,KAAKq3F,eAAe3oE,IAAI,aAAc1uB,KAAKk4F,aAE3Cl4F,KAAKq3F,eAAe3oE,IAAI,aAAc1uB,KAAKg4F,cAC3Ch4F,KAAKq3F,eAAe3oE,IAAI,WAAY1uB,KAAKk4F,cApH/C,MA8HE5kB,GAAFvyE,UAAAg3F,aAAE,SAAap8D,EAAWE,EAAWtR,GAAnC,GAAF1qB,GAAAG,SAAA,KAAAuqB,IAAqCA,KACjC,IAAM+tE,GAAgBt4F,KAAKu4F,eACLv4F,KAAKu4F,gBAAkBv4F,KAAKq4F,kBAAkBx6D,wBAC9D26D,EAAV3tE,MAAgCksE,GAAiCxsE,EAAOxc,UAEhEwc,GAAOkuE,WACT98D,EAAI28D,EAAcn4E,KAAOm4E,EAAcl4E,MAAQ,EAC/Cyb,EAAIy8D,EAActrE,IAAMsrE,EAAc3tF,OAAS,EAGjD,IAAM+tF,GAASnuE,EAAOmuE,QAAUxK,EAAyBvyD,EAAGE,EAAGy8D,GACzDl+C,EAAUze,EAAI28D,EAAcn4E,KAC5B01B,EAAUha,EAAIy8D,EAActrE,IAC5BlH,EAAW0yE,EAAgBxB,eAAiBzsE,EAAO1c,aAAe,GAElEqkE,EAAS1hE,SAASogC,cAAc,MACtCshC,GAAO1pE,UAAUG,IAAI,sBAErBupE,EAAO7uE,MAAM8c,KAAUi6B,EAAUs+C,EAArC,KACIxmB,EAAO7uE,MAAM2pB,IAAS6oB,EAAU6iD,EAApC,KACIxmB,EAAO7uE,MAAMsH,OAAqB,EAAT+tF,EAA7B,KACIxmB,EAAO7uE,MAAM+c,MAAoB,EAATs4E,EAA5B,KAGIxmB,EAAO7uE,MAAMqF,gBAAkB6hB,EAAOkyB,OAAS,KAC/Cy1B,EAAO7uE,MAAMs1F,mBAAwB7yE,EAAzC,KAEI9lB,KAAKq4F,kBAAkBvnD,YAAYohC,GAInC6b,EAA0B7b,GAE1BA,EAAO7uE,MAAMC,UAAY,UAGzB,IAAMs1F,GAAY,GAAIlC,IAAU12F,KAAMkyE,EAAQ3nD,EA2B9C,OAzBAquE,GAAUzhF,MAAQy/E,GAAYwB,UAG9Bp4F,KAAKs3F,eAAe3uF,IAAIiwF,GAEnBruE,EAAO2M,aACVl3B,KAAK64F,2BAA6BD,GAKpC54F,KAAK84F,sBAAsB,WACzB,GAAMC,GAA8BH,IAAc/4F,EAAKg5F,0BAEvDD,GAAUzhF,MAAQy/E,GAAYuB,QAMzB5tE,EAAO2M,YAAgB6hE,GAAgCl5F,EAAKu3F,gBAC/DwB,EAAU7hE,WAEXjR,GAEI8yE,GAITtlB,EAAFvyE,UAAA+1F,cAAE,SAAc8B,GACZ,GAAMI,GAAYh5F,KAAKs3F,eAAe1oE,OAAOgqE,EAY7C,IAVIA,IAAc54F,KAAK64F,6BACrB74F,KAAK64F,2BAA6B,MAI/B74F,KAAKs3F,eAAen6D,OACvBn9B,KAAKu4F,eAAiB,MAInBS,EAAL,CAIA,GAAMC,GAAWL,EAAU7sF,QACrBysF,EAAV3tE,MAAgCksE,GAAiC6B,EAAUruE,OAAOxc,UAE9EkrF,GAAS51F,MAAMs1F,mBAAwBH,EAAgBvB,aAA3D,KACIgC,EAAS51F,MAAM0jB,QAAU,IACzB6xE,EAAUzhF,MAAQy/E,GAAYsC,WAG9Bl5F,KAAK84F,sBAAsB,WACzBF,EAAUzhF,MAAQy/E,GAAYC,OAC9BoC,EAAmB,WAAE7qC,YAAY6qC,IAChCT,EAAgBvB,gBAIrB3jB,EAAFvyE,UAAAo4F,WAAE,WACEn5F,KAAKs3F,eAAeluF,QAAQ,SAAA8oE,GAAU,MAAAA,GAAOn7C,aAI/Cu8C,EAAFvyE,UAAAyM,mBAAE,SAAmBzB,GAAnB,GAAFlM,GAAAG,IACS+L,IAAWA,IAAY/L,KAAKo5F,kBAKjCp5F,KAAK4zE,uBAEL5zE,KAAK0L,QAAQO,kBAAkB,WAC7BpM,EAAKw3F,eAAejuF,QAAQ,SAACotB,EAAItxB,GAC7B,MAAA6G,GAAQk8B,iBAAiB/iC,EAAMsxB,EAAI32B,EAAK03F,mBAG9Cv3F,KAAKo5F,gBAAkBrtF,IAkDjBunE,EAAVvyE,UAAA+3F,sBAAA,SAAgCtiE,EAAcqS,OAA9C,KAAAA,IAA8CA,EAA9C,GACI7oC,KAAK0L,QAAQO,kBAAkB,WAAM,MAAA8Z,YAAWyQ,EAAIqS,MAItDyqC,EAAFvyE,UAAA6yE,qBAAE,WAAA,GAAF/zE,GAAAG,IACQA,MAAKo5F,iBACPp5F,KAAKq3F,eAAejuF,QAAQ,SAACotB,EAAItxB,GAC/BrF,EAAoB,gBAAE8oC,oBAAoBzjC,EAAMsxB,EAAI32B,EAAK03F,kBA7SjEjkB,KgBuDatkE,GACT,GAAI2Q,GAAAA,eAAoC,2CA+E1C,QAAFgZ,GAAsBj0B,EACR+nE,EACA78B,EAC+CliC,EACI0nB,GAJ3Cp1B,KAAtB0E,YAAsBA,EAI2C1E,KAAjEo1B,eAAiEA,EAtDjEp1B,KAAA04F,OAA6C,EAS7C14F,KAAA6N,YAAuD,EAkBvD7N,KAAAsgC,WAA+B,EAqB/BtgC,KAAAogC,gBAAoC,EAQhCpgC,KAAKq5F,eAAiB3rF,MACtB1N,KAAKs5F,gBAAkB,GAAIhmB,IAAetzE,KAAMysE,EAAQ/nE,EAAakrC,GA9IzE,MA2GApuC,QAAAC,eAAMk3B,EAAN53B,UAAA,gBAAA,WAAmB,MAAOf,MAAKsgC,eAC7B,SAAa5+B,GACX1B,KAAKsgC,UAAY5+B,EACjB1B,KAAKu5F,gEAST/3F,OAAAC,eAAMk3B,EAAN53B,UAAA,eAAA,WAAkB,MAAOf,MAAKw5F,UAAYx5F,KAAK0E,YAAY9B,mBACzD,SAAYsU,GACVlX,KAAKw5F,SAAWtiF,EAChBlX,KAAKu5F,gEAuBP5gE,EAAF53B,UAAA+f,SAAE,WACE9gB,KAAKogC,gBAAiB,EACtBpgC,KAAKu5F,gCAGP5gE,EAAF53B,UAAAC,YAAE,WACEhB,KAAKs5F,gBAAgB1lB,wBAIvBj7C,EAAF53B,UAAAo4F,WAAE,WACEn5F,KAAKs5F,gBAAgBH,cAIvB33F,OAAFC,eAAMk3B,EAAN53B,UAAA,oBAAE,WACE,OACE03F,SAAUz4F,KAAKy4F,SACfC,OAAQ14F,KAAK04F,OACbj8C,MAAOz8C,KAAKy8C,MACZ1uC,UAAmC,mBAAxB/N,KAAKo1B,gBACX4hE,cAAe,EAAGC,aAAc,GAA3CpsE,MACc7qB,KAAKq5F,eAAetrF,UAAc/N,KAAK+N,WAC/CH,qBAAsB5N,KAAKq5F,eAAezrF,qBAC1CC,YAAa7N,KAAK6N,aAAe7N,KAAKq5F,eAAevrF,iBAAmB,qCAK5EtM,OAAFC,eAAMk3B,EAAN53B,UAAA,sBAAE,WACE,MAAOf,MAAKoC,YAAcpC,KAAKq5F,eAAej3F,0CAIxCu2B,EAAV53B,UAAAw4F,yCACSv5F,KAAKoC,UAAYpC,KAAKogC,gBACzBpgC,KAAKs5F,gBAAgB9rF,mBAAmBxN,KAAKkX,UAmBjDyhB,EAAF53B,UAAAk2B,OAAE,SAAOwiE,EAAkC59D,EAAetR,GACtD,WADJ,KAAAsR,IAA2CA,EAA3C,GAC6B,gBAAd49D,GACFz5F,KAAKs5F,gBAAgBvB,aAAa0B,EAAW59D,EAA1DhR,MAAiE7qB,KAAK2N,aAAiB4c,IAE1EvqB,KAAKs5F,gBAAgBvB,aAAa,EAAG,EAAlDltE,MAAyD7qB,KAAK2N,aAAiB8rF,oBAlJ/Ev0F,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,4BACV8F,SAAU,YACVpF,MACEC,MAAS,aACT0zF,+BAAgC,qDApDpCx0F,KAAE6N,EAAAA,aAIF7N,KAAE8H,EAAAA,SAPF9H,KAAQ2J,EAAAA,WAkIR3J,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B6J,EAAAA,OAA3B3J,MAAkC4J,QAClC9J,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B6J,EAAAA,OAA3B3J,MAAkC2e,EAAAA,8CAtElC04B,QAAAv3C,KAAGuB,EAAAA,MAAHrB,MAAS,oBAGTu0F,YAAAz0F,KAAGuB,EAAAA,MAAHrB,MAAS,wBAMTqzF,WAAAvzF,KAAGuB,EAAAA,MAAHrB,MAAS,uBAOTszF,SAAAxzF,KAAGuB,EAAAA,MAAHrB,MAAS,qBASTyI,cAAA3I,KAAGuB,EAAAA,MAAHrB,MAAS,0BAMT2I,YAAA7I,KAAGuB,EAAAA,MAAHrB,MAAS,wBAMThD,WAAA8C,KAAGuB,EAAAA,MAAHrB,MAAS,uBAYT8R,UAAAhS,KAAGuB,EAAAA,MAAHrB,MAAS,uBAtHTuzB,iCCAA,sBAiBAzzB,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,GAAiBolB,EAAAA,gBAC3BhlB,SAAUkpB,GAAWtpB,IACrBQ,cAAe8oB,QApBjBppB,mBC2DE,QAAFqqF,GAAgExkE,GAAAp1B,KAAhEo1B,eAAgEA,EALhEp1B,KAAAmX,MAA2C,YAG3CnX,KAAAoC,UAA+B,EAA/B,sBApBA8C,KAACC,EAAAA,UAADC,OAAAK,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACET,SAAF,sBACEE,QAAF,29BACED,SAAU,GACVS,MACFC,MAAA,sBACM6zF,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACIvhE,kCAAJ,4KAYAohE,EAAArzF,kEAFAqzF,iCCzDA,sBAYA10F,KAACgK,EAAAA,SAAD9J,OACEqK,SAAUmqF,IACV/pF,cAAe+pF,QAdjBr2C,KCaAy2C,GAAA,yBAbA,MAAAA,MAcaC,GAAwB5sF,EAAc2sF,IAG/CE,GAA2B,kFA2B/Br6F,GAAAs6F,SAAqB,sBAAsBD,OAH3C,MAFiC9xF,GAAjCu6C,EAAAx7C,kBAjBAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACE8F,SAAU,cACV7F,SAAU,mIACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,YACED,QAAF,ojBACEQ,MACFC,MAAA,eACMuM,KAAN,QACI6nF,gCAAJ,WACI5rF,uBAAJ,sBACIizC,yBAAJ,0DAOAkB,O5CRI62B,GAAmB,EAGvBgF,GAAA,WACE,QAAFA,GAEWxpD,EAEA0oB,sBAFA19C,KAAXg1B,OAAWA,EAEAh1B,KAAX09C,YAAWA,EAzCX,MAAA8gC,MAyDap8B,GACT,GAAIziC,GAAAA,eAAyC,6CA8D/C,QAAF+iC,GACYvwB,EACAhxB,EACiDwkF,EACpC9uC,GAHb72C,KAAZmyB,SAAYA,EACAnyB,KAAZmB,mBAAYA,EACiDnB,KAA7D2lF,QAA6DA,EACpC3lF,KAAzB62C,MAAyBA,EArCzB72C,KAAAmgC,WAAsB,EACtBngC,KAAA4lF,SAAoB,EACpB5lF,KAAAsgC,WAAsB,EACtBtgC,KAAA85C,IAAgB,cAAc0/B,KAC9Bx5E,KAAAimF,qBAAiC,GAwBjCjmF,KAAAm5C,kBAAyC,GAAIpxC,GAAAA,aAG7C/H,KAAA8tB,cAA2B,GAAIjiB,GAAAA,QAH/B,MArBErK,QAAFC,eAAMihD,EAAN3hD,UAAA,gBAAE,WAAiB,MAAOf,MAAK2lF,SAAW3lF,KAAK2lF,QAAQ3rC,0CAGrDx4C,OAAFC,eAAMihD,EAAN3hD,UAAA,UAAE,WAAmB,MAAOf,MAAK85C,qCAG/Bt4C,OAAFC,eAAMihD,EAAN3hD,UAAA,gBAAE,WAA0B,MAAOf,MAAKmgC,2CAOxC3+B,OAAAC,eAAMihD,EAAN3hD,UAAA,gBAAA,WAAmB,MAAQf,MAAK62C,OAAS72C,KAAK62C,MAAMz0C,UAAapC,KAAKsgC,eACpE,SAAa5+B,GAAc1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,oCAGlEF,OAAFC,eAAMihD,EAAN3hD,UAAA,qBAAE;eAAsB,MAAOf,MAAK2lF,SAAW3lF,KAAK2lF,QAAQ9jD,+CAqB1DrgC,OAAFC,eAAMihD,EAAN3hD,UAAA,cAAE,WACE,MAAOf,MAAK4lF,yCAOdpkF,OAAFC,eAAMihD,EAAN3hD,UAAA,iBAAE,WAEE,OAAQf,KAAK0yB,kBAAkBnhB,aAAe,IAAIC,wCAIpDkxC,EAAF3hD,UAAAw5C,OAAE,WACOv6C,KAAKmgC,YACRngC,KAAKmgC,WAAY,EACjBngC,KAAKmB,mBAAmBC,eACxBpB,KAAK6lF,8BAKTnjC,EAAF3hD,UAAA05C,SAAE,WACMz6C,KAAKmgC,YACPngC,KAAKmgC,WAAY,EACjBngC,KAAKmB,mBAAmBC,eACxBpB,KAAK6lF,8BAKTnjC,EAAF3hD,UAAA0B,MAAE,WACE,GAAMsJ,GAAU/L,KAAK0yB,iBAEQ,mBAAlB3mB,GAAQtJ,OACjBsJ,EAAQtJ,SASZigD,EAAF3hD,UAAA+kF,gBAAE,WACO9lF,KAAK4lF,UACR5lF,KAAK4lF,SAAU,EACf5lF,KAAKmB,mBAAmBC,iBAS5BshD,EAAF3hD,UAAAglF,kBAAE,WACM/lF,KAAK4lF,UACP5lF,KAAK4lF,SAAU,EACf5lF,KAAKmB,mBAAmBC,iBAK5BshD,EAAF3hD,UAAAkkD,SAAE,WACE,MAAOjlD,MAAKq7C,WAIdqH,EAAF3hD,UAAAuiB,eAAE,SAAexZ,GACTA,EAAMyZ,UAAYK,EAAAA,OAAS9Z,EAAMyZ,UAAYM,EAAAA,QAC/C7jB,KAAKi8C,wBAGLnyC,EAAMsE,mBAQVs0C,EAAF3hD,UAAAk7C,sBAAE,WACOj8C,KAAKoC,WACRpC,KAAKmgC,WAAYngC,KAAKg6C,WAAYh6C,KAAKmgC,UACvCngC,KAAKmB,mBAAmBC,eACxBpB,KAAK6lF,2BAA0B,KAKnCnjC,EAAF3hD,UAAAmK,aAAE,WACE,MAAOlL,MAAKoC,SAAW,KAAO,KAIhCsgD,EAAF3hD,UAAA2xB,gBAAE,WACE,MAAO1yB,MAAKmyB,SAASvvB,eAGvB8/C,EAAF3hD,UAAAilF,mBAAE,WAME,GAAIhmF,KAAKmgC,UAAW,CAClB,GAAMkb,GAAYr7C,KAAKq7C,SAEnBA,KAAcr7C,KAAKimF,uBACrBjmF,KAAKimF,qBAAuB5qC,EAC5Br7C,KAAK8tB,cAAclhB,UAKzB81C,EAAF3hD,UAAAC,YAAE,WACEhB,KAAK8tB,cAAcjhB,YAIb61C,EAAV3hD,UAAA8kF,0BAAA,SAAoCnoC,OAApC,KAAAA,IAAoCA,GAApC,GACI19C,KAAKm5C,kBAAkBp3C,KAAK,GAAIy8E,IAAyBx+E,KAAM09C,oBAhMnEx4C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACE8F,SAAU,YACVpF,MACFwM,KAAA,SACMgvC,kBAAN,iBACI2kC,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtBhuD,OAAJ,KACI8vB,uBAAJ,sBACI15C,uBAAJ,sBACI63E,8BAAJ,WACIz3E,UAAJ,0BACIovB,YAAJ,yBACIh4B,MAAS,cAEbT,QAAA,m0CACAD,SAAA,qWACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAZ,SAAE4J,GAAFzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAg9C,QAFAl9C,KAAEy9C,GAAFt8C,aAAAnB,KAAAoB,EAAAA,cAcAo8C,EAAAn8C,iEA4EA4yC,oBAAAj0C,KAAAyB,EAAAA,UAYA+7C,iCCnHA,sBAgBAx9C,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUI,GAAiBH,EAAAA,aAAcm0C,IACzC9zC,SAAUizC,GAAWC,IACrB9yC,cAAe6yC,GAAWC,QAnB5Brc,KCWaggD,GACX,GAAI3mE,GAAAA,eAA6B,4BCD/B+U,GAAe,6BAanB10B,KAAAsuB,GAAwB,aAAaoG,KAxBrC,sBAeAxvB,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,YACVU,MACEC,MAAS,YACTuM,KAAQ,QACR2vB,YAAa,4BAIjB5T,KAAAppB,KAAGuB,EAAAA,SAxBH8/E,KCiBaC,IAIXC,mBAAoBvvE,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAAS9T,EAAAA,OAAQ0jB,QAAS,EAAGzjB,UAAW,oBAC9C+T,EAAAA,WAAW,iBACThU,EAAAA,OAAQ0jB,QAAS,EAAGzjB,UAAW,sBAC/BgU,EAAAA,QAAQ,+CCbd6qC,GAAA,yBAbA,MAAAA,MCWIztB,GAAe,6BAgBnB10B,KAAA66E,MAAoC,QAGpC76E,KAAAsuB,GAAwB,YAAYoG,KA9BpC,sBAeAxvB,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,WACVU,MACEC,MAAS,WACT0gF,oBAAqB,iBACrBxkD,YAAa,KAEbpO,eAAgB,8BAKpB+mD,QAAA31E,KAAGuB,EAAAA,QAGH6nB,KAAAppB,KAAGuB,EAAAA,SA9BHkgF,iCCAA,sBAYAzhF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,gBAbZuhF,iCCAA,sBAiBA1hF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,sBAlBZwhF,iCCAA,sBAYA3hF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,kBAbZyhF,iCCAA,sBAYA5hF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,kBAbZ0hF,KCuDIryD,GAAe,EASnBsyD,GAAA,WACE,QAAFA,GAAqBtiF,GAAA1E,KAArB0E,YAAqBA,EAjErB,MAAAsiF,MAwEaC,GAAyBjgF,EAAWggF,GAAkB,WAiBtDE,GACT,GAAIvnE,GAAAA,eAA2C,iDA8IjD,QAAF4iC,GACa79C,EACCvD,EACsCgmF,EAC1BlkF,EACwCskC,EAGpDh3B,EACA7E,EACmC0pB,GAV/C,GAAFv1B,GAWIsH,EAXJC,KAAApH,KAWU0E,IAXV1E,WACaH,GAAb6E,YAAaA,EACC7E,EAAdsB,mBAAcA,EAEYtB,EAA1BoD,KAA0BA,EACwCpD,EAAlE0nC,gBAAkEA,EAGpD1nC,EAAd0Q,UAAcA,EACA1Q,EAAd6L,QAAcA,EA9Ed7L,EAAAunF,oBAA+B,EAW/BvnF,EAAAwnF,yBAAqC,GASrCxnF,EAAAynF,WAAuB,GAGvBznF,EAAA0nF,aAAyB,YAAY7yD,KAyBrC70B,EAAA2nF,iBAAqB,EACrB3nF,EAAA4nF,iBAAqB,EACrB5nF,EAAA6nF,uBAA0B,EAgCtB7nF,EAAK8nF,cAAgBR,MACrBtnF,EAAKy/E,WAAaz/E,EAAK8nF,cAAcC,OAAS,OAC9C/nF,EAAKgoF,mBAAwC,mBAAnBzyD,IAxB9B,MAnFkChtB,GAAlCm6C,EAAAp7C,GAMA3F,OAAAC,eAAM8gD,EAANxhD,UAAA,6BACI,MAAOf,MAAK8nF,aAAe9nF,KAAKunC,iBAAmBvnC,KAAKunC,gBAAgBwgD,YAAc,cAExF,SAAermF,GACb1B,KAAK8nF,YAAcpmF,mCAMvBF,OAAAC,eAAM8gD,EAANxhD,UAAA,0BAAA,WAAsC,MAAOf,MAAKgoF,yBAChD,SAAuBtmF,GACrB1B,KAAKgoF,oBAAsB3/E,EAAAA,sBAAsB3G,oCAQnDF,OAAFC,eAAM8gD,EAANxhD,UAAA,0BAAE,WACE,MAA2B,WAApBf,KAAKs/E,aAA4Bt/E,KAAKonF,oDAI/C5lF,OAAFC,eAAM8gD,EAANxhD,UAAA,sBAAE,WAAgC,MAA2B,UAApBf,KAAKs/E,4CAO9C99E,OAAAC,eAAM8gD,EAANxhD,UAAA,iBAAA,WAA4B,MAAOf,MAAKsnF,gBACtC,SAAc5lF,GACZ1B,KAAKsnF,WAAa5lF,EAClB1B,KAAKioF,iDAgBTzmF,OAAAC,eAAM8gD,EAANxhD,UAAA,6BACI,MAA2B,WAApBf,KAAK+nF,YAAgD,UAArB/nF,KAAKk+E,YAA0B,OAASl+E,KAAKk+E,iBAEtF,SAAex8E,GACTA,IAAU1B,KAAKk+E,cACjBl+E,KAAKk+E,YAAcx8E,GAAS1B,KAAK2nF,cAAcC,OAAS,OACxD5nF,KAAKmB,mBAAmBC,iDAmD5BmhD,EAAFxhD,UAAAqvD,0BAAE,WACE,MAAOpwD,MAAKkoF,yBAA2BloF,KAAK0E,aAG9C69C,EAAFxhD,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKmoF,wBACDnoF,KAAKqgF,SAASvnC,aAChB94C,KAAK0E,YAAY9B,cAAc4F,UAC1BG,IAAI,uBAAuB3I,KAAKqgF,SAASvnC,aAIhD94C,KAAKqgF,SAAS5mC,aAAartC,KAAKqV,EAAAA,UAAS,OAAS5gB,UAAU,WAC1DhB,EAAKuoF,wBACLvoF,EAAKwoF,sBACLxoF,EAAKsB,mBAAmBC,gBAI1B,IAAMknF,GAAetoF,KAAKqgF,SAAS/oC,WAAat3C,KAAKqgF,SAAS/oC,UAAUgxC,cAAgB7gF,EAAAA,KACxF/G,GAAAA,MAAM4nF,EAActoF,KAAKuoF,gBAAgB7+E,QAAS1J,KAAKwoF,gBAAgB9+E,SAClE7I,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,iBAG7CpB,KAAKyoF,cAAc/+E,QAAQ0C,KAAKqV,EAAAA,UAAU,OAAO5gB,UAAU,WACzDhB,EAAKooF,gBACLpoF,EAAKsB,mBAAmBC,iBAI1BpB,KAAK0oF,eAAeh/E,QAAQ0C,KAAKqV,EAAAA,UAAU,OAAO5gB,UAAU,WAC1DhB,EAAKwoF,sBACLxoF,EAAKsB,mBAAmBC,kBAI5BmhD,EAAFxhD,UAAA6H,sBAAE,WAAA,GAAF/I,GAAAG,IACIA,MAAKmoF,wBAEAnoF,KAAK0nF,wBAEJ1nF,KAAK0L,QAIP1L,KAAK0L,QAAQO,kBAAkB,WAC7BhD,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK8oF,uBAGpC1/E,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK8oF,uBAKxCpmC,EAAFxhD,UAAA2P,gBAAE,WAEE1Q,KAAKqnF,yBAA2B,QAChCrnF,KAAKmB,mBAAmBynB,iBAI1B25B,EAAFxhD,UAAA6nF,eAAE,SAAeC,GACb,GAAMvxC,GAAYt3C,KAAKqgF,SAAWrgF,KAAKqgF,SAAS/oC,UAAY,IAC5D,OAAOA,IAAaA,EAAUuxC,IAGhCtmC,EAAFxhD,UAAA+nF,gBAAE,WACE,SAAU9oF,KAAKqgF,UAAYrgF,KAAKqgF,SAAS7gC,aAAex/C,KAAK+oF,oBAG/DxmC,EAAFxhD,UAAAioF,UAAE,WACE,QAAShpF,KAAKipF,aAGhB1mC,EAAFxhD,UAAAmoF,kBAAE,WACE,MAAOlpF,MAAKmpF,iBAAmBnpF,KAAKqgF,SAAS+I,kBAAoBppF,KAAKqpF,qBAGxE9mC,EAAFxhD,UAAAuoF,wBAAE,WAEE,MAA2B,WAApBtpF,KAAK+nF,aAA4B/nF,KAAKgpF,aACzChpF,KAAKgpF,cAAgBhpF,KAAKkpF,qBAGhC3mC,EAAFxhD,UAAAwoF,kBAAE,WAEE,MAAOvpF,MAAKgpF,aAAmC,WAApBhpF,KAAK+nF,YAA2B/nF,KAAK8oF,mBAIlEvmC,EAAFxhD,UAAAyoF,sBAAE,WACE,MAAQxpF,MAAK0oF,gBAAkB1oF,KAAK0oF,eAAelmF,OAAS,GACxDxC,KAAKqgF,SAASoJ,WAAc,QAAU,QAI5ClnC,EAAFxhD,UAAAw+E,qBAAE,WAAA,GAAF1/E,GAAAG,IACQA,MAAKupF,qBAAuBvpF,KAAKmpF,iBAG/BnpF,KAAK6nF,qBACP7nF,KAAKonF,oBAAqB,EAE1B3I,EAAAA,UAAUz+E,KAAK0pF,OAAO9mF,cAAe,iBAAiBwJ,KAAK0I,EAAAA,KAAK,IAAIjU,UAAU,WAC5EhB,EAAKunF,oBAAqB,KAI9BpnF,KAAKs/E,WAAa,SAClBt/E,KAAKmB,mBAAmBC,iBAQpBmhD,EAAVxhD,UAAAqnF,iCACI,GAAIpoF,KAAKqgF,SAAS7gC,aAAex/C,KAAK+oF,kBACpC,KAAMY,MAKFpnC,EAAVxhD,UAAAknF,yBACIjoF,KAAK4pF,iBACL5pF,KAAKqoF,uBAOC9lC,EAAVxhD,UAAA6oF,oCACI,IAAI5pF,KAAKyoF,cAAe,CACtB,GAAIoB,GACAC,CACJ9pF,MAAKyoF,cAAcr/E,QAAQ,SAAC2gF,GAC1B,GAAmB,UAAfA,EAAKlP,MAAmB,CAC1B,GAAIgP,GAAahqF,EAAKmqF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAKlP,MAAiB,CAC/B,GAAIiP,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUVxnC,EAAVxhD,UAAAsnF,+BACI,GAAIroF,KAAKqgF,SAAU,CACjB,GAAIj/B,KAEJ,IAAqC,SAAjCphD,KAAKwpF,wBAAoC,CAC3C,GAAIU,GAAYlqF,KAAKyoF,cACjBzoF,KAAKyoF,cAAch8E,KAAK,SAAAs9E,GAAQ,MAAe,UAAfA,EAAKlP,QAAqB,KAC1DsP,EAAUnqF,KAAKyoF,cACfzoF,KAAKyoF,cAAch8E,KAAK,SAAAs9E,GAAQ,MAAe,QAAfA,EAAKlP,QAAmB,IAExDqP,GACF9oC,EAAIvsC,KAAKq1E,EAAU57D,IACVtuB,KAAKsnF,YACdlmC,EAAIvsC,KAAK7U,KAAKunF,cAGZ4C,GACF/oC,EAAIvsC,KAAKs1E,EAAQ77D,QAEVtuB,MAAK0oF,iBACdtnC,EAAMphD,KAAK0oF,eAAe1+E,IAAI,SAAAgzC,GAAS,MAAAA,GAAM1uB,KAG/CtuB,MAAKqgF,SAASl/B,kBAAkBC,KAK1BmB,EAAZxhD,UAAAonF,sBAAE,WACE,IAAKnoF,KAAKqgF,SACR,KAAM+J,MAQV7nC,EAAFxhD,UAAA4nF,iBAAE,WACE,GAAwB,YAApB3oF,KAAK+nF,YAA4B/nF,KAAK0pF,QAAU1pF,KAAK0pF,OAAO9mF,cAAcmS,SAASvS,OAAQ,CAC7F,GAAIxC,KAAKuQ,YAAcvQ,KAAKuQ,UAAUK,UAGpC,YADA5Q,KAAK0nF,uBAAwB,EAG/B,KAAKl3E,SAAS65E,gBAAgBl5E,SAASnR,KAAK0E,YAAY9B,eACtD,MAQF,KAAoB,GALd0nF,GAAiBtqF,KAAKuqF,aACxBvqF,KAAKkoF,wBAAwBtlF,cAAci7B,yBACzC2sD,EAAaxqF,KAAKuqF,aACpBvqF,KAAK0pF,OAAO9mF,cAAcmS,SAAS,GAAG8oB,yBACtC4sD,EAAa,EACvBliC,EAAA,EAA0B5pC,EAAA3e,KAAK0pF,OAAO9mF,cAAcmS,SAA1BwzC,EAA1B5pC,EAAAnc,OAA0B+lD,IAA1B,CACQkiC,GADR9rE,EAAA4pC,GAC4BvlD,YAEtBhD,KAAKynF,iBAAmB+C,EAAaF,EA3ZjB,EA4ZpBtqF,KAAKwnF,iBA7ZgB,IA6ZGiD,EAAkCC,OAE1D1qF,MAAKynF,iBAAmB,EACxBznF,KAAKwnF,iBAAmB,CAE1BxnF,MAAK0nF,uBAAwB,EAC7B1nF,KAAKmB,mBAAmBC,gBAIlBmhD,EAAVxhD,UAAAwpF,aAAA,SAAuBI,GACnB,MAAO3qF,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkBipF,EAAK79D,MAAQ69D,EAAKxqE,qBAlYtEjb,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACE8F,SAAU,eACV7F,SAAU,uhbAMVS,MACEC,MAAJ,iBACI4kF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACI54B,qBAAJ,oBACIC,mBAAJ,kBACI44B,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIrzD,kCAAJ,uBAEAhzB,QAAA,SACAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAy8C,EAAAlpC,eAAA,WAAA,QACAnU,KAAA6N,EAAAA,aACA7N,KAAA+H,EAAAA,oBACA/H,SAAA4J,GAAAzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAkhF,QACAphF,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAmCoB,EAAAA,aACnCpB,SAAA4J,GAAAzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA8hF,QACAhiF,KAAA2J,EAAAA,wHAvHA0zC,EAAAh8C,gBAJAwhF,aAAA7iF,KAAAuB,EAAAA,QA4NAqlF,qBAAA5mF,KAAAuB,EAAAA,QAnOAujF,YAAA9kF,KAAsBuB,EAAAA,QAqOtB64E,aAAAp6E,KAAAuB,EAAAA,QA1LAslF,eAAA7mF,KAAAsB,EAAAA,UAAApB,MAAA,eA5BA8iF,0BAAAhjF,KAAAsB,EAAAA,UAAApB,MAAA,yBA2NA4mF,qBAAA9mF,KAAAsB,EAAAA,UAAApB,MAAA,0GAjGA2jF,oBAAA7jF,KAAA8tB,EAAAA,aAAA5tB,MAAAyhF,MAUAoC,cAAA/jF,KAAA8tB,EAAAA,aAAA5tB,MAAAwhF,MAsBA8B,iBAAAxjF,KAAQsO,EAAAA,gBAARpO,MAAAmhF,MAmBAkC,gBAAAvjF,KAAAsO,EAAAA,gBAAApO,MAAAuhF,MAuBA4B,kBAAArjF,KAAAsO,EAAAA,gBAAApO,MAAA0hF,MAEA0B,kBAAAtjF,KAAAsO,EAAAA,gBAAYpO,MAAZ2hF,OAEAxkC,GACA0kC,gCChOA,sBAmBA/hF,KAACgK,EAAAA,SAAD9J,OACEyK,cACE02E,GACAhkC,GACAokC,GACAC,GACAC,GACAC,GACAC,IAEF53E,SAAUC,EAAAA,cACVK,SACE82E,GACAhkC,GACAokC,GACAC,GACAC,GACAC,GACAC,QArCJxgD,KCuCI0lD,GAA+B,EAGnCC,GAAA,WACE,QAAFA,GAEWl3D,EAEAkkB,GAFAl5C,KAAXg1B,OAAWA,EAEAh1B,KAAXk5C,OAAWA,EA/CX,MAAAgzC,MAoDAC,GAAA,yBApDA,MAAAA,MAqDaC,GAA4BnlF,EAAmBklF,IAS/CE,GACT,GAAI1sE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAASysE,mBA0Fb,QAAFnL,GACYhgF,EACAuD,EACkC66B,GAH5C,GAAF1/B,GAIIsH,EAJJC,KAAApH,OAAAA,WACYH,GAAZsB,mBAAYA,EACAtB,EAAZ6E,YAAYA,EA7DZ7E,EAAAk+E,WAAuB,EAIvBl+E,EAAAw+E,SAAqB,EAerBx+E,EAAAukB,YAA0D,KAgB1DvkB,EAAA0sF,eAAM,GAAIxkF,GAAAA,aAGVlI,EAAAqjC,OAAkD,GAAIn7B,GAAAA,aAGtDlI,EAAA0lB,OAAkD,GAAIxd,GAAAA,aAatDlI,EAAA8xC,cAGA9xC,EAAAyuB,GAAe,oBAAoB29D,KAQ/BpsF,EAAK2sF,yBAA2BjtD,EAASshD,wBAlB7C,MAtDqCz4E,GAArC+4E,EAAAh6E,GAUE3F,OAAFC,eAAM0/E,EAANpgF,UAAA,cAAE,WAAwB,MAAOf,MAAKq+E,SAAWr+E,KAAK+9E,2CAuBtDv8E,OAAAC,eAAM0/E,EAANpgF,UAAA,6BAAA,WAAyC,MAAOf,MAAKwsF,4BACnD,SAA0B9qF,GACxB1B,KAAKwsF,uBAAyBnkF,EAAAA,sBAAsB3G,oCAoBxDF,OAAAC,eAAM0/E,EAANpgF,UAAA,iBAAA,SAAgBW,aACRA,IAASA,EAAMc,SACjBd,EAAMw4B,MAAM,KAAK9wB,QAAQ,SAAA+8C,GAAa,MAAAtmD,GAAK8xC,WAAWwU,EAAU30C,SAAU,IAC1ExR,KAAK0E,YAAY9B,cAAcujD,UAAY,qCAiB/Cg7B,EAAFpgF,UAAAyI,mBAAE,WACExJ,KAAKC,YAAc,GAAIk9C,GAAAA,2BAAsCn9C,KAAKi5C,SAASmN,WAE3EpmD,KAAKggF,kBAOPmB,EAAFpgF,UAAA2+E,cAAE,SAAcnjC,GACRv8C,KAAKs8C,QACPt8C,KAAKs8C,MAAM15C,cAAc25C,UAAYA,IAKzC4kC,EAAFpgF,UAAA0+E,cAAE,WACE,MAAOz/E,MAAKs8C,MAAQt8C,KAAKs8C,MAAM15C,cAAc25C,UAAY,GAI3D4kC,EAAFpgF,UAAAi/E,eAAE,WACEhgF,KAAK+9E,YAAc/9E,KAAKi5C,QAAQz2C,OAChCxC,KAAK2xC,WAAW,4BAA8B3xC,KAAK+9E,UACnD/9E,KAAK2xC,WAAW,4BAA8B3xC,KAAK+9E,UACnD/9E,KAAKmB,mBAAmBC,gBAI1B+/E,EAAFpgF,UAAAw/E,iBAAE,SAAiBrnC,GACf,GAAMpvC,GAAQ,GAAIoiF,IAA6BlsF,KAAMk5C,EACrDl5C,MAAKusF,eAAexqF,KAAK+H,mBA3H7B5E,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,wJACVC,QAAF,qjBACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEqF,SAAF,kBACE3F,QAAF,iBACEO,MACFC,MAAA,oBAEA4M,YACAC,QAAAuvC,GAAAtvC,YAAAquE,2FAnEAj8E,SAAE4J,GAAFzI,aAAAnB,KAAA6J,EAAAA,OAAA3J,MAAAinF,SA6IAlL,EAAA56E,6GAvDA0yC,UAAA/zC,KAAAsO,EAAAA,gBAAApO,MAAAs9C,IAAAxhB,aAAA,MAGAmd,eAAAn5C,KAAAsO,EAAAA,gBAAApO,MAAAu9C,MAGAv+B,cAAAlf,KAAAuB,EAAAA,QAGAo6E,wBAAA37E,KAAAuB,EAAAA,QAGA8lF,iBAAArnF,KAAAyB,EAAAA,SAMAu8B,SAAAh+B,KAAAyB,EAAAA,SASA4e,SAAArgB,KAAAyB,EAAAA,SAIA6B,YAAAtD,KAAAuB,EAAAA,MAAArB,MAAA,YASA+7E,qBvB5HE,QAAFpE,GAEah4E,GAAA/E,KAAb+E,WAAaA,EArBb;sBAcAG,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,0BACV8F,SAAU,gEARZjG,KAAmB6N,EAAAA,cARnBgqE,KrH8DaC,GACT,GAAIr9D,GAAAA,eAAqC,oCAQhCs9D,IACXpqE,QAASmqE,GACT/sD,MAAO7C,EAAAA,SACP8C,WAAYgtD,GAODC,IACXtqE,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAAi7D,MAC9BtoD,OAAO,iBAiFP,QAAFsoD,GAAsBjrD,EAA8BvI,EAC9BnJ,EACA48D,EACAl8E,EAC0CmmC,EAC9BrkC,EACQotD,EACU5/C,EAE9B9E,GATpB,GAAF9L,GAAAG,IAAsBA,MAAtBmyB,SAAsBA,EAA8BnyB,KAApD4pB,SAAoDA,EAC9B5pB,KAAtBygB,kBAAsBA,EACAzgB,KAAtBq9E,MAAsBA,EACAr9E,KAAtBmB,mBAAsBA,EAC0CnB,KAAhEsnC,gBAAgEA,EAC9BtnC,KAAlCiD,KAAkCA,EACQjD,KAA1CqwD,WAA0CA,EACUrwD,KAApDyQ,UAAoDA,EAE9BzQ,KAAtB2L,eAAsBA,EAvDtB3L,KAAAs9E,qBAAgC,EAChCt9E,KAAAu9E,uBAAkC,EASlCv9E,KAAAw9E,wBAAmC,EAMnCx9E,KAAAy9E,sBAAkCj2E,EAAAA,aAAaC,MAG/CzH,KAAA09E,qBAA0C,GAAI7xE,GAAAA,QAG9C7L,KAAAo4C,UAAoC,aAGpCp4C,KAAAq4C,WAAe,aA2Cfr4C,KAAA29E,kBAAsC,EA2DtC39E,KAAA49E,iBAAoE5kC,EAAAA,MAAM,WACtE,MAAIn5C,GAAKg+E,cAAgBh+E,EAAKg+E,aAAa5kC,QACnCv4C,EAAAA,MAAZqJ,UAAA,GAAqBlK,EAAKg+E,aAAa5kC,QAAQjvC,IAAI,SAAAkvC,GAAU,MAAAA,GAAOC,qBAKzDt5C,EAAKw9E,MAAMjkC,SACbhzB,eACAha,KAAK0I,EAAAA,KAAK,GAAIukC,EAAAA,UAAU,WAAM,MAAAx5C,GAAK+9E,sBA/P5C,MAgKAp8E,QAAAC,eAAM27E,EAANr8E,UAAA,4BAAA,WAAwC,MAAOf,MAAKu9E,2BAClD,SAAyB77E,GACvB1B,KAAKu9E,sBAAwBl1E,EAAAA,sBAAsB3G,oCAcrD07E,EAAFr8E,UAAAC,YAAE,WACEhB,KAAKy9E,sBAAsBx8E,cAC3BjB,KAAKs9E,qBAAsB,EAC3Bt9E,KAAK89E,gBACL99E,KAAK09E,qBAAqB7wE,YAI5BrL,OAAFC,eAAM27E,EAANr8E,UAAA,iBAAE,WACE,MAAOf,MAAK29E,kBAAoB39E,KAAK69E,aAAaE,2CAKpDX,EAAFr8E,UAAAi9E,UAAE,WACEh+E,KAAKi+E,iBACLj+E,KAAKk+E,eAIPd,EAAFr8E,UAAAo9E,WAAE,WACEn+E,KAAKo+E,cAEAp+E,KAAK29E,mBAIN39E,KAAKk6C,WAEPl6C,KAAK69E,aAAat4D,OAAOxjB,OAG3B/B,KAAK69E,aAAaQ,QAAUr+E,KAAK29E,kBAAmB,EAEhD39E,KAAK8kB,aAAe9kB,KAAK8kB,YAAYjD,gBACvC7hB,KAAK8kB,YAAY7C,SACjBjiB,KAAKs+E,4BAA4Br9E,eAK9BjB,KAAKs9E,qBAKRt9E,KAAKmB,mBAAmBynB,kBAQ5BpnB,OAAFC,eAAM27E,EAANr8E,UAAA,2BAAE,WAAA,GAAFlB,GAAAG,IACI,OAAOU,GAAAA,MACLV,KAAK49E,iBACL59E,KAAK69E,aAAa59E,YAAYq9C,OAAOlxC,KAAK6E,EAAAA,OAAO,WAAM,MAAApR,GAAK89E,oBAC5D39E,KAAK09E,qBACL19E,KAAKu+E,oBACLv+E,KAAK8kB,YACD9kB,KAAK8kB,YAAYoH,cAAc9f,KAAK6E,EAAAA,OAAO,WAAM,MAAApR,GAAK89E,oBACtDxxE,EAAAA,MACJC,KAEApC,EAAAA,IAAI,SAAAF,GAAS,MAAAA,aAAiB00E,IAA2B10E,EAAQ,yCAkBrEtI,OAAFC,eAAM27E,EAANr8E,UAAA,oBAAE,WACE,MAAIf,MAAK69E,cAAgB79E,KAAK69E,aAAa59E,YAClCD,KAAK69E,aAAa59E,YAAY47C,WAGhC,sCAIXr6C,OAAAC,eAAc27E,EAAdr8E,UAAA,gDACI,OAAKf,MAAKyQ,UAIH/P,EAAAA,MACL+9E,EAAAA,UAAUz+E,KAAKyQ,UAAW,SAC1BguE,EAAAA,UAAUz+E,KAAKyQ,UAAW,aAE3BrE,KAAK6E,EAAAA,OAAO,SAACnH,GACZ,GAAM40E,GAAc50E,EAA2B,OACzC60E,EAAY9+E,EAAKwwD,WACnBxwD,EAAKwwD,WAAW3rD,YAAY9B,cAAgB,IAEhD,OAAO/C,GAAK89E,kBACJe,IAAgB7+E,EAAKsyB,SAASvvB,iBAC5B+7E,IAAcA,EAAUxtE,SAASutE,OAChC7+E,EAAKilB,cAAgBjlB,EAAKilB,YAAYsH,eAAejb,SAASutE,MAflEvyE,EAAAA,GAAa,uCAoBxBixE,EAAFr8E,UAAAu1B,WAAE,SAAW50B,GAAX,GAAF7B,GAAAG,IACIiJ,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAtJ,GAAK++E,iBAAiBl9E,MAIzD07E,EAAFr8E,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAKo4C,UAAY5hB,GAInB4mD,EAAFr8E,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKq4C,WAAa7hB,GAIpB4mD,EAAFr8E,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKmyB,SAASvvB,cAAcR,SAAWu0B,GAGzCymD,EAAFr8E,UAAAuiB,eAAE,SAAexZ,GACb,GAAMyZ,GAAUzZ,EAAMyZ,OAYtB,IANIA,IAAY4lB,EAAAA,QACdr/B,EAAMsE,iBAKJpO,KAAKk6C,YAAc32B,IAAY4lB,EAAAA,QAAW5lB,IAAYqZ,EAAAA,UAAY9yB,EAAM6xC,QAC1E37C,KAAK6+E,mBACL7+E,KAAK09E,qBAAqB9wE,OAC1B9C,EAAMqsB,sBACD,IAAIn2B,KAAK8+E,cAAgBv7D,IAAYK,EAAAA,OAAS5jB,KAAKk6C,UACxDl6C,KAAK8+E,aAAa7iC,wBAClBj8C,KAAK6+E,mBACL/0E,EAAMsE,qBACD,CACL,GAAM2wE,GAAiB/+E,KAAK69E,aAAa59E,YAAY47C,WAC/CH,EAAan4B,IAAYqZ,EAAAA,UAAYrZ,IAAYuZ,EAAAA,UAEnD98B,MAAKk6C,WAAa32B,IAAYy7D,EAAAA,IAChCh/E,KAAK69E,aAAa59E,YAAY6jB,UAAUha,GAC/B4xC,GAAc17C,KAAKi/E,YAC5Bj/E,KAAKg+E,aAGHtiC,GAAc17C,KAAK69E,aAAa59E,YAAY47C,aAAekjC,IAC7D/+E,KAAKk/E,oBAKX9B,EAAFr8E,UAAAo+E,aAAE,SAAar1E,GACX,GAAI87D,GAAS97D,EAAgC,OACzCpI,EAAgCkkE,EAAOlkE,KAGvB,YAAhBkkE,EAAO1gE,OACTxD,EAAiB,IAATA,EAAc,KAAO04B,WAAW14B,IAQtC1B,KAAKo/E,iBAAmB19E,GAAS8O,SAASqzB,gBAAkB/5B,EAAM87D,SACpE5lE,KAAKo/E,eAAiB19E,EACtB1B,KAAKo4C,UAAU12C,GAEX1B,KAAKi/E,YACPj/E,KAAKg+E,cAKXZ,EAAFr8E,UAAAgmD,aAAE,WACM/mD,KAAKi/E,aACPj/E,KAAKo/E,eAAiBp/E,KAAKmyB,SAASvvB,cAAclB,MAClD1B,KAAKi+E,iBACLj+E,KAAKk+E,aAAY,KAUbd,EAAVr8E,UAAAm9E,YAAA,SAAsBmB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQr/E,KAAKqwD,YAA6C,SAA/BrwD,KAAKqwD,WAAWivB,aACjCD,EACFr/E,KAAKqwD,WAAWkvB,uBAEhBv/E,KAAKqwD,WAAWivB,WAAa,SAG/Bt/E,KAAKw9E,wBAAyB,IAK1BJ,EAAVr8E,UAAAq9E,uBACQp+E,KAAKw9E,yBACPx9E,KAAKqwD,WAAWivB,WAAa,OAC7Bt/E,KAAKw9E,wBAAyB,IAa1BJ,EAAVr8E,UAAAm+E,2BACI,GAAMj9E,GAAQjC,KAAK69E,aAAa59E,YAAY87C,iBAAmB,EACzDoC,EAAaC,EAA8Bn8C,EAC7CjC,KAAK69E,aAAa5kC,QAASj5C,KAAK69E,aAAax/B,cAE3CmhC,EAAoBlhC,EACxBr8C,EAAQk8C,EA3W4B,GA6WpCn+C,KAAK69E,aAAa4B,gBA1WiB,IA8WrCz/E,MAAK69E,aAAa6B,cAAcF,IAO1BpC,EAAVr8E,UAAA4+E,iDACUC,EAAc5/E,KAAKq9E,MAAMjkC,SAAShzB,eAAeha,KAAK0I,EAAAA,KAAK,IAC3D+qE,EAAgB7/E,KAAK69E,aAAa5kC,QAAQvvC,QAAQ0C,KACtDkxD,EAAAA,IAAI,WAAM,MAAAz9D,GAAKigF,kBAAkBC,wBAGjCl3C,EAAAA,MAAM,GAIR,OAAOnoC,GAAAA,MAAMk/E,EAAaC,GACvBzzE,KAGCitC,EAAAA,UAAU,WAGR,MAFAx5C,GAAKg/E,mBACLh/E,EAAKg+E,aAAamC,iBACXngF,EAAKogF,sBAGdnrE,EAAAA,KAAK,IAGNjU,UAAU,SAAAiJ,GAAS,MAAAjK,GAAKqgF,kBAAkBp2E,MAIvCszE,EAAVr8E,UAAA+8E,yBACQ99E,KAAK8kB,cACP9kB,KAAKm+E,aACLn+E,KAAK8kB,YAAYmB,UACjBjmB,KAAK8kB,YAAc,OAIfs4D,EAAVr8E,UAAA69E,iBAAA,SAA2Bl9E,GACvB,GAAMy+E,GAAYngF,KAAK69E,cAAgB79E,KAAK69E,aAAaz5D,YACvDpkB,KAAK69E,aAAaz5D,YAAY1iB,GAC9BA,EAII0+E,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CngF,MAAKqwD,WACPrwD,KAAKqwD,WAAWgwB,SAAS3+E,MAAQ0+E,EAEjCpgF,KAAKmyB,SAASvvB,cAAclB,MAAQ0+E,GAShChD,EAAVr8E,UAAAm/E,kBAAA,SAA4Bp2E,GACpBA,GAASA,EAAMkrB,SACjBh1B,KAAKsgF,6BAA6Bx2E,EAAMkrB,QACxCh1B,KAAK4+E,iBAAiB90E,EAAMkrB,OAAOtzB,OACnC1B,KAAKo4C,UAAUtuC,EAAMkrB,OAAOtzB,OAC5B1B,KAAKmyB,SAASvvB,cAAcH,QAC5BzC,KAAK69E,aAAa0C,iBAAiBz2E,EAAMkrB,SAG3Ch1B,KAAKm+E,cAMCf,EAAVr8E,UAAAu/E,6BAAA,SAAuC5J,GACnC12E,KAAK69E,aAAa5kC,QAAQ7vC,QAAQ,SAAA8vC,GAC5BA,GAAUw9B,GAAQx9B,EAAOpiC,UAC3BoiC,EAAOuB,cAKL2iC,EAAVr8E,UAAAk9E,oCACI,KAAKj+E,KAAK69E,aACR,KAAM2C,IAGHxgF,MAAK8kB,YAaR9kB,KAAK8kB,YAAYwjD,YAAYloD,MAAOpgB,KAAKygF,mBAZzCzgF,KAAK+oC,QAAU,GAAIhoB,GAAAA,eAAe/gB,KAAK69E,aAAav4E,SAAUtF,KAAKygB,mBACnEzgB,KAAK8kB,YAAc9kB,KAAK4pB,SAASsD,OAAOltB,KAAKi1C,qBAEzCj1C,KAAK2L,iBACP3L,KAAKy9E,sBAAwBz9E,KAAK2L,eAAeO,SAASrL,UAAU,WAC9DhB,EAAKq6C,WAAar6C,EAAKilB,aACzBjlB,EAAKilB,YAAYwjD,YAAYloD,MAAOvgB,EAAK4gF,sBAS7CzgF,KAAK8kB,cAAgB9kB,KAAK8kB,YAAYjD,gBACxC7hB,KAAK8kB,YAAYhD,OAAO9hB,KAAK+oC,SAC7B/oC,KAAKs+E,4BAA8Bt+E,KAAK2/E,6BAG1C,IAAMe,GAAU1gF,KAAKk6C,SAErBl6C,MAAK69E,aAAamC,iBAClBhgF,KAAK69E,aAAaQ,QAAUr+E,KAAK29E,kBAAmB,EAIhD39E,KAAKk6C,WAAawmC,IAAY1gF,KAAKk6C,WACrCl6C,KAAK69E,aAAa36C,OAAOnhC,QAIrBq7E,EAAVr8E,UAAAk0C,6BACI,MAAO,IAAIzoB,GAAAA,eACTC,iBAAkBzsB,KAAKqqC,sBACvBJ,eAAgBjqC,KAAKsnC,kBACrBlnB,MAAOpgB,KAAKygF,gBACZzjE,UAAWhd,KAAKiD,QAIZm6E,EAAVr8E,UAAAspC,+BAUI,MATArqC,MAAK8/E,kBAAoB9/E,KAAK4pB,SAASvgB,WACpCkgC,oBAAoBvpC,KAAK2gF,wBACzBl3C,wBAAuB,GACvB+7B,UAAS,GACTl7B,gBACEK,QAAS,QAASC,QAAS,SAAUI,SAAU,QAASC,SAAU,QAClEN,QAAS,QAASC,QAAS,MAAOI,SAAU,QAASC,SAAU,YAG7DjrC,KAAK8/E,mBAGN1C,EAAVr8E,UAAA4/E,gCACI,MAAI3gF,MAAK4gF,YACA5gF,KAAK4gF,YAAY77E,WAGnB/E,KAAKqwD,WAAarwD,KAAKqwD,WAAWD,4BAA8BpwD,KAAKmyB,UAItEirD,EAAVr8E,UAAA0/E,yBACI,MAAOzgF,MAAK2gF,uBAAuB/9E,cAAci7B,wBAAwBzd,OAOnEg9D,EAAVr8E,UAAA89E,4BACI7+E,KAAK69E,aAAa59E,YAAY4B,cAAc7B,KAAK69E,aAAagD,sBAAwB,GAAK,IAIrFzD,EAAVr8E,UAAAk+E,oBACI,GAAMlzE,GAA4B/L,KAAKmyB,SAASvvB,aAChD,QAAQmJ,EAAQ+0E,WAAa/0E,EAAQ3J,WAAapC,KAAKu9E,sCApf3Dr4E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,oDACVU,MACE83E,aAAgB,MAChBlrE,cAAe,2CACfouE,2BAA4B,uCAC5Bh/B,+BAAgC,mBAChCtvC,uBAAwB,qDACxBmvC,mBAAoB,iDAGpBo/B,YAAa,iBACbjjD,SAAU,eACV0zB,UAAW,uBACXzzB,YAAa,0BAEf7yB,SAAU,yBACVyH,WAAYuqE,4CA1Fdj4E,KAAE6N,EAAAA,aAbF7N,KAAEkoB,EAAAA,UAsBFloB,KAAE8M,EAAAA,mBAHF9M,KAAE8H,EAAAA,SARF9H,KAAE+H,EAAAA,oBAmJF/H,SAAA4J,GAAAzI,aAAAnB,KAAe6J,EAAAA,OAAf3J,MAAsB43E,QAlKtB93E,KAAQkB,EAAAA,eAARC,aAAAnB,KAmKeoB,EAAAA,aAhIfpB,KAAQq9C,GAARl8C,aAAAnB,KAiIeoB,EAAAA,WAjIfpB,KAiI2B+7E,EAAAA,SAC3B/7E,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B6J,EAAAA,OAA3B3J,MAAkCwM,EAAAA,cA5JlC1M,KAAEiB,EAAAA,mCAmIF03E,eAAA34E,KAAGuB,EAAAA,MAAHrB,MAAS,qBAMTw7E,cAAA17E,KAAGuB,EAAAA,MAAHrB,MAAS,gCAMT87E,uBAAAh8E,KAAGuB,EAAAA,MAAHrB,MAAS,8BA/JTg4E,iCsHAA,sBAmBAl4E,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUm3B,GAAiBhd,EAAAA,cAAeja,GAAiBD,EAAAA,cAC3DK,SACE0xE,GACA76C,GACA82C,GACAL,GACA1tE,IAEFQ,cAAesxE,GAAiB/D,GAAwBL,IACxDnqE,WAAYqqE,QA7BdmE,KCeIx6E,GAAS,gBAkFX,QAAFy6E,GAC4C5wE,EAC9B/E,EACAhH,EACA2iC,GAH8BrnC,KAA5CyQ,UAA4CA,EAC9BzQ,KAAd0L,QAAcA,EACA1L,KAAd0E,YAAcA,EACA1E,KAAdqnC,eAAcA,EAxDdrnC,KAAAshF,OAAiC,UAQjCthF,KAAAuhF,UAA8B,EAM9BvhF,KAAAqJ,SAA0D,cAuB1DrJ,KAAAm9B,KAA8C,SAW9Cn9B,KAAA85C,IAAgBlzC,KA7FhB,MAwCApF,QAAAC,eAAM4/E,EAANtgF,UAAA,aAAA,WAA8B,MAAOf,MAAKshF,YACxC,SAAU5/E,GACR1B,KAAKqlE,UAAU3jE,GACf1B,KAAKshF,OAAS5/E,mCAMlBF,OAAAC,eAAM4/E,EAANtgF,UAAA,eAAA,WAA2B,MAAOf,MAAKuhF,cACrC,SAAYC,GACVxhF,KAAKuhF,SAAWl5E,EAAAA,sBAAsBm5E,oCAY1ChgF,OAAAC,eAAM4/E,EAANtgF,UAAA,eAAA,WAA0B,MAAOf,MAAK+hB,cACpC,SAAYy/D,GACVxhF,KAAK+hB,SAAWy/D,EAChBxhF,KAAKyhF,sDAMTjgF,OAAAC,eAAM4/E,EAANtgF,UAAA,mBAAA,WAA8B,MAAOf,MAAK0hF,kBACxC,SAAgBC,GACVA,IAAmB3hF,KAAK0hF,eAC1B1hF,KAAK4hF,2BAA2BD,EAAgB3hF,KAAK0hF,cACrD1hF,KAAK0hF,aAAeC,oCAU1BngF,OAAAC,eAAM4/E,EAANtgF,UAAA,cAAA,WAA0B,MAAOf,MAAK6hF,aACpC,SAAWL,GACTxhF,KAAK6hF,QAAUx5E,EAAAA,sBAAsBm5E,oCAgBvCH,EAAFtgF,UAAA+gF,QAAE,WACE,OAA2C,IAApC9hF,KAAKqJ,SAAS0U,QAAQ,UAI/BsjE,EAAFtgF,UAAAghF,QAAE,WACE,OAA4C,IAArC/hF,KAAKqJ,SAAS0U,QAAQ,WAG/BsjE,EAAFtgF,UAAAC,YAAE,WACMhB,KAAKgiF,aAAehiF,KAAKiiF,eAC3BjiF,KAAKqnC,eAAegB,kBAAkBroC,KAAKiiF,cAAejiF,KAAKgiF,cAK3DX,EAAVtgF,UAAA0gF,8BAMI,MALKzhF,MAAKiiF,cAGRjiF,KAAKiiF,cAAc1wE,YAAcvR,KAAKwrB,QAFtCxrB,KAAKiiF,cAAgBjiF,KAAKkiF,sBAIrBliF,KAAKiiF,eAINZ,EAAVtgF,UAAAmhF,+BACI,GAAMC,GAAeniF,KAAKyQ,UAAUmgC,cAAc,OAwBlD,OArBAuxC,GAAaj3B,aAAa,KAAM,qBAAqBlrD,KAAK85C,KAC1DqoC,EAAa35E,UAAUG,IAAI,qBAC3Bw5E,EAAa5wE,YAAcvR,KAAKwrB,QAE5BxrB,KAAKgiF,aACPG,EAAaj3B,aAAa,aAAclrD,KAAKgiF,aAG/ChiF,KAAK0E,YAAY9B,cAAckuC,YAAYqxC,GAGN,kBAA1B5hF,uBACTP,KAAK0L,QAAQO,kBAAkB,WAC7B1L,sBAAsB,WACpB4hF,EAAa35E,UAAUG,IAhBT,wBAoBlBw5E,EAAa35E,UAAUG,IApBL,oBAuBbw5E,GAIDd,EAAVtgF,UAAA6gF,2BAAA,SAAqCD,EAAwBS,GAEzD,GAAM52D,GAAUxrB,KAAKyhF,oBAEjBW,IACFpiF,KAAKqnC,eAAegB,kBAAkB7c,EAAS42D,GAG7CT,GACF3hF,KAAKqnC,eAAemB,SAAShd,EAASm2D,IAKlCN,EAAVtgF,UAAAskE,UAAA,SAAoBgd,GACZA,IAAiBriF,KAAKshF,SACpBthF,KAAKshF,QACPthF,KAAK0E,YAAY9B,cAAc4F,UAAUC,OAAO,aAAazI,KAAKshF,QAEhEe,GACFriF,KAAK0E,YAAY9B,cAAc4F,UAAUG,IAAI,aAAa05E,oBA9JlEn9E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,aACVU,MACEC,MAAS,YACTs8E,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,kDAiEhC59E,SAAA4J,GAAAzI,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmB6J,EAAAA,OAAnB3J,MAA0BwM,EAAAA,cAvF1B1M,KAA8C8H,EAAAA,SAA9C9H,KAAmB6N,EAAAA,aAHnB7N,KAAQmmC,EAAAA,mCA+BRoR,QAAAv3C,KAAGuB,EAAAA,MAAHrB,MAAS,mBAST29E,UAAA79E,KAAGuB,EAAAA,MAAHrB,MAAS,qBAWTiE,WAAAnE,KAAGuB,EAAAA,MAAHrB,MAAS,sBAGTomB,UAAAtmB,KAAGuB,EAAAA,MAAHrB,MAAS,cAST48E,cAAA98E,KAAGuB,EAAAA,MAAHrB,MAAS,yBAWT+3B,OAAAj4B,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGT49E,SAAA99E,KAAGuB,EAAAA,MAAHrB,MAAS,qBArFTi8E,iCCAA,sBAcAn8E,KAACgK,EAAAA,SAAD9J,OACE+J,SACE68B,EAAAA,WACA38B,IAEFI,SAAU4xE,IACVxxE,cAAewxE,QApBjB4B,KCYaC,GAAwB,GAAIvjE,GAAAA,eAAoB,sBAK7DwjE,GAAA,wBAWAnjF,KAAAmT,KAAoB,KAGpBnT,KAAAmzB,aAA0B,EAM1BnzB,KAAA6lC,cAA2B,EAG3B7lC,KAAA61B,UAA8B,KAxC9B,MAAAstD,MCkBaC,IAIXC,iBAAkBnsE,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgB9T,EAAAA,OAAOC,UAAW,sBACxC6T,EAAAA,MAAM,UAAW9T,EAAAA,OAAOC,UAAW,oBACnC+T,EAAAA,WAAW,qCACPC,EAAAA,QAAW0P,GAAmBC,QADtC,IACiDC,GAAgBI,qBAC7DjQ,EAAAA,WAAW,kBACPC,EAAAA,QAAW0P,GAAmBK,QADtC,IACiDH,GAAgBM,uCCyD/D,QAAF87D,GACY5+E,EACAvD,EACAwhC,EACR4gD,EAC8B/yE,EAEvBgzE,GAPT,GAAF3jF,GAQIsH,EARJC,KAAApH,OAAAA,WACYH,GAAZ6E,YAAYA,EACA7E,EAAZsB,mBAAYA,EACAtB,EAAZ8iC,kBAAYA,EAID9iC,EAAX2jF,kBAAWA,EAxBX3jF,EAAAkoB,gBAAmD,OAGnDloB,EAAA+nE,uBAA2B,GAAI7/D,GAAAA,aAM/BlI,EAAA4jF,4BAA4D,KAkBxD5jF,EAAK4Q,UAAYD,EACjB3Q,EAAK6jF,wBAA0BH,EAC5Bx3D,SAASC,EAAAA,YAAY23D,OAAQ33D,EAAAA,YAAY43D,MAAO53D,EAAAA,YAAY63D,SAC5DhjF,UAAU,WACThB,EAAKikF,aAAa,oCACdP,EAAmBQ,UAAU/3D,EAAAA,YAAY23D,SAC7C9jF,EAAKikF,aAAa,mCACdP,EAAmBQ,UAAU/3D,EAAAA,YAAY43D,QAC7C/jF,EAAKikF,aAAa,oCACdP,EAAmBQ,UAAU/3D,EAAAA,YAAY63D,aAvCrD,MAJ6Cz7E,GAA7Ck7E,EAAAn8E,GAgDEm8E,EAAFviF,UAAAinB,sBAAE,SAAyBC,GAIvB,MAHAjoB,MAAKgkF,0BACLhkF,KAAKikF,iBACLjkF,KAAK64E,gCACE74E,KAAKooB,cAAcJ,sBAAsBC,IAIlDq7D,EAAFviF,UAAAsnB,qBAAE,SAAwBJ,GAItB,MAHAjoB,MAAKgkF,0BACLhkF,KAAKikF,iBACLjkF,KAAK64E,gCACE74E,KAAKooB,cAAcC,qBAAqBJ,IAIjDq7D,EAAFviF,UAAA4nB,MAAE,WACO3oB,KAAK+Y,aACR/Y,KAAK+nB,gBAAkB,UACvB/nB,KAAKmB,mBAAmBynB,kBAK5B06D,EAAFviF,UAAAykB,KAAE,WACOxlB,KAAK+Y,aACR/Y,KAAK+nB,gBAAkB,SACvB/nB,KAAKmB,mBAAmBC,iBAI5BkiF,EAAFviF,UAAAC,YAAE,WACEhB,KAAK0jF,wBAAwBziF,cAC7BjB,KAAK+Y,YAAa,GAGpBuqE,EAAFviF,UAAAgxC,iBAAE,SAAiBjoC,GACO,YAAlBA,EAAM4Y,QACR1iB,KAAKqjC,aACsB,WAAlBv5B,EAAM4Y,SACf1iB,KAAKsjC,gBAGPtjC,KAAK4nE,uBAAuB7lE,KAAK+H,IAGnCw5E,EAAFviF,UAAAg4E,kBAAE,SAAkBjvE,GAChB9J,KAAK4nE,uBAAuB7lE,KAAK+H,IAG3Bw5E,EAAVviF,UAAA+iF,aAAA,SAAuB56D,EAAkBvgB,GACrC,GAAMH,GAAYxI,KAAK0E,YAAY9B,cAAc4F,SACjDG,GAAMH,EAAUG,IAAIugB,GAAY1gB,EAAUC,OAAOygB,IAG3Co6D,EAAVviF,UAAAijF,mCACI,GAAIhkF,KAAKooB,cAAcvG,cACrB,KAAMsH,OAAM,gFAIRm6D,EAAVviF,UAAAkjF,0BACI,GAAMl4E,GAAuB/L,KAAK0E,YAAY9B,cACxCmmB,EAAa/oB,KAAKwjF,kBAAkBz6D,UAEtCC,OAAMC,QAAQF,GAEhBA,EAAW3f,QAAQ,SAAA8f,GAAY,MAAAnd,GAAQvD,UAAUG,IAAIugB,KAC5CH,GACThd,EAAQvD,UAAUG,IAAIogB,IAMlBu6D,EAAVviF,UAAAsiC,sBACSrjC,KAAKojC,aACRpjC,KAAKojC,WAAapjC,KAAK2iC,kBAAkBzV,OAAOltB,KAAK0E,YAAY9B,gBAGnE5C,KAAKojC,WAAWM,gCAIV4/C,EAAVviF,UAAAuiC,yBACI,GAAMw1C,GAAU94E,KAAKyjF,2BAGjB3K,IAAoC,kBAAlBA,GAAQr2E,OAC5Bq2E,EAAQr2E,QAGNzC,KAAKojC,YACPpjC,KAAKojC,WAAWa,WAKZq/C,EAAVviF,UAAA83E,mDACI74E,MAAKyjF,4BAA8BzjF,KAAKyQ,UAAsC,cAG1EzQ,KAAK0E,YAAY9B,cAAcH,OACjCwG,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK6E,YAAY9B,cAAcH,0BA1KlEyC,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEC,SAAU,8CACVC,QAAF,okBACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwT,YAAFiqE,GAAAC,kBACEt9E,MACFC,MAAe,6BACT+hD,SAAN,KACIx1C,KAAJ,SACIw0D,aAAJ,OACIvlB,oBAAJ,+BACIp4B,WAAY,kBACZ86D,iBAAJ,4BACI76D,gBAAJ,mHA1CAnkB,KAAEi/E,EAAAA,mBAGFj/E,KAAEqoB,EAAAA,qBAiBFroB,SAAmB4J,GAAnBzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAwM,EAAAA,cALA1M,KAAQi+E,MACRG,EAAA/8E,6EAmCA+8E,mDCjEA,sBAgBAp+E,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAka,EAAAA,cACAja,GACAC,EAAAA,cAEFG,SAAU6zE,GAAyBj0E,IACnCQ,cAAeyzE,IACf/5D,iBAAkB+5D,QAzBpBc,KCkBAC,GAAA,WAmBE,QAAFA,GAAcx/D,EAAoDC,GAAhE,GAAFjlB,GAAAG,IAAkEA,MAAlE8kB,YAAkEA,EARlE9kB,KAAA+kB,gBAAqC,GAAIlZ,GAAAA,QAGzC7L,KAAAglB,aAAkC,GAAInZ,GAAAA,QAMlC7L,KAAK6kB,kBAAoBA,EAGzBA,EAAkB+iD,uBAAuBx7D,KACvC6E,EAAAA,OAAO,SAAAnH,GAAS,MAAoB,SAApBA,EAAMwrD,WAA0C,YAAlBxrD,EAAM4Y,UACpD5N,EAAAA,KAAK,IAENjU,UAAU,WACThB,EAAKmlB,aAAapY,OAClB/M,EAAKmlB,aAAanY,aAIpBgY,EAAkB+iD,uBAAuBx7D,KACvC6E,EAAAA,OAAO,SAAAnH,GAAS,MAAoB,SAApBA,EAAMwrD,WAA0C,WAAlBxrD,EAAM4Y,UACpD5N,EAAAA,KAAK,IAENjU,UAAU,WACThB,EAAKilB,YAAYmB,UACjBpmB,EAAKklB,gBAAgBnY,KAAK/M,EAAKgoE,SAC/BhoE,EAAKklB,gBAAgBlY,aAGlBgY,EAAkB2+D,kBAAkB39C,cACvCnlC,EAAAA,MACEokB,EAAY4f,gBACZ5f,EAAYw/D,eAAel4E,KAAK6E,EAAAA,OAAO,SAAAnH,GAAS,MAAAA,GAAMyZ,UAAY4lB,EAAAA,WAClEtoC,UAAU,WAAM,MAAAhB,GAAKulB,YAjE7B,MAyEEi/D,GAAFtjF,UAAAqkB,QAAE,SAAQq5B,GAAR,GAAF5+C,GAAAG,IACSA,MAAK+kB,gBAAgBQ,SAExBvlB,KAAK6kB,kBAAkB+iD,uBAAuBx7D,KAC5C6E,EAAAA,OAAO,SAAAnH,GAAS,MAAoB,UAApBA,EAAMwrD,YACtBxgD,EAAAA,KAAK,IACLjU,UAAU,WAAM,MAAAhB,GAAKilB,YAAYkjD,mBAEnChoE,KAAK6nE,QAAUppB,EACfz+C,KAAK6kB,kBAAkBW,SAK3B6+D,EAAFtjF,UAAAolB,eAAE,WACE,MAAOnmB,MAAK+kB,gBAAgBqB,gBAI9Bi+D,EAAFtjF,UAAAslB,YAAE,WACE,MAAOrmB,MAAKglB,aAAaoB,gBAM3Bi+D,EAAFtjF,UAAA2jC,cAAE,WACE,MAAO1kC,MAAK8kB,YAAY4f,iBAM1B2/C,EAAFtjF,UAAAwkE,cAAE,WACE,MAAOvlE,MAAK8kB,YAAYygD,iBA3G5B8e,mBCwCE,QAAFE,GACc36D,EACAE,EACwB06D,GAFxBxkF,KAAd4pB,SAAcA,EACA5pB,KAAd8pB,UAAcA,EACwB9pB,KAAtCwkF,mBAAsCA,EAnBtCxkF,KAAAykF,2BAAsE,KAxBtE,MA2BEjjF,QAAFC,eAAM8iF,EAANxjF,UAAA,6BAAE,WACE,GAAMopB,GAASnqB,KAAKwkF,kBACpB,OAAOr6D,GAASA,EAAOu6D,sBAAwB1kF,KAAKykF,gCAGtD,SAA0B/iF,GACpB1B,KAAKwkF,mBACPxkF,KAAKwkF,mBAAmBE,sBAAwBhjF,EAEhD1B,KAAKykF,2BAA6B/iF,mCActC6iF,EAAFxjF,UAAA2pB,KAAE,SAA0B4+C,EACT/+C,GADjB,GAAF1qB,GAAAG,KAGU4qB,EAAU2+C,EAAqBh/C,GAC/BQ,EAAa/qB,KAAK0rB,eAAed,GACjCe,EAAY3rB,KAAK2kF,iBAAiB55D,EAAYH,GAC9Cg6D,EAAM,GAAIP,IAAwB14D,EAAWZ,EAEnD,IAAIu+C,YAAkC5xD,GAAAA,YACpCiU,EAAUtD,qBAAqB,GAAItH,GAAAA,eAAkBuoD,EAAsB,MACzE19C,UAAWhB,EAAQzX,KACnB0xE,eAAgBD,SAEb,CACL,GAAM38D,GAAS,GAAIoD,GAAAA,gBAAgBi+C,MAAwBx6D,GACrD9O,KAAK6rB,gBAAgBjB,EAASg6D,IAC9B94D,EAAaH,EAAU3D,sBAAsBC,EACnD28D,GAAIr5D,SAAWO,EAAWP,SAuB5B,MAnBAq5D,GAAIz+D,iBAAiBtlB,UAAU,WAEzBhB,EAAK6kF,uBAAyBE,IAChC/kF,EAAK6kF,sBAAwB,QAI7B1kF,KAAK0kF,uBAGP1kF,KAAK0kF,sBAAsBv+D,iBAAiBtlB,UAAU,WAAM,MAAA+jF,GAAI//D,kBAAkB8D,UAClF3oB,KAAK0kF,sBAAsBt/D,WAG3Bw/D,EAAI//D,kBAAkB8D,QAGxB3oB,KAAK0kF,sBAAwBE,EAEtBA,GAMTL,EAAFxjF,UAAAqkB,QAAE,WACMplB,KAAK0kF,uBACP1kF,KAAK0kF,sBAAsBt/D,WAOvBm/D,EAAVxjF,UAAA4jF,iBAAA,SAA2B55D,EACAR,GAEvB,GAAMS,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBhrB,KAAK8pB,UAAW,GAAIqB,WACrEg4D,GAAsB54D,MAGnBa,EACF,GAAIC,GAAAA,gBAAgBi4D,GAAyB/4D,EAAOlK,iBAAkB4K,EAE1E,OAD4DF,GAAWjJ,OAAOsJ,GAC1DG,UAOdg5D,EAAVxjF,UAAA2qB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,eACxBxP,UAAWuN,EAAOvN,UAClBmW,YAAa5I,EAAO4I,YACpBg3C,SAAU,OACVlgC,eAAgBjqC,KAAK4pB,SAASk7D,iBAAiBC,QAC/Ct4D,iBAAkBzsB,KAAK4pB,SAASvgB,WAC7BqjB,SACAK,qBACAE,OAAO,MAOZ,OAJI1C,GAAO6qB,gBACT7oB,EAAc6oB,cAAgB7qB,EAAO6qB,eAGhCp1C,KAAK4pB,SAASsD,OAAOX,IAQtBg4D,EAAVxjF,UAAA8qB,gBAAA,SAA6BtB,EACAs6D,GAEzB,GAAM75D,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5Eo/C,EAAkB,GAAIl/C,WACzBk5D,GAAmBQ,IACnB3B,GAAuB34D,EAAOpX,OAWjC,QARIoX,EAAOvN,WACLgO,GAAiBA,EAAahd,IAA2B5H,EAAAA,eAAgB,OAC7EikE,EAAgB37C,IAAItoB,EAAAA,gBAClB1E,MAAO6oB,EAAOvN,UACd9Q,OAAQC,EAAAA,OAIL,GAAI+e,GAAAA,eAAeF,GAAgBhrB,KAAK8pB,UAAWugD,mBA9I9DnlE,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAYwkE,2CAbzBl/E,KAAQkoB,EAAAA,UAERloB,KAAkCooB,EAAAA,WAYlCpoB,KAAaq/E,EAAbl+E,aAAAnB,KAoBOoB,EAAAA,WApBPpB,KAoBmBsoB,EAAAA,sKA3CnB+2D,KhBgCMS,GAA6B,SAG7BC,GAA4B,UAM5BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqBzgF,GAAA1E,KAArB0E,YAAqBA,EAtDrB,MAAAygF,MAwDaC,GAAsBp+E,EAAWqG,EAAcpG,EAAmBk+E,qBAkC7E,QAAFnM,GAAcj0E,EAMQwL,EACA2hB,EAE0CkD,GAT9D,GAAFv1B,GAUIsH,EAVJC,KAAApH,KAUU+E,IAVV/E,IAMsBH,GAAtB0Q,UAAsBA,EACA1Q,EAAtBqyB,cAAsBA,EAE0CryB,EAAhEu1B,eAAgEA,EAjBhEv1B,EAAAwlF,cAAoCxlF,EAAKylF,mBAAmB,UAAW,gBAGvEzlF,EAAA0lF,aAAmC1lF,EAAKylF,mBAAmB,kBAmBvD,KAAmB,GAAvB/8B,GAAA,EAAuBi9B,EAAvBN,GAAuB38B,EAAvBi9B,EAAAhjF,OAAuB+lD,IAAvB,CAAS,GAAMkrB,GAAf+R,EAAAj9B,EACU1oD,GAAKylF,mBAAmB7R,IACzB1uE,EAAuC,cAAEyD,UAAUG,IAAI8qE,SAI5D5zE,GAAKqyB,cAAcE,QAAQvyB,EAAK6E,YAAY9B,eAAe,GAEvD/C,EAAKwlF,cACPxlF,EAAK48C,MAAQuoC,GACJnlF,EAAKylF,mBAAmB,qBACjCzlF,EAAK48C,MAAQwoC,MA3BnB,MAV+B78E,GAA/B4wE,EAAA7xE,GAyCE6xE,EAAFj4E,UAAAC,YAAE,WACEhB,KAAKkyB,cAAcI,eAAetyB,KAAK0E,YAAY9B,gBAIrDo2E,EAAFj4E,UAAA0B,MAAE,WACEzC,KAAK0yB,kBAAkBjwB,SAGzBu2E,EAAFj4E,UAAA2xB,gBAAE,WACE,MAAO1yB,MAAK0E,YAAY9B,eAG1Bo2E,EAAFj4E,UAAA6gC,kBAAE,WACE,MAAO5hC,MAAK6hC,eAAiB7hC,KAAKoC,UAIpC42E,EAAFj4E,UAAAukF,mBAAE,WAAF,IAAqB,GAArBzlF,GAAAG,KAAAylF,KAAAl9B,EAAA,EAAqBA,EAArB/vC,UAAAhW,OAAqB+lD,IAAAk9B,EAArBl9B,GAAA/vC,UAAA+vC,EACI,OAAOk9B,GAAWn0E,KAAK,SAAAo0E,GAAa,MAAA7lF,GAAK6yB,kBAAkBk4C,aAAa8a,qBA5E5ExgF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iMACE8F,SAAU,YACVpF,MAGFyrD,aAAA,mBACMh5B,kCAAN,uCAEAlzB,SAAA,mVACAC,QAAA,69OACEC,QAAF,WAAA,gBAAA,SACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFA7DAZ,KAAEuzB,EAAAA,eAJFvzB,SAAQ4J,GAARzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA2e,EAAAA,4BA0FAi1D,EAAAzyE;8BAXAyyE,uCA6EE15C,qCA7JF,0DAsKAt/B,KAAAoC,8BAEQ0H,EAARmvE,6BAGAC,EAAA7yE,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,gLAnCAU,MACAw7C,kBAAA,oBACAiE,kBAAA,mBAEAh3C,uBAAA,sBACMI,UAAN,8BACI4pB,kCAAJ,uCAEAhzB,QAAA,WAAA,gBAAA,SACAF,SAAA,mVACAC,QAAA,69OACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAozE,EAAA7/D,eAAA,WAAA,QACAnU,KAAA2J,EAAAA,kJA1JAqqE,GAKAF,gCCbA,sBAcA9zE,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAG,GACAF,IAEFI,SACEupE,GACAE,GACA7pE,IAEFQ,cACEmpE,GACAE,QA3BJt/D,KC2CAu/D,GAAA,yBA3CA,MAAAA,MA4CaC,GAAiC/rE,EAAc8rE,IAO/CE,IACXxmE,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAAm3D,MAC9BxkD,OAAO,GAOTykD,GAAA,yBA7DA,MAAAA,MA+DIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEWzkD,EAGAtzB,GAHA1B,KAAXg1B,OAAWA,EAGAh1B,KAAX0B,MAAWA,EAxEX,MAAA+3E,qBAgLE,QAAFH,GAAsBr5C,GAApB,GAAFpgC,GACIsH,EADJC,KAAApH,OAAAA,WAAsBH,GAAtBogC,gBAAsBA,EAnFtBpgC,EAAA25B,WAAsB,EACtB35B,EAAAg4C,WAAsB,EAetBh4C,EAAAg6B,8BAAwD,aAGxDh6B,EAAAw4C,WAA0B,aAe1Bx4C,EAAAqgC,MAAkB,2BAA2Bs5C,KA8B7C35E,EAAAumC,YAAmC,GAAIr+B,GAAAA,aAiBvClI,EAAAqM,OAAM,GAAInE,GAAAA,eA9KV,MA0F0CK,GAA1CkxE,EAAAnyE,GA6BA3F,OAAAC,eAAM63E,EAANv4E,UAAA,YAAA,WAAuB,MAAOf,MAAKkgC,WACjC,SAASx+B,GAAT,GAAF7B,GAAAG,IACIA,MAAKkgC,MAAQx+B,EAET1B,KAAK05E,gBACP15E,KAAK05E,eAAetwE,QAAQ,SAAAytB,GAAU,MAAAA,GAAOlf,KAAO9X,EAAKqgC,yCAO/D1+B,OAAAC,eAAM63E,EAANv4E,UAAA,gBAAA,WAA4B,MAAOf,MAAKw5B,eACtC,SAAa93B,GACX1B,KAAKw5B,UAAYnxB,EAAAA,sBAAsB3G,oCAK3CF,OAAAC,eAAM63E,EAANv4E,UAAA,wBACI,GAAM+V,GAAW9W,KAAK05C,gBAAkB15C,KAAK05C,gBAAgB5iC,WAE7D,OAAI9W,MAAKg6C,SACAljC,EAAS9M,IAAI,SAAA6sB,GAAU,MAAAA,GAAOn1B,QAGhCoV,EAAS,GAAKA,EAAS,GAAGpV,UAAQoN,QAE3C,SAAU2xB,GACRzgC,KAAKk7C,qBAAqBza,GAC1BzgC,KAAKomC,YAAYrkC,KAAK/B,KAAK0B,wCAW7BF,OAAFC,eAAM63E,EAANv4E,UAAA,gBAAE,WACE,GAAM+V,GAAW9W,KAAK05C,gBAAgB5iC,QACtC,OAAO9W,MAAKg6C,SAAWljC,EAAYA,EAAS,IAAM,sCAKtDtV,OAAAC,eAAM63E,EAANv4E,UAAA,gBAAA,WAA4B,MAAOf,MAAK63C,eACtC,SAAan2C,GACX1B,KAAK63C,UAAYxvC,EAAAA,sBAAsB3G,oCAWzC43E,EAAFv4E,UAAA+f,SAAE,WACE9gB,KAAK05C,gBAAkB,GAAIK,GAAAA,eAAgC/5C,KAAKg6C,aAAUlrC,IAAW,IAGvFwqE,EAAFv4E,UAAAyI,mBAAE,YACEmV,EAAA3e,KAAK05C,iBAAgBa,OAAzBxwC,MAAA4U,EAAmC3e,KAAK05E,eAAezoE,OAAO,SAAA4lB,GAAU,MAAAA,GAAO5B,kBAO7EqkD,EAAFv4E,UAAAu1B,WAAE,SAAW50B,GACT1B,KAAK0B,MAAQA,EACb1B,KAAKigC,gBAAgB7+B,gBAIvBk4E,EAAFv4E,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAK65B,8BAAgCrD,GAIvC8iD,EAAFv4E,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKq4C,WAAa7hB,GAIpB8iD,EAAFv4E,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,EAEZ32B,KAAK05E,gBACP15E,KAAK05E,eAAetwE,QAAQ,SAAAytB,GAAU,MAAAA,GAAOmK,mBAKjDs4C,EAAFv4E,UAAAq1B,iBAAE,WACE,GAAMtf,GAAW9W,KAAK8W,SAChBke,EAAShM,MAAMC,QAAQnS,GAAYA,EAASA,EAAStU,OAAS,GAAKsU,EACnEhN,EAAQ,GAAI2vE,IAAqB,EAAUz5E,KAAK0B,MACtD1B,MAAK65B,8BAA8B/vB,EAAMpI,OACzC1B,KAAKkM,OAAOnK,KAAK+H,IASnBwvE,EAAFv4E,UAAA44E,kBAAE,SAAkB9iD,EAAyB0jB,EAAiBmD,OAA9D,KAAAA,IAA8DA,GAA9D,GAGS19C,KAAKg6C,WAAYh6C,KAAK8W,UAAa+f,EAAO5B,UAC5Cj1B,KAAgC,SAAEi1B,SAAU,GAG3CslB,EACFv6C,KAAK05C,gBAAgBa,OAAO1jB,GAE5B72B,KAAK05C,gBAAgBe,SAAS5jB,GAI5B6mB,GACF19C,KAAKo2B,mBAKPp2B,KAAKomC,YAAYrkC,KAAK/B,KAAK0B,QAI7B43E,EAAFv4E,UAAA64E,YAAE,SAAY/iD,GACV,MAAO72B,MAAK05C,gBAAgBmE,WAAWhnB,IAIzCyiD,EAAFv4E,UAAA84E,cAAE,SAAchjD,GACZ,WAA8B,KAAnB72B,KAAK85E,YAIZ95E,KAAKg6C,UAAYhxB,MAAMC,QAAQjpB,KAAK85E,WAC/B95E,KAAK85E,UAAUxoE,KAAK,SAAA5P,GAAS,MAAgB,OAAhBm1B,EAAOn1B,OAAiBA,IAAUm1B,EAAOn1B,QAGxEm1B,EAAOn1B,QAAU1B,KAAK85E,YAIvBR,EAAVv4E,UAAAm6C,qBAAA,SAA+Bx5C,aAG3B,IAFA1B,KAAK85E,UAAYp4E,EAEZ1B,KAAK05E,eAIV,GAAI15E,KAAKg6C,UAAYt4C,EAAO,CAC1B,IAAKsnB,MAAMC,QAAQvnB,GACjB,KAAMynB,OAAM,qDAGdnpB,MAAKw2E,kBACL90E,EAAM0H,QAAQ,SAACwzC,GAAsB,MAAA/8C,GAAKg9C,aAAaD,SAEvD58C,MAAKw2E,kBACLx2E,KAAK68C,aAAan7C,IAKd43E,EAAVv4E,UAAAy1E,2BACIx2E,KAAK05C,gBAAgB9Q,QACrB5oC,KAAK05E,eAAetwE,QAAQ,SAAAytB,GAAU,MAAAA,GAAO5B,SAAU,KAIjDqkD,EAAVv4E,UAAA87C,aAAA,SAAuBn7C,GACnB,GAAMq7C,GAAsB/8C,KAAK05E,eAAejtE,KAAK,SAAAoqB,GACnD,MAAuB,OAAhBA,EAAOn1B,OAAiBm1B,EAAOn1B,QAAUA,GAG9Cq7C,KACFA,EAAoB9nB,SAAU,EAC9Bj1B,KAAK05C,gBAAgBa,OAAOwC,oBAvOlC73C,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,0BACVuN,WACEymE,IACCxmE,QAAS0mE,GAA8BzmE,YAAawmE,IAEvD9zE,QAAS,YACTO,MACE4M,cAAe,oCACf3M,MAAS,0BACT+zE,qCAAsC,YAExC5uE,SAAU,+DA3EZjG,KAAE+H,EAAAA,uCAsGFysE,iBAAAx0E,KAAGsO,EAAAA,gBAAHpO,MAAmB+c,EAAAA,WAAW,WAAM,MAAA63D,SAGpCriE,OAAAzS,KAAGuB,EAAAA,QAYH4d,WAAAnf,KAAGuB,EAAAA,QAOH/E,QAAAwD,KAAGuB,EAAAA,QAoBH2/B,cAAAlhC,KAAGyB,EAAAA,SASHqzC,WAAA90C,KAAGuB,EAAAA,QAOHyF,SAAAhH,KAAGyB,EAAAA,UA7KH2yE,GA0F0CF,IAgO1Ca,GAAA,yBA1TA,MAAAA,MA2TaC,GAA4BjzE,EAAmBgzE,mBAwF1D,QAAFD,GAA0BG,EACJh5E,EACAuD,EACAwtB,GAHpB,GAAFryB,GAIIsH,EAJJC,KAAApH,OAAAA,WACsBH,GAAtBsB,mBAAsBA,EACAtB,EAAtB6E,YAAsBA,EACA7E,EAAtBqyB,cAAsBA,EApEtBryB,EAAAu6E,mBAA8B,EAC9Bv6E,EAAA61B,UAAqB,EAWrB71B,EAAAi2B,eAA4D,KA+C5Dj2B,EAAAygC,WAA+B,EAI/BzgC,EAAAqM,OAAM,GAAInE,GAAAA,aAQNlI,EAAKw6E,kBAAoBF,IAT7B,MAjEqC/xE,GAArC4xE,EAAA7yE,GA0BE3F,OAAFC,eAAMu4E,EAANj5E,UAAA,eAAE,WAAwB,MAAUf,MAAKsuB,GAAzC,0CAaA9sB,OAAAC,eAAMu4E,EAANj5E,UAAA,0BACI,MAAOf,MAAKq6E,kBAAoBr6E,KAAKq6E,kBAAkBT,YAAY55E,MAAQA,KAAK01B,cAElF,SAAYh0B,GACV,GAAM++B,GAAWp4B,EAAAA,sBAAsB3G,EAEnC++B,KAAazgC,KAAK01B,WACpB11B,KAAK01B,SAAW+K,EAEZzgC,KAAKq6E,mBACPr6E,KAAKq6E,kBAAkBV,kBAAkB35E,KAAMA,KAAK01B,UAGtD11B,KAAKmB,mBAAmBC,iDAM9BI,OAAAC,eAAMu4E,EAANj5E,UAAA,2BACI,MAAOf,MAAKsgC,WAActgC,KAAKq6E,mBAAqBr6E,KAAKq6E,kBAAkBj4E,cAE7E,SAAaV,GAAkB1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,oCAgBtEs4E,EAAFj5E,UAAA+f,SAAE,WACE9gB,KAAKo6E,kBAAoBp6E,KAAKq6E,oBAAsBr6E,KAAKq6E,kBAAkBrgC,SAC3Eh6C,KAAK4sE,MAAQ5sE,KAAKo6E,kBAAoB,QAAU,WAChDp6E,KAAKsuB,GAAKtuB,KAAKsuB,IAAM,qBAAqBkrD,KAEtCx5E,KAAKo6E,oBACPp6E,KAAK2X,KAAO3X,KAAKq6E,kBAAkB1iE,MAGjC3X,KAAKq6E,mBAAqBr6E,KAAKq6E,kBAAkBR,cAAc75E,QACjEA,KAAKi1B,SAAU,GAGjBj1B,KAAKkyB,cAAcE,QAAQpyB,KAAK0E,YAAY9B,eAAe,IAG7Do3E,EAAFj5E,UAAAC,YAAE,WACEhB,KAAKkyB,cAAcI,eAAetyB,KAAK0E,YAAY9B,gBAIrDo3E,EAAFj5E,UAAA0B,MAAE,WACEzC,KAAK+1B,cAAcnzB,cAAcH,SAInCu3E,EAAFj5E,UAAA+gC,eAAE,SAAeh4B,GACbA,EAAMqsB,kBAENn2B,KAAK01B,WAAW11B,KAAKo6E,oBAA4Bp6E,KAAK01B,SAElD11B,KAAKq6E,oBACPr6E,KAAKq6E,kBAAkBV,kBAAkB35E,KAAMA,KAAK01B,UAAU,GAC9D11B,KAAKq6E,kBAAkBhiC,cAIzBr4C,KAAKkM,OAAOnK,KAAK,GAAI03E,IAAsBz5E,KAAMA,KAAK0B,SAGxDs4E,EAAFj5E,UAAAs1B,cAAE,SAAcvsB,GAQZA,EAAMqsB,mBAQR6jD,EAAFj5E,UAAAigC,cAAE,WAGEhhC,KAAKmB,mBAAmBC,+BAzJ5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,qoBACVC,QAAF,m9CACEE,cAAFC,EAAAA,kBAAmCC,KACjCwF,SAAF,kBACEvF,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,iBACEO,MACFu0E,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCx0E,MAAJ,oBACIk8B,YAAJ,kHAhPAh9B,KAAa6N,EAAAA,aA7Eb7N,KAAEuzB,EAAAA,gBALFuhD,EAAAzzE,wHAiVAwvB,gBAAA7wB,KAAAsB,EAAAA,UAAApB,MAAA,WAKAkpB,KAAAppB,KAAAuB,EAAAA,QAKAkR,OAAAzS,KAAAuB,EAAAA,QASA/E,QAAAwD,KAAAuB,EAAAA,QAGAwuB,UAAA/vB,KAAAuB,EAAAA,QAGArE,WAAA8C,KAAAuB,EAAAA,QAGAyF,SAAAhH,KAAAyB,EAAAA,UA2BAqzE,mCChZA,sBAaA90E,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,GAAiBE,IAC3BE,SAAUJ,GAAiBiqE,GAAsBU,IACjDnqE,cAAeypE,GAAsBU,QAhBvCS,iCCAA,sBAqBAv1E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mBACVU,MAAOC,MAAS,wBAvBlB00E,iCAAA,sBA+BAx1E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mDACVU,MACEC,MAAS,sBAlCb20E,iCAAA,sBA2CAz1E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,4DACVU,MACEC,MAAS,yBA9Cb40E,gCAiEA56E,KAAA66E,MAAoC,QAjEpC,sBAuDA31E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mBACV8F,SAAU,iBACVpF,MACEC,MAAS,mBACT80E,qCAAsC,yCAK1CD,QAAA31E,KAAGuB,EAAAA,SAjEHs0E,iCAAA,sBAwEA71E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,kBACVU,MAAOC,MAAS,uBA1ElBg1E,iCAAA,sBAkFA91E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mCACVU,MAAOC,MAAS,sBApFlBi1E,iCAAA,sBA4FA/1E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,2CACVU,MAAOC,MAAS,yBA9FlBk1E,iCAAA,sBAsGAh2E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,4CACVU,MAAOC,MAAS,yBAxGlBm1E,iCAAA,sBAgHAj2E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,2CACVU,MAAOC,MAAS,yBAlHlBo1E,iCAAA,sBA0HAl2E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,4CACVU,MAAOC,MAAS,yBA5HlBq1E,iCAAA,sBAoIAn2E,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,qCACVU,MAAOC,MAAS,uBAtIlBs1E,iCA+JA,sBATAp2E,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACE8F,SAAU,UACV7F,SAAU,8EACVC,QAAF,q9EACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MAAFC,MAAA,gBAGAu1E,iCAcA,yWALA91E,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEC,MAAQC,MAAV,uBAGAw1E,iCAcA,0YAHAz1E,MAAAC,MAAA,4BAGAy1E,iCC3LA,sBA4BAv2E,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,IACVI,SACE8rE,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACAjsE,IAEFQ,cACE0rE,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBa3J,GACT,GAAIpyD,GAAAA,eAAuC,6BhBsB3C+U,GAAe,EAONo9C,IACXj/D,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAA6vD,MAC9Bl9C,OAAO,kKAmBT,IAAA6mD,IAAA,yBA1EA,MAAAA,MAmFAC,GAAA,WACE,QAAFA,GAAqBl3E,GAAA1E,KAArB0E,YAAqBA,EApFrB,MAAAk3E,MAsFaC,GACXzuE,EAAcpG,EAAWC,EAAmBoG,EAAcuuE,KAAmB,0BAgG7E,QAAF5J,GAAcjtE,EACQ5D,EACA+wB,EACe7vB,EAEXy5E,EACsC1mD,GAN9D,GAAFv1B,GAOIsH,EAPJC,KAAApH,KAOU+E,IAPV/E,WACsBH,GAAtBsB,mBAAsBA,EACAtB,EAAtBqyB,cAAsBA,EAGIryB,EAA1Bi8E,aAA0BA,EACsCj8E,EAAhEu1B,eAAgEA,EAhEhEv1B,EAAAg2B,UAA2C,GAK3Ch2B,EAAAi2B,eAA4D,KAE5Dj2B,EAAA21B,UAA8B,mBAAkBd,GAGhD70B,EAAAyuB,GAAwBzuB,EAAK21B,UAY7B31B,EAAA+1B,cAA+C,QAG/C/1B,EAAA8X,KAAiC,KAIjC9X,EAAAqM,OAAM,GAAInE,GAAAA,aAGVlI,EAAAoyE,oBAAkE,GAAIlqE,GAAAA,aAetElI,EAAAw4C,WAA0B,aAE1Bx4C,EAAAk8E,uBAA2C,GAE3Cl8E,EAAAm8E,mBAAqDC,GAAqBC,KAE1Er8E,EAAAg6B,8BAAgE,aAsChEh6B,EAAA61B,UAA8B,EAc9B71B,EAAAygC,WAA+B,EAwB/BzgC,EAAAs8E,gBAAoC,EA9DhCt8E,EAAKwC,SAAWoL,SAASpL,IAAa,IA8C1C,MAxHiC+F,GAAjC4pE,EAAA7qE,GAoBE3F,OAAFC,eAAMuwE,EAANjxE,UAAA,eAAE,WAAwB,OAAUf,KAAKsuB,IAAMtuB,KAAKw1B,WAApD,0CAIAh0B,OAAAC,eAAMuwE,EAANjxE,UAAA,gBAAA,WAA4B,MAAOf,MAAKy1B,eACtC,SAAa/zB,GAAkB1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,oCAoDtEswE,EAAFjxE,UAAA2P,gBAAE,WAAA,GAAF7Q,GAAAG,IACIA,MAAKkyB,cACFE,QAAQpyB,KAAK+1B,cAAcnzB,eAC3B/B,UAAU,SAAAm1B,GAAe,MAAAn2B,GAAKo2B,oBAAoBD,MAGvDg8C,EAAFjxE,UAAAC,YAAE,WACEhB,KAAKkyB,cAAcI,eAAetyB,KAAK+1B,cAAcnzB,gBAOzDpB,OAAAC,eAAMuwE,EAANjxE,UAAA,eAAA,WAA2B,MAAOf,MAAK01B,cACrC,SAAYh0B,GACNA,GAAS1B,KAAKi1B,UAChBj1B,KAAK01B,SAAWh0B,EAChB1B,KAAKmB,mBAAmBC,iDAU9BI,OAAAC,eAAMuwE,EAANjxE,UAAA,gBAAA,WAAmB,MAAOf,MAAKsgC,eAC7B,SAAa5+B,GACPA,GAAS1B,KAAKoC,WAChBpC,KAAKsgC,UAAY5+B,EACjB1B,KAAKmB,mBAAmBC,iDAY9BI,OAAAC,eAAMuwE,EAANjxE,UAAA,qBAAA,WAAiC,MAAOf,MAAKm8E,oBAC3C,SAAkBz6E,GAChB,GAAM06E,GAAU16E,GAAS1B,KAAKm8E,cAC9Bn8E,MAAKm8E,eAAiBz6E,EAElB06E,IACEp8E,KAAKm8E,eACPn8E,KAAKq8E,sBAAsBJ,GAAqBK,eAEhDt8E,KAAKq8E,sBACHr8E,KAAKi1B,QAAUgnD,GAAqBM,QAAUN,GAAqBO,WAEvEx8E,KAAKiyE,oBAAoBlwE,KAAK/B,KAAKm8E,kDAKvCnK,EAAFjxE,UAAA6gC,kBAAE,WACE,MAAO5hC,MAAK6hC,eAAiB7hC,KAAKoC,UAIpC4vE,EAAFjxE,UAAAo3B,mBAAE,WAIEn4B,KAAKmB,mBAAmBC,gBAI1B4wE,EAAFjxE,UAAAu1B,WAAE,SAAW50B,GACT1B,KAAKi1B,UAAYvzB,GAInBswE,EAAFjxE,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAK65B,8BAAgCrD,GAIvCw7C,EAAFjxE,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKq4C,WAAa7hB,GAIpBw7C,EAAFjxE,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,GAGlBq7C,EAAFjxE,UAAA07E,gBAAE,WACE,MAAOz8E,MAAKi1B,QAAU,OAAUj1B,KAAKmyE,cAAgB,QAAU,SAGzDH,EAAVjxE,UAAAs7E,sBAAA,SAAgCK,GAC5B,GAAIC,GAAW38E,KAAKg8E,mBAChBjwE,EAAuB/L,KAAK0E,YAAY9B,aAExC+5E,KAAaD,IAGb18E,KAAK+7E,uBAAuBv5E,OAAS,GACvCuJ,EAAQvD,UAAUC,OAAOzI,KAAK+7E,wBAGhC/7E,KAAK+7E,uBAAyB/7E,KAAK48E,0CAC/BD,EAAUD,GACd18E,KAAKg8E,mBAAqBU,EAEtB18E,KAAK+7E,uBAAuBv5E,OAAS,GACvCuJ,EAAQvD,UAAUG,IAAI3I,KAAK+7E,0BAIvB/J,EAAVjxE,UAAAq1B,4BACI,GAAItsB,GAAQ,GAAI6xE,GAChB7xE,GAAMkrB,OAASh1B,KACf8J,EAAMmrB,QAAUj1B,KAAKi1B,QAErBj1B,KAAK65B,8BAA8B75B,KAAKi1B,SACxCj1B,KAAKkM,OAAOnK,KAAK+H,IAIXkoE,EAAVjxE,UAAAk1B,oBAAA,SAA8BD,GAErBh2B,KAAK82B,cAAgC,aAAhBd,EAEdA,IACNh2B,KAAK82B,eACP92B,KAAK82B,aAAaC,UAClB/2B,KAAK82B,aAAe,MAGtB92B,KAAKq4C,cAPLr4C,KAAK82B,aAAe92B,KAAKkyE,OAAOj7C,OAAO,EAAG,GAAIC,YAAY,KAY9D86C,EAAFjxE,UAAA81B,OAAE,WACE72B,KAAKi1B,SAAWj1B,KAAKi1B,SAUvB+8C,EAAFjxE,UAAAs1B,cAAE,SAAcvsB,GAAd,GAAFjK,GAAAG,IAQI8J,GAAMqsB,kBAGDn2B,KAAKoC,UAAkC,SAAtBpC,KAAK87E,aAkBf97E,KAAKoC,UAAkC,SAAtBpC,KAAK87E,eAGhC97E,KAAK+1B,cAAcnzB,cAAcqyB,QAAUj1B,KAAKi1B,QAChDj1B,KAAK+1B,cAAcnzB,cAAcuvE,cAAgBnyE,KAAKmyE,gBApBlDnyE,KAAKmyE,eAAuC,UAAtBnyE,KAAK87E,cAE7B7yE,QAAQC,UAAUC,KAAK,WACrBtJ,EAAKs8E,gBAAiB,EACtBt8E,EAAKoyE,oBAAoBlwE,KAAKlC,EAAKs8E,kBAIvCn8E,KAAK62B,SACL72B,KAAKq8E,sBACDr8E,KAAK01B,SAAWumD,GAAqBM,QAAUN,GAAqBO,WAKxEx8E,KAAKo2B,qBAUT47C,EAAFjxE,UAAA0B,MAAE,WACEzC,KAAKkyB,cAAc0E,SAAS52B,KAAK+1B,cAAcnzB,cAAe,aAGhEovE,EAAFjxE,UAAA87E,oBAAE,SAAoB/yE,GAIlBA,EAAMqsB,mBAGA67C,EAAVjxE,UAAA67E,0CACA,SAAMD,EAAgCD,GAElC,GAA4B,mBAAxB18E,KAAKo1B,eACP,MAAO,EAGT,IAAI0nD,GAAqB,EAEzB,QAAQH,GACN,IAAKV,IAAqBC,KAGxB,GAAIQ,IAAaT,GAAqBM,QACpCO,EAAa,wBACR,CAAA,GAAIJ,GAAYT,GAAqBK,cAG1C,MAAO,EAFPQ,GAAa,0BAIf,KACF,KAAKb,IAAqBO,UACxBM,EAAaJ,IAAaT,GAAqBM,QAC3C,oBAAsB,yBAC1B,MACF,KAAKN,IAAqBM,QACxBO,EAAaJ,IAAaT,GAAqBO,UAC3C,oBAAsB,uBAC1B,MACF,KAAKP,IAAqBK,cACxBQ,EAAaJ,IAAaT,GAAqBM,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBO,kBA9UhC53E,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,g3CACVC,QAAF;ssLACE4F,SAAF,cACEpF,MACFC,MAAA,eACMoyB,OAAN,KACIs5C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACIr5C,kCAAJ,uCAEA5lB,WAAAk/D,IACAtsE,QAAA,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAlGAZ,KAAEuzB,EAAAA,eAFFvzB,SAAE4J,GAAFzI,aAAAnB,KAAA+J,EAAAA,UAAA7J,MAAA,gBANAF,SAAQ4J,GAARzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA2sE,QAkLA7sE,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAAA6J,EAAAA,OAAmC3J,MAAnC2e,EAAAA,4BAGAiuD,EAAAzrE,wHAhEA+nB,KAAAppB,KAAAuB,EAAAA,QAKAiyB,WAAAxzB,KAAAuB,EAAAA,QAKAmvB,gBAAQ1wB,KAARuB,EAAAA,QAMAkR,OAAAzS,KAAAuB,EAAAA,QAMAyF,SAAAhH,KAAAyB,EAAAA,SAGAsrE,sBAAA/sE,KAAAyB,EAAAA,SAGAjF,QAAAwD,KAAAuB,EAAAA,QAIAsvB,gBAAA7wB,KAAAsB,EAAAA,UAAApB,MAAA,WAGA8sE,SAAAhtE,KAAAsB,EAAAA,UAAApB,MAAAuzB,MAGA1D,UAAA/vB,KAAAuB,EAAAA,QAGArE,WAAA8C,KAAAuB,EAAAA,QA0CA0rE,gBAAGjtE,KAAHuB,EAAAA,SA8BAurE,OC5NaI,IACXv/D,QAAS8yD,EAAAA,cACT7yD,YAAaqP,EAAAA,WAAW,WAAM,MAAAkwD,MAC9Bv9C,OAAO,8EArBT,MAmCkD1sB,GAAlDiqE,EAAAlrE,kBANAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,8HAEVuN,WAAYw/D,IACZrsE,MAAOusE,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBArtE,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DC,SAAUuiE,GAAaK,GAA8BhjE,IACrDQ,cAAemiE,GAAaK,QAnB9BG,KCgDAC,GAAA,WACE,QAAFA,GAEWz9C,EAEAle,EAEA4mC,sBAJA19C,KAAXg1B,OAAWA,EAEAh1B,KAAX8W,SAAWA,EAEA9W,KAAX09C,YAAWA,EAvDX,MAAA+0B,MA6DAC,GAAA,WACE,QAAFA,GAAqBhuE,GAAA1E,KAArB0E,YAAqBA,EA9DrB,MAAAguE,MAiEaC,GACT3rE,EAAWC,EAAmBoG,EAAcqlE,KAAe,WAEzDE,IAAwB,8CApE9B,sBA0EA1tE,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mCACVU,MAAOC,MAAS,uBA5ElB6sE,iCAAA,sBAoFA3tE,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,gDACVU,MAAOC,MAAS,8BAtFlB8sE,oBAuNE,QAAFC,GAAqBruE,EACP+nE,EACA78B,EAC+CliC,GAH3D,GAAF7N,GAIIsH,EAJJC,KAAApH,KAIU0E,IAJV1E,WAAqBH,GAArB6E,YAAqBA,EA/FrB7E,EAAA8N,gBAcA9N,EAAA2nD,WAAuB,EAGvB3nD,EAAAmzE,oBAAgC,EAsBhCnzE,EAAAsgC,WAAiC,EAuBjCtgC,EAAAozE,aAAmC,EAUnCpzE,EAAAqzE,YAAkC,EAGlCrzE,EAAAw8B,SAAsB,GAAIxwB,GAAAA,QAG1BhM,EAAAy8B,QAAqB,GAAIzwB,GAAAA,QAIzBhM,EAAAsmC,gBAAM,GAAIp+B,GAAAA,aAGVlI,EAAAszE,UAA6D,GAAIprE,GAAAA,aAGjElI,EAAA26C,QAA2D,GAAIzyC,GAAAA,aAa3DlI,EAAKuzE,oBAELvzE,EAAKwzE,YAAc,GAAIC,IAAezzE,EAAM4sE,EAAQ/nE,EAAakrC,GACjE/vC,EAAKwzE,YAAY7lE,mBAAmB9I,EAAY9B,eAE5C8K,IACF7N,EAAK8N,cACHE,YAAaH,EAAcI,gBAC3BC,UAAWL,EAAcK,UACzBH,qBAAsBF,EAAcE,yBAtO5C,MAkH6BxF,GAA7B2qE,EAAA5rE,GAeE3F,OAAFC,eAAMsxE,EAANhyE,UAAA,sBAAE,WACE,MAAOf,MAAKoC,UAAYpC,KAAK6hC,+CAoBjCrgC,OAAAC,eAAMsxE,EAANhyE,UAAA,gBAAA,WAA4B,MAAOf,MAAKmgC,eACtC,SAAaz+B,GACX1B,KAAKmgC,UAAY93B,EAAAA,sBAAsB3G,GACvC1B,KAAKmmC,gBAAgBpkC,MACnBizB,OAAQh1B,KACR09C,aAAa,EACb5mC,SAAUpV,qCAOhBF,OAAAC,eAAMsxE,EAANhyE,UAAA,wBACI,WAAsB+N,IAAf9O,KAAKu5B,OACRv5B,KAAKu5B,OACLv5B,KAAK0E,YAAY9B,cAAc2O,iBAErC,SAAU7P,GAAc1B,KAAKu5B,OAAS73B,mCAUxCF,OAAAC,eAAMsxE,EAANhyE,UAAA,kBAAA,WAA8B,MAAOf,MAAKizE,aAAejzE,KAAKgzE,wBAC5D,SAAetxE,GACb1B,KAAKizE,YAAc5qE,EAAAA,sBAAsB3G,oCAQ7CF,OAAAC,eAAMsxE,EAANhyE,UAAA,iBAAA,WAA6B,MAAOf,MAAKkzE,gBACvC,SAAcxxE,GACZ1B,KAAKkzE,WAAa7qE,EAAAA,sBAAsB3G,oCAqB1CF,OAAFC,eAAMsxE,EAANhyE,UAAA,oBAAE,WACE,MAAOf,MAAKuzE,WAAavzE,KAAK8W,SAASmjB,WAAa,sCAuBtD84C,EAAFhyE,UAAAqyE,kBAAE,WAEE,IAAmB,GAAvB7qB,GAAA,EAAuBirB,EAAvBZ,GAAuBrqB,EAAvBirB,EAAAhxE,OAAuB+lD,IAAvB,CAAS,GAAMkrB,GAAfD,EAAAjrB,EACM,IAAIvoD,KAAK0E,YAAY9B,cAAcgoE,aAAa6I,IAC9CzzE,KAAK0E,YAAY9B,cAAc8wE,QAAQ71D,gBAAkB41D,EAEzD,WADCzzE,MAAK0E,YAAwC,cAAE8D,UAAUG,IAAI8qE,GAIjEzzE,KAAK0E,YAAwC,cAAE8D,UAAUG,IAAI,sBAGhEoqE,EAAFhyE,UAAAC,YAAE,WACEhB,KAAKmzE,UAAUpxE,MAAM4xE,KAAM3zE,OAC3BA,KAAKqzE,YAAYO,wBAInBb,EAAFhyE,UAAAw5C,OAAE,WACEv6C,KAAKmgC,WAAY,EACjBngC,KAAKmmC,gBAAgBpkC,MACnBizB,OAAQh1B,KACR09C,aAAa,EACb5mC,UAAU,KAKdi8D,EAAFhyE,UAAA05C,SAAE,WACEz6C,KAAKmgC,WAAY,EACjBngC,KAAKmmC,gBAAgBpkC,MACnBizB,OAAQh1B,KACR09C,aAAa,EACb5mC,UAAU,KAKdi8D,EAAFhyE,UAAA8yE,qBAAE,WACE7zE,KAAKmgC,WAAY,EAEjBngC,KAAKmmC,gBAAgBpkC,MACnBizB,OAAQh1B,KACR09C,aAAa,EACb5mC,UAAU,KAKdi8D,EAAFhyE,UAAA+yE,eAAE,SAAep2B,GASb,WATJ,KAAAA,IAAiBA,GAAjB,GACI19C,KAAKmgC,WAAangC,KAAK8W,SAEvB9W,KAAKmmC,gBAAgBpkC,MACnBizB,OAAQh1B,KACR09C,YAANA,EACM5mC,SAAU9W,KAAKmgC,YAGVngC,KAAK8W,UAIdi8D,EAAFhyE,UAAA0B,MAAE,WACOzC,KAAKwnD,YACRxnD,KAAK0E,YAAY9B,cAAcH,QAC/BzC,KAAKq8B,SAASzvB,MAAM+mE,KAAM3zE,QAE5BA,KAAKwnD,WAAY,GASnBurB,EAAFhyE,UAAA0H,OAAE,WACMzI,KAAK+zE,WACP/zE,KAAKw6C,QAAQz4C,MAAM4xE,KAAM3zE,QAK7B+yE,EAAFhyE,UAAAgK,aAAE,SAAajB,GAEP9J,KAAKoC,WAIT0H,EAAMsE,iBACNtE,EAAMqsB,oBAIR48C,EAAFhyE,UAAAuiB,eAAE,SAAexZ,GACb,IAAI9J,KAAKoC,SAIT,OAAQ0H,EAAMyZ,SACZ,IAAKywD,GAAAA,OACL,IAAKC,GAAAA,UAEHj0E,KAAKyI,SAELqB,EAAMsE,gBACN,MACF,KAAKyV,GAAAA,MAEC7jB,KAAKuzE,YACPvzE,KAAK8zE,gBAAe,GAItBhqE,EAAMsE,mBAKZ2kE,EAAFhyE,UAAAmzE,MAAE,WACEl0E,KAAKwnD,WAAY,EACjBxnD,KAAKs8B,QAAQ1vB,MAAM+mE,KAAM3zE,uBAvQ7BkF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yDACVG,QAAS,QAAS,WAAY,iBAC9B2F,SAAU,UACVpF,MACEC,MAAS,WACTu7C,kBAAmB,uBACnBhvC,KAAQ,SACR4hE,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7B9uB,kBAAmB,mBACnBh3C,uBAAwB,sBACxB05C,uBAAwB,eACxBt5C,UAAW,uBACXovB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDAhGd74B,KAAE6N,EAAAA,aAKF7N,KAAE8H,EAAAA,SATF9H,KAAQ2J,EAAAA,WA+MR3J,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2B6J,EAAAA,OAA3B3J,MAAkC4J,2BA9ElCulE,SAAArvE,KAAG8tB,EAAAA,aAAH5tB,MAAgBytE,MAGhB2B,eAAAtvE,KAAG8tB,EAAAA,aAAH5tB,MAAgB0tE,MAGhB2B,aAAAvvE,KAAG8tB,EAAAA,aAAH5tB,MAAgB+c,EAAAA,WAAW,WAAM,MAAAuyD,SAGjC59D,WAAA5R,KAAGuB,EAAAA,QAaH/E,QAAAwD,KAAGuB,EAAAA,QAeH8sE,aAAAruE,KAAGuB,EAAAA,QAUHstE,YAAA7uE,KAAGuB,EAAAA,QAcH0/B,kBAAAjhC,KAAGyB,EAAAA,SAIHwsE,YAAAjuE,KAAGyB,EAAAA,SAGH6zC,UAAAt1C,KAAGyB,EAAAA,UAhNHosE,GAkH6BJ,kBA4Q3B,QAAF+B,GAAwBC,GAAA30E,KAAxB20E,YAAwBA,EA9XxB,MAkYED,GAAF3zE,UAAAgK,aAAE,WACM/K,KAAK20E,YAAYZ,WACnB/zE,KAAK20E,YAAYlsE,yBAdvBvD,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,kBACVU,MACEC,MAAS,yCACT4I,UAAW,0DAxQf1J,KAAa6tE,MAlHb2B,KCiBaE,GACT,GAAIj1D,GAAAA,eAAuC,6BCwB/Ck1D,GAAA,WACE,QAAFA,GAAqB19B,EACAC,EACAC,EAEAC,GAJAt3C,KAArBm3C,0BAAqBA,EACAn3C,KAArBo3C,YAAqBA,EACAp3C,KAArBq3C,iBAAqBA,EAEAr3C,KAArBs3C,UAAqBA,EA/CrB,MAAAu9B,MAiDaC,GAAwBt9B,EAAgBq9B,IAIjDngD,GAAe,EAGnBqgD,GAAA,WACE,QAAFA,GAEW//C,EAEAtzB,GAFA1B,KAAXg1B,OAAWA,EAEAh1B,KAAX0B,MAAWA,EA7DX,MAAAqzE,qBAoUE,QAAFC,GAAwBtwE,EACFvD,EACY8B,EACRm0C,EACAC,EACZF,EAE2BG,GAPvC,GAAFz3C,GAQIsH,EARJC,KAAApH,KAQUm3C,EAA2BC,EAAaC,EAAkBC,IARpEt3C,WAAwBH,GAAxB6E,YAAwBA,EACF7E,EAAtBsB,mBAAsBA,EACYtB,EAAlCoD,KAAkCA,EAKOpD,EAAzCy3C,UAAyCA,EArOzCz3C,EAAAi5C,YAAiC,gBAGjCj5C,EAAAo1E,oBAA+C,KAG/Cp1E,EAAAq1E,SAAkD,GAAI/pD,SAGtDtrB,EAAAs1E,oBAAgC3tE,EAAAA,aAAaC,MAqB7C5H,EAAAo4C,KAAiB,iBAAiBvjB,KAMlC70B,EAAAu1E,UAAc,EAMdv1E,EAAAw1E,cAAiC,KAMjCx1E,EAAAw4C,WAAe,aAGfx4C,EAAAu4C,UAAoC,aAqBpCv4C,EAAAg4C,WAA+B,EAgB/Bh4C,EAAAi4C,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCtDn4C,EAAA41B,WAAiC,EA2CjC51B,EAAAygC,WAAiC,EAGjCzgC,EAAAy1E,gBAA0E,aAc1Ez1E,EAAAozE,aAAmC,EA8BnCpzE,EAAAqM,OAAM,GAAInE,GAAAA,aAOVlI,EAAAumC,YAAsD,GAAIr+B,GAAAA,aAclDlI,EAAKy3C,YACPz3C,EAAKy3C,UAAUiC,cAAgB15C,KAZrC,MAlOiCuI,GAAjC4sE,EAAA7tE,GA8DE3F,OAAFC,eAAMuzE,EAANj0E,UAAA,gBAAE,WACE,MAAOf,MAAKg6C,SAAWh6C,KAAK05C,gBAAgB5iC,SAAW9W,KAAK05C,gBAAgB5iC,SAAS,oCAIvFtV,OAAFC,eAAMuzE,EAANj0E,UAAA,YAAE,WAA4B,MAAOf,MAAKm7C,MAAQ,KAAO,2CAOzD35C,OAAAC,eAAMuzE,EAANj0E,UAAA,gBAAA,WAA4B,MAAOf,MAAK63C,eACtC,SAAan2C,GACX1B,KAAK63C,UAAYxvC,EAAAA,sBAAsB3G,oCAU3CF,OAAAC,eAAMuzE,EAANj0E,UAAA,mBAAA,WAAqD,MAAOf,MAAK83C,kBAC/D,SAAgBthB,GACdx2B,KAAK83C,aAAethB,EAChBx2B,KAAK05C,iBAEP15C,KAAK65C,wDAUXr4C,OAAAC,eAAMuzE,EAANj0E,UAAA,aAAA,WAAqB,MAAOf,MAAKu5B,YAC/B,SAAU73B,GACR1B,KAAKs2B,WAAW50B,GAChB1B,KAAKu5B,OAAS73B,mCAQhBF,OAAFC,eAAMuzE,EAANj0E,UAAA,UAAE,WACE,MAAOf,MAAKu1E,WAAav1E,KAAKu1E,WAAWjnD,GAAKtuB,KAAKi4C,sCAQvDz2C,OAAAC,eAAMuzE,EAANj0E,UAAA,gBAAA,WAA4B,MAAOf,MAAKy1B,eACtC,SAAa/zB,GACX1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,GACvC1B,KAAKy5C,aAAa7sC,wCAStBpL,OAAAC,eAAMuzE,EAANj0E,UAAA,8BACI,MAAOf,MAAKu1E,WAAav1E,KAAKu1E,WAAW/1B,YAAcx/C,KAAKw5C,kBAE9D,SAAgB93C,GACd1B,KAAKw5C,aAAe93C,EACpB1B,KAAKy5C,aAAa7sC,wCAKpBpL,OAAFC,eAAMuzE,EAANj0E,UAAA,eAAE,WACE,MAAOf,MAAKw1E,MAAMlkE,KAAK,SAAAqiE,GAAQ,MAAAA,GAAKnsB,aACjCxnD,KAAKu1E,YAAcv1E,KAAKu1E,WAAW18B,yCAOxCr3C,OAAFC,eAAMuzE,EAANj0E,UAAA,aAAE,WACE,QAASf,KAAKu1E,YAAcv1E,KAAKu1E,WAAWp6B,QAAgC,IAAtBn7C,KAAKw1E,MAAMhzE,wCAOnEhB,OAAFC,eAAMuzE,EAANj0E,UAAA,wBAAE,WAAkC,OAAQf,KAAKm7C,OAASn7C,KAAK64C,yCAO/Dr3C,OAAAC,eAAMuzE,EAANj0E,UAAA,gBAAA,WAA4B,MAAOf,MAAKs3C,YAAct3C,KAAKs3C,UAAUl1C,SAAWpC,KAAKsgC,eACnF,SAAa5+B,GAAkB1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,oCAWxEF,OAAAC,eAAMuzE,EAANj0E,UAAA,kBAAA,WAA8B,MAAOf,MAAKizE,iBACxC,SAAevxE,GAAf,GAAF7B,GAAAG,IACIA,MAAKizE,YAAc5qE,EAAAA,sBAAsB3G,GACrC1B,KAAKw1E,OACPx1E,KAAKw1E,MAAMpsE,QAAQ,SAAAuqE,GAAQ,MAAAA,GAAKX,mBAAqBnzE,EAAKozE,+CAMhEzxE,OAAAC,eAAMuzE,EAANj0E,UAAA,gBAAA,SAAeW,GACX1B,KAAKq1E,cAAgB3zE,EACrB1B,KAAKo1E,UAAY1zE,mCAInBF,OAAFC,eAAMuzE,EAANj0E,UAAA,4BAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKw1E,MAAMxrE,IAAI,SAAA2pE,GAAQ,MAAAA,GAAKxtC,oDAI9C3kC,OAAFC,eAAMuzE,EAANj0E,UAAA,wBAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKw1E,MAAMxrE,IAAI,SAAA2pE,GAAQ,MAAAA,GAAKt3C,6CAI9C76B,OAAFC,eAAMuzE,EAANj0E,UAAA,uBAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKw1E,MAAMxrE,IAAI,SAAA2pE,GAAQ,MAAAA,GAAKr3C,4CAI9C96B,OAAFC,eAAMuzE,EAANj0E,UAAA,yBAAE,WACE,MAAOL,GAAAA,MAAXqJ,UAAA,GAAoB/J,KAAKw1E,MAAMxrE,IAAI,SAAA2pE,GAAQ,MAAAA,GAAKR,8CA+B9C6B,EAAFj0E,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKC,YAAc,GAAIC,GAAAA,gBAAyBF,KAAKw1E,OAClDpvB,WACA/I,0BACAj9C,0BAA0BJ,KAAKiD,KAAOjD,KAAKiD,KAAKvB,MAAQ,OAI3D1B,KAAKm1E,oBAAsBn1E,KAAKC,YAAYq9C,OAAOz8C,UAAU,WAC3DhB,EAAKu1E,WAAa,EAClBrvD,WAAW,WAAM,MAAAlmB,GAAKu1E,UAAYv1E,EAAKw1E,eAAiB,MAI1Dr1E,KAAKy1E,oBAAsBz1E,KAAKw1E,MAAM9rE,QAAQ0C,KAAKqV,EAAAA,UAAU,OAAO5gB,UAAU,WAC5EhB,EAAK61E,cAGL71E,EAAKg6C,uBAGLh6C,EAAK81E,kBAGL91E,EAAK+1E,gCAEL/1E,EAAK45C,aAAa7sC,UAItBooE,EAAFj0E,UAAA+f,SAAE,WACE9gB,KAAK05C,gBAAkB,GAAIK,GAAAA,eAAwB/5C,KAAKg6C,aAAUlrC,IAAW,GAC7E9O,KAAKy5C,aAAa7sC,QAGpBooE,EAAFj0E,UAAAwkC,UAAE,WACMvlC,KAAKs3C,WAIPt3C,KAAK26C,oBAITq6B,EAAFj0E,UAAAC,YAAE,WACEhB,KAAKm1E,oBAAoBl0E,cAErBjB,KAAKy1E,qBACPz1E,KAAKy1E,oBAAoBx0E,cAGvBjB,KAAK61E,yBACP71E,KAAK61E,wBAAwB50E,cAG/BjB,KAAK81E,qBACL91E,KAAKy5C,aAAa5sC,YAKpBmoE,EAAFj0E,UAAAg1E,cAAE,SAAcC,GACZh2E,KAAKu1E,WAAaS,GAOpBhB,EAAFj0E,UAAAogD,kBAAE,SAAkBC,GAAiBphD,KAAKqhD,iBAAmBD,EAAI7F,KAAK,MAGpEy5B,EAAFj0E,UAAAu1B,WAAE,SAAW50B,GACL1B,KAAKw1E,OACPx1E,KAAKk7C,qBAAqBx5C,GAAO,IAKrCszE,EAAFj0E,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAKo4C,UAAY5hB,GAInBw+C,EAAFj0E,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKq4C,WAAa7hB,GAIpBw+C,EAAFj0E,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,EAChB32B,KAAK0E,YAAY9B,cAAcR,SAAWu0B,EAC1C32B,KAAKy5C,aAAa7sC,QAOpBooE,EAAFj0E,UAAAugD,iBAAE,WAAqBthD,KAAKyC,SAM1BuyE,EAAFj0E,UAAA0B,MAAE,WAGMzC,KAAKu1E,YAAcv1E,KAAKu1E,WAAW18B,UAE5B74C,KAAKw1E,MAAMhzE,OAAS,GAC7BxC,KAAKC,YAAYwjB,qBACjBzjB,KAAKy5C,aAAa7sC,SAElB5M,KAAKi2E,cACLj2E,KAAKy5C,aAAa7sC,UAKtBooE,EAAFj0E,UAAAk1E,YAAE,WACMj2E,KAAKu1E,YACPv1E,KAAKu1E,WAAW9yE,SAOpBuyE,EAAFj0E,UAAAk1D,SAAE,SAASnsD,GACP,GAAM87D,GAAS97D,EAA2B,MAGtCA,GAAMyZ,UAAY0wD,EAAAA,WAAaj0E,KAAKk2E,cAActQ,IACpD5lE,KAAKC,YAAY0jB,oBACjB7Z,EAAMsE,kBACGw3D,GAAUA,EAAOp9D,UAAU2I,SAAS,cAC7CnR,KAAKC,YAAY6jB,UAAUha,GAC3B9J,KAAKy5C,aAAa7sC,SAQZooE,EAAZj0E,UAAA40E,gBAAE,WAEE31E,KAAKo1E,UAAYp1E,KAAKq1E,gBAAwC,IAAtBr1E,KAAKw1E,MAAMhzE,QAAgB,EAAI,IAS/DwyE,EAAZj0E,UAAAo1E,kBAAE,SAA4BxC,GAC1B,GAAIyC,GAAoBp2E,KAAKw1E,MAAMrzE,UAAU4b,QAAQ41D,EACjD3zE,MAAK2B,cAAcy0E,KACjBzC,EAAKnsB,YAEH4uB,EAAYp2E,KAAKw1E,MAAMhzE,OAAS,EAClCxC,KAAKC,YAAY4B,cAAcu0E,GACtBA,EAAY,GAAK,GAC1Bp2E,KAAKC,YAAY4B,cAAcu0E,EAAY,IAG3Cp2E,KAAKC,YAAY87C,kBAAoBq6B,IACvCp2E,KAAKi1E,oBAAsBmB,KASvBpB,EAAZj0E,UAAA60E,8BAAE,WACE,GAAIS,GAAar2E,KAAKw1E,KAEtB,IAAgC,MAA5Bx1E,KAAKi1E,qBAA+BoB,EAAW7zE,OAAS,GAAKxC,KAAK64C,QAAS,CAE7E,GAAMy9B,GAAgB7yE,KAAKE,IAAI3D,KAAKi1E,oBAAqBoB,EAAW7zE,OAAS,EAC7ExC,MAAKC,YAAY4B,cAAcy0E,EAC/B,IAAIC,GAAYv2E,KAAKC,YAAY47C,UAE7B06B,IACFA,EAAU9zE,QAKdzC,KAAKi1E,oBAAsB,MASrBD,EAAVj0E,UAAAY,cAAA,SAAwBM,GACpB,MAAOA,IAAS,GAAKA,EAAQjC,KAAKw1E,MAAMhzE,QAGlCwyE,EAAVj0E,UAAAm1E,cAAA,SAAwBnqE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQ87B,SAAShqB,cAA2B,CAEzD,OADS,EACKnc,MAGhB,OAAO,GAGTszE,EAAFj0E,UAAAm6C,qBAAE,SAAqBx5C,EAAYg8C,GAAjC,GAAF79C,GAAAG,IAII,QAJJ,KAAA09C,IAAmCA,GAAnC,GACI19C,KAAKw2E,kBACLx2E,KAAKw1E,MAAMpsE,QAAQ,SAAAuqE,GAAQ,MAAAA,GAAKl5B,aAE5BzxB,MAAMC,QAAQvnB,GAChBA,EAAM0H,QAAQ,SAAAwzC,GAAgB,MAAA/8C,GAAKg9C,aAAaD,EAAcc,KAC9D19C,KAAK88C,kBACA,CACL,GAAM25B,GAAoBz2E,KAAK68C,aAAan7C,EAAOg8C,EAI/C+4B,IACE/4B,GACF19C,KAAKC,YAAY4B,cAAc40E,KAU/BzB,EAAVj0E,UAAA87C,aAAA,SAAuBn7C,EAAYg8C,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAM+4B,GAAoBz2E,KAAKw1E,MAAM/oE,KAAK,SAAAknE,GACxC,MAAqB,OAAdA,EAAKjyE,OAAiB7B,EAAKi4C,aAAa67B,EAAKjyE,MAAQA,IAQ9D,OALI+0E,KACF/4B,EAAc+4B,EAAkB5C,uBAAyB4C,EAAkBl8B,SAC3Ev6C,KAAK05C,gBAAgBa,OAAOk8B,IAGvBA,GAGDzB,EAAVj0E,UAAA84C,0CAGI5wC,SAAQC,UAAUC,KAAK,YACjBtJ,EAAKy3C,WAAaz3C,EAAK05B,UACzB15B,EAAKq7C,qBAAqBr7C,EAAKy3C,UAAYz3C,EAAKy3C,UAAU51C,MAAQ7B,EAAK05B,QAAQ,GAC/E15B,EAAK45C,aAAa7sC,WAShBooE,EAAVj0E,UAAAy1E,gBAAA,SAA0BE,GACtB12E,KAAK05C,gBAAgB9Q,QACrB5oC,KAAKw1E,MAAMpsE,QAAQ,SAAAuqE,GACbA,IAAS+C,GACX/C,EAAKl5B,aAGTz6C,KAAKy5C,aAAa7sC,QAOZooE,EAAVj0E,UAAA+7C,iCACQ98C,MAAK63C,YACP73C,KAAK05C,gBAAgB9Q,QAErB5oC,KAAKw1E,MAAMpsE,QAAQ,SAAAuqE,GACbA,EAAK78D,UACPjX,EAAK65C,gBAAgBa,OAAOo5B,KAGhC3zE,KAAKy5C,aAAa7sC,SAKdooE,EAAVj0E,UAAA+8C,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADEj1B,MAAMC,QAAQjpB,KAAK8W,UACP9W,KAAK8W,SAAS9M,IAAI,SAAA2pE,GAAQ,MAAAA,GAAKjyE,QAE/B1B,KAAK8W,SAAW9W,KAAK8W,SAASpV,MAAQs8C,EAEtDh+C,KAAKu5B,OAAS0kB,EACdj+C,KAAKkM,OAAOnK,KAAK,GAAIgzE,IAAkB/0E,KAAMi+C,IAC7Cj+C,KAAKomC,YAAYrkC,KAAKk8C,GACtBj+C,KAAKo4C,UAAU6F,GACfj+C,KAAKmB,mBAAmBC,gBAI1B4zE,EAAFj0E,UAAAmzE,MAAE,WAAA,GAAFr0E,GAAAG,IACIA,MAAKC,YAAY4B,eAAe,GAC3B7B,KAAKoC,WACJpC,KAAKu1E,WAKPxvD,WAAW,WACJlmB,EAAKg5C,SACRh5C,EAAK82E,mBAKT32E,KAAK22E,mBAMX3B,EAAFj0E,UAAA41E,eAAE,WACE32E,KAAKq4C,aACLr4C,KAAKmB,mBAAmBC,eACxBpB,KAAKy5C,aAAa7sC,QAGZooE,EAAVj0E,UAAA20E,uBACI11E,KAAK81E,qBACL91E,KAAK42E,sBACL52E,KAAK62E,0BACL72E,KAAK82E,yBAIC9B,EAAVj0E,UAAA+0E,8BACQ91E,KAAK+2E,yBACP/2E,KAAK+2E,uBAAuB91E,cAC5BjB,KAAK+2E,uBAAyB,MAG5B/2E,KAAKg3E,wBACPh3E,KAAKg3E,sBAAsB/1E,cAC3BjB,KAAKg3E,sBAAwB,MAG3Bh3E,KAAKi3E,6BACPj3E,KAAKi3E,2BAA2Bh2E,cAChCjB,KAAKi3E,2BAA6B,OAK9BjC,EAAVj0E,UAAA81E,6CACI72E,MAAKi3E,2BAA6Bj3E,KAAKk3E,qBAAqBr2E,UAAU,SAAAiJ,GACpEA,EAAMkrB,OAAOle,SACTjX,EAAK65C,gBAAgBa,OAAOzwC,EAAMkrB,QAClCn1B,EAAK65C,gBAAgBe,SAAS3wC,EAAMkrB,QAGnCn1B,EAAKm6C,UACRn6C,EAAK21E,MAAMpsE,QAAQ,SAAAuqE,IACZ9zE,EAAK65C,gBAAgBmE,WAAW81B,IAASA,EAAK78D,UACjD68D,EAAKl5B,aAKP3wC,EAAM4zC,aACR79C,EAAKi+C,uBAMHk3B,EAAVj0E,UAAA61E,yCACI52E,MAAK+2E,uBAAyB/2E,KAAKm3E,iBAAiBt2E,UAAU,SAAAiJ,GAC5D,GAAIssE,GAAoBv2E,EAAK21E,MAAMrzE,UAAU4b,QAAQjU,EAAM6pE,KAEvD9zE,GAAK8B,cAAcy0E,IACrBv2E,EAAKI,YAAYK,sBAAsB81E,GAEzCv2E,EAAK45C,aAAa7sC,SAGpB5M,KAAKg3E,sBAAwBh3E,KAAKo3E,gBAAgBv2E,UAAU,WAC1DhB,EAAKq0E,QACLr0E,EAAK45C,aAAa7sC,UAIdooE,EAAVj0E,UAAA+1E,2CACI92E,MAAK61E,wBAA0B71E,KAAKq3E,kBAAkBx2E,UAAU,SAAAiJ,GAC9DjK,EAAKs2E,kBAAkBrsE,EAAM6pE,wBAnqBnCzuE,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,qEACV6F,SAAU,cACVpF,MACFw7C,kBAAyB,YACnBO,0BAAN,2BACIJ,uBAAJ,sBACIlzC,uBAAJ,sBACImzC,sBAAJ,aACIE,8BAAJ,WACIlvC,cAAJ,OACI2kE,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClC/4C,0BAAJ,kBACIz4B,MAAJ,gBACI83B,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACI5F,OAAQ,QAEZxlB,YAAAC,QAAAsvC,GAAArvC,YAAAkiE,IACAzvE,QAAA,mvEACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAxEAZ,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAJApB,KAAEm9C,EAAAA,OAAFh8C,aAAAnB,KAAAoB,EAAAA,aAPApB,KAAQo9C,EAAAA,mBAARj8C,aAAAnB,KAAAoB,EAAAA,aAsBApB,KAA6DoT,KAA7DpT,KAA8Bs9C,EAAAA,UAA9Bn8C,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAqxC,EAAAA,UAAAy+B,EAAkDzuE,6EAuIlDu8C,cAAA59C,KAAAuB,EAAAA,QAGA/E,QAAAwD,KAAAuB,EAAAA,QAYAiyB,WAAAxzB,KAAAuB,EAAAA,QAeA+4C,cAAGt6C,KAAHuB,EAAAA,QAoBArE,WAAA8C,KAAGuB,EAAAA,QAYH6uE,kBAAApwE,KAAAuB,EAAAA,MAAArB,MAAA,sBAkCAmuE,aAAAruE,KAAAuB,EAAAA,QAMApE,WAAA6C,KAAAuB,EAAAA,QAMAyF,SAAAhH,KAAAyB,EAAAA,SAUAy/B,cAAAlhC,KAAAyB,EAAAA,SA2BA6uE,QAAAtwE,KAAAsO,EAAAA,gBAAApO,MAAA2tE,OAWAiC,OC1SItgD,GAAe,gBAsEjB,QAAF+iD,GACc/yE,EACiC6iC,GADjCvnC,KAAd0E,YAAcA,EACiC1E,KAA/CunC,gBAA+CA,EAnD/CvnC,KAAA64C,SAAqB,EAkBrB74C,KAAA03E,YAAwB,EASxB13E,KAAA23E,kBAAgC33E,KAAKunC,gBAAgBowC,kBAIrD33E,KAAA43E,QAA6C,GAAI7vE,GAAAA,aAOjD/H,KAAAw/C,YAAiC,GAGjCx/C,KAAAsuB,GAAwB,uBAAuBoG,KAW3C10B,KAAK+1B,cAAgB/1B,KAAK0E,YAA6C,cAjG3E,MAkDAlD,QAAAC,eAAMg2E,EAAN12E,UAAA,gBAAA,SAAeW,GACPA,IACF1B,KAAK63E,UAAYn2E,EACjB1B,KAAK63E,UAAU9B,cAAc/1E,wCAQnCwB,OAAAC,eAAMg2E,EAAN12E,UAAA,iBAAA,WAA6B,MAAOf,MAAK03E,gBACvC,SAAch2E,GAAkB1B,KAAK03E,WAAarvE,EAAAA,sBAAsB3G,oCA2BxEF,OAAFC,eAAMg2E,EAAN12E,UAAA,aAAE,WAAuB,OAAQf,KAAK+1B,cAAcr0B,uCAYlD+1E,EAAF12E,UAAAk1D,SAAE,SAASnsD,GACP9J,KAAK83E,aAAahuE,IAIpB2tE,EAAF12E,UAAAmzE,MAAE,WACMl0E,KAAK+3E,WACP/3E,KAAK83E,eAEP93E,KAAK64C,SAAU,EAEV74C,KAAK63E,UAAUh/B,SAClB74C,KAAK63E,UAAU3D,QAEjBl0E,KAAK63E,UAAUp+B,aAAa7sC,QAG9B6qE,EAAF12E,UAAAi3E,OAAE,WACEh4E,KAAK64C,SAAU,EACf74C,KAAK63E,UAAUp+B,aAAa7sC,QAI9B6qE,EAAF12E,UAAA+2E,aAAE,SAAahuE,IACN9J,KAAK+1B,cAAcr0B,OAAWoI,GACjC9J,KAAK63E,UAAU5hB,SAASnsD,KAErBA,GAAS9J,KAAK23E,kBAAkB55D,QAAQjU,EAAMyZ,UAAY,KAC7DvjB,KAAK43E,QAAQ71E,MAAOuiB,MAAOtkB,KAAK+1B,cAAer0B,MAAO1B,KAAK+1B,cAAcr0B,QAErEoI,GACFA,EAAMsE,mBAKZqpE,EAAF12E,UAAAuvD,SAAE,WAEEtwD,KAAK63E,UAAUp+B,aAAa7sC,QAI9B6qE,EAAF12E,UAAA0B,MAAE,WAAgBzC,KAAK+1B,cAActzB,wBAjHrCyC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yBACV8F,SAAU,gCACVpF,MACEC,MAAS,mCACTg4B,YAAa,mBACbD,SAAU,UACVD,UAAW,WACX2zB,UAAW,aACXr5B,OAAQ,KACR+1C,qBAAsB,+DA/B1BjpE,KAAmB6N,EAAAA,aAuFnB7N,SAAA4J,GAAAzI,aAAAnB,KAAK6J,EAAAA,OAAL3J,MAAYwvE,2BA/CZqD,WAAA/yE,KAAGuB,EAAAA,MAAHrB,MAAS,qBAWT2yE,YAAA7yE,KAAGuB,EAAAA,MAAHrB,MAAS,2BAWTuyE,oBAAAzyE,KAAGuB,EAAAA,MAAHrB,MAAS,mCAITwyE,UAAA1yE,KAAGyB,EAAAA,OAAHvB,MAAU,0BAQVo6C,cAAAt6C,KAAGuB,EAAAA,QAGH6nB,KAAAppB,KAAGuB,EAAAA,SAtFHgxE,KCgBMS,IACJlD,GACAjC,GACA0E,GACA/C,GACA7B,GACAC,IAUFqF,IACQR,mBAAoB/zD,EAAAA,oCAjC5B,sBAyBA1e,KAACgK,EAAAA,SAAD9J,OACEqK,QAASyoE,GACTroE,aAAcqoE,GACdtlE,WACE0F,IAEEzF,QAAS+hE,GACTwD,SAAQ,SAhCdC,KCiCAlR,GAAA,wBAcAnnE,KAAAuS,KAAsB,SAGtBvS,KAAA+oB,WAAmC,GAGnC/oB,KAAAmzB,aAA0B,EAG1BnzB,KAAAo1C,cAA2B,GAG3Bp1C,KAAA6lC,cAA2B,EAG3B7lC,KAAAogB,MAAmB,GAGnBpgB,KAAA2K,OAAoB,GASpB3K,KAAAmqE,SAA+B,OAS/BnqE,KAAAmT,KAAoB,KAMpBnT,KAAAs4E,gBAAoC,KAGpCt4E,KAAA61B,UAA8B,KAG9B71B,KAAAu4E,WAAwB,EAMxBv4E,KAAA8nE,mBAAgC,EArGhC,MAAAX,MCiBaqR,IAIXC,YAAavhE,EAAAA,QAAQ,eAKnBC,EAAAA,MAAM,QAAS9T,EAAAA,OAAQC,UAAW,OAAQyjB,QAAS,KACnD5P,EAAAA,MAAM,OAAQ9T,EAAAA,OAAQC,UAAW,oCAAqCyjB,QAAS,KAC/E5P,EAAAA,MAAM,OAAQ9T,EAAAA,OAAQC,UAAW,yBAA0ByjB,QAAS,KACpE1P,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,6DrBiE/B,QAAF8vD,GACY1iE,EACAi+B,EACAxhC,EAC8BsP,EAE/Bma,GANT,GAAF/qB,GAQIsH,EARJC,KAAApH,OAAAA,WACYH,GAAZ6E,YAAYA,EACA7E,EAAZ8iC,kBAAYA,EACA9iC,EAAZsB,mBAAYA,EAC8BtB,EAA1C4Q,UAA0CA,EAE/B5Q,EAAX+qB,QAAWA,EApBX/qB,EAAA64E,qCAAqE,KAGrE74E,EAAA84E,OAAsC,QAGtC94E,EAAA+nE,uBAA2B,GAAI7/D,GAAAA,aAG/BlI,EAAA0rE,gBAAmC,OAfnC,MAFwCnjE,GAAxCg/D,EAAAjgE,GAqCEigE,EAAFrmE,UAAAinB,sBAAE,SAAyBC,GAMvB,MALIjoB,MAAKooB,cAAcvG,eACrB+2D,IAGF54E,KAAK64E,gCACE74E,KAAKooB,cAAcJ,sBAAsBC,IAOlDm/C,EAAFrmE,UAAAsnB,qBAAE,SAAwBJ,GAMtB,MALIjoB,MAAKooB,cAAcvG,eACrB+2D,IAGF54E,KAAK64E,gCACE74E,KAAKooB,cAAcC,qBAAqBJ,IAIzCm/C,EAAVrmE,UAAAsiC,sBACSrjC,KAAKojC,aACRpjC,KAAKojC,WAAapjC,KAAK2iC,kBAAkBzV,OAAOltB,KAAK0E,YAAY9B,gBAM/D5C,KAAK4qB,QAAQ2tD,WACfv4E,KAAKojC,WAAWM,gCAKZ0jC,EAAVrmE,UAAAuiC,yBACI,GAAMw1C,GAAU94E,KAAK04E,oCAGjBI,IAAoC,kBAAlBA,GAAQr2E,OAC5Bq2E,EAAQr2E,QAGNzC,KAAKojC,YACPpjC,KAAKojC,WAAWa,WAKZmjC,EAAVrmE,UAAA83E,mDACQ74E,MAAKyQ,YACPzQ,KAAK04E,qCAAuC14E,KAAKyQ,UAAsC,cAGnFzQ,KAAK0E,YAAY9B,cAAcH,OAIjCwG,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAK6E,YAAY9B,cAAcH,YAMlE2kE,EAAFrmE,UAAAgxC,iBAAE,SAAiBjoC,GACO,UAAlBA,EAAM4Y,QACR1iB,KAAKqjC,aACsB,SAAlBv5B,EAAM4Y,SACf1iB,KAAKsjC,gBAGPtjC,KAAK4nE,uBAAuB7lE,KAAK+H,IAInCs9D,EAAFrmE,UAAAg4E,kBAAE,SAAkBjvE,GAChB9J,KAAK4nE,uBAAuB7lE,KAAK+H,IAInCs9D,EAAFrmE,UAAAknE,oBAAE,WACEjoE,KAAK24E,OAAS,OAId34E,KAAKmB,mBAAmBC,+BApJ5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU;uDACVC,QAAF,otCACEE,cAAFC,EAAAA,kBAAAC,mFAKEI,MACFC,MAAe,uBACT+hD,SAAN,KACIgf,aAAJ,OACI7kC,YAAJ,MACIvvB,cAAJ,eACI8uC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACIklB,iBAAJ,SACIC,uBAAJ,4BACIC,sBAAJ,kHAxDAhiE,KAAE+H,EAAAA,oBAmBF/H,SAAmB4J,GAAnBzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAwM,EAAAA,cAdA1M,KAAEiiE,MAeFC,EAAA7gE,6EA2CA6gE,uBCtDI1S,GAAW,EAKf2S,GAAA,WAsBE,QAAFA,GACYviD,EACDwiD,EACPC,EACSj5C,OAAb,KAAAA,IAAAA,EAAA,cAAwComC,KAJtC,IAAF70D,GAAAG,IACYA,MAAZ8kB,YAAYA,EACD9kB,KAAXsnE,mBAAWA,EAEEtnE,KAAbsuB,GAAaA,EArBbtuB,KAAA6lC,aAAsC7lC,KAAKsnE,mBAAmB18C,QAAQib,aAGtE7lC,KAAAwnE,WAAgC,GAAI37D,GAAAA,QAGpC7L,KAAAynE,aAAkC,GAAI57D,GAAAA,QAGtC7L,KAAA0nE,aAAkC,GAAI77D,GAAAA,QAMtC7L,KAAA2nE,iBAA+CngE,EAAAA,aAAaC,MASxD6/D,EAAmBxtB,IAAMxrB,EAGzBg5C,EAAmBM,uBAAuBx7D,KACxC6E,EAAAA,OAAO,SAAAnH,GAAS,MAAoB,SAApBA,EAAMwrD,WAA0C,UAAlBxrD,EAAM4Y,UACpD5N,EAAAA,KAAK,IAENjU,UAAU,WACThB,EAAK2nE,WAAW56D,OAChB/M,EAAK2nE,WAAW36D,aAIlBy6D,EAAmBM,uBAAuBx7D,KACxC6E,EAAAA,OAAO,SAAAnH,GAAS,MAAoB,SAApBA,EAAMwrD,WAA0C,SAAlBxrD,EAAM4Y,UACpD5N,EAAAA,KAAK,IACLjU,UAAU,WAAM,MAAAhB,GAAKilB,YAAYmB,YAEnCnB,EAAYoH,cAAcrrB,UAAU,WAClChB,EAAK6nE,aAAa96D,KAAK/M,EAAKgoE,SAC5BhoE,EAAK6nE,aAAa76D,WAClBhN,EAAK8nE,iBAAiB1mE,cACtBpB,EAAK4nE,aAAa76D,KAAK/M,EAAKgoE,SAC5BhoE,EAAK4nE,aAAa56D,WAClBhN,EAAKulE,kBAAiB,KACtBvlE,EAAKilB,YAAYmB,YAGnBnB,EAAYygD,gBACTn5D,KAAK6E,EAAAA,OAAO,SAAAnH,GAAS,MAAAA,GAAMyZ,UAAY4lB,EAAAA,SAAWtpC,EAAKgmC,gBACvDhlC,UAAU,WAAM,MAAAhB,GAAK0jC,UAEpBgkC,IAIFvnE,KAAK2nE,iBAAmBJ,EAAS1mE,UAAU,WACrChB,EAAKynE,mBAAmB18C,QAAQk9C,mBAClCjoE,EAAK0jC,WA5Ff,MAsGE8jC,GAAFtmE,UAAAwiC,MAAE,SAAMwkC,GAAN,GAAFloE,GAAAG,IACIA,MAAK6nE,QAAUE,EAGf/nE,KAAKsnE,mBAAmBM,uBAAuBx7D,KAC7C6E,EAAAA,OAAO,SAAAnH,GAAS,MAAoB,UAApBA,EAAMwrD,YACtBxgD,EAAAA,KAAK,IAENjU,UAAU,WACThB,EAAK6nE,aAAa96D,KAAKm7D,GACvBloE,EAAK6nE,aAAa76D,WAClBhN,EAAKilB,YAAYkjD,mBAGnBhoE,KAAKsnE,mBAAmBW,uBAM1BZ,EAAFtmE,UAAAmnE,UAAE,WACE,MAAOloE,MAAKwnE,WAAWphD,gBAMzBihD,EAAFtmE,UAAAokE,YAAE,WACE,MAAOnlE,MAAKynE,aAAarhD,gBAM3BihD,EAAFtmE,UAAAonE,YAAE,WACE,MAAOnoE,MAAK0nE,aAAathD,gBAM3BihD,EAAFtmE,UAAA2jC,cAAE,WACE,MAAO1kC,MAAK8kB,YAAY4f,iBAM1B2iC,EAAFtmE,UAAAwkE,cAAE,WACE,MAAOvlE,MAAK8kB,YAAYygD,iBAO1B8B,EAAFtmE,UAAAqnC,eAAE,SAAe/+B,GACb,GAAIigC,GAAWtpC,KAAKooE,sBAgBpB,OAdI/+D,KAAaA,EAAS8W,MAAQ9W,EAASyjB,OACzCzjB,EAAS8W,KAAOmpB,EAASnpB,KAAK9W,EAAS8W,MAAQmpB,EAASxc,MAAMzjB,EAASyjB,OAEvEwc,EAASvc,qBAGP1jB,IAAaA,EAAS2jB,KAAO3jB,EAAS4jB,QACxC5jB,EAAS2jB,IAAMsc,EAAStc,IAAI3jB,EAAS2jB,KAAOsc,EAASrc,OAAO5jB,EAAS4jB,QAErEqc,EAAS++B,mBAGXroE,KAAK8kB,YAAYsjB,iBAEVpoC,MAQTqnE,EAAFtmE,UAAAunE,WAAE,SAAWloD,EAAoBzV,GAG7B,WAHJ,KAAAyV,IAAaA,EAAb,QAAA,KAAAzV,IAAiCA,EAAjC,IACI3K,KAAKooE,uBAAuBhoD,MAAMA,GAAOzV,OAAOA,GAChD3K,KAAK8kB,YAAYsjB,iBACVpoC,MAIDqnE,EAAVtmE,UAAAqnE,gCACI,MAAOpoE,MAAK8kB,YAAYolB,YAAsD,kBA/LlFm9B,KCmCakB,GAAkB,GAAI5oD,GAAAA,eAAoB,iBAG1C6oD,GACT,GAAI7oD,GAAAA,eAAgC,8BAG3B8oD,GACT,GAAI9oD,GAAAA,eAAqC,8BAchC+oD,IACX71D,QAAS41D,GACTx4C,MAAO7C,EAAAA,SACP8C,WAAYy4C,iBAqCZ,QAAFlD,GACc77C,EACAE,EACY8+C,EACoCrhC,EACZD,EACZuhC,EACxBC,GAPZ,GAAFjpE,GAAAG,IACcA,MAAd4pB,SAAcA,EACA5pB,KAAd8pB,UAAcA,EACY9pB,KAA1B4oE,UAA0BA,EACoC5oE,KAA9DunC,gBAA8DA,EACZvnC,KAAlDsnC,gBAAkDA,EACZtnC,KAAtC6oE,cAAsCA,EACxB7oE,KAAd8oE,kBAAcA,EAnCd9oE,KAAA+oE,2BACA/oE,KAAAgpE,2BAAgD,GAAIn9D,GAAAA,QACpD7L,KAAAipE,sBAA2C,GAAIp9D,GAAAA,QAC/C7L,KAAAkpE,oBAAgC,GAAIr7C,KAqBpC7tB,KAAAmpE,eAA8CnwB,EAAAA,MAAY,WAAM,MAAAn5C,GAAKupE,YAAY5mE,OAC3E3C,EAAKwpE,gBACLxpE,EAAKwpE,gBAAgBj9D,KAAKqV,EAAAA,cAAU3S,OA/F1C,MA2EEtN,QAAFC,eAAMgkE,EAAN1kE,UAAA,mBAAE,WACE,MAAOf,MAAK6oE,cAAgB7oE,KAAK6oE,cAAcO,YAAcppE,KAAK+oE,yDAIpEvnE,OAAFC,eAAMgkE,EAAN1kE,UAAA,iBAAE,WACE,MAAOf,MAAK6oE,cAAgB7oE,KAAK6oE,cAAcX,UAAYloE,KAAKipE,uDAGlEznE,OAAFC,eAAMgkE,EAAN1kE,UAAA,uBAAE,WACE,GAAMopB,GAASnqB,KAAK6oE,aACpB,OAAO1+C,GAASA,EAAOk/C,gBAAkBrpE,KAAKgpE,4DA2BhDvD,EAAF1kE,UAAA2pB,KAAE,SAA0B4+C,EAClB/+C,GADR,GAAF1qB,GAAAG,IAKI,IAFAuqB,EAASg/C,EAAqBh/C,EAAQvqB,KAAKunC,iBAAmB,GAAI4/B,KAE9D58C,EAAO+D,IAAMtuB,KAAKwpE,cAAcj/C,EAAO+D,IACzC,KAAMnF,OAAM,mBAAmBoB,EAAO+D,GAA5C,kDAGI,IAAMvD,GAAa/qB,KAAK0rB,eAAenB,GACjCk/C,EAAkBzpE,KAAK0pE,uBAAuB3+C,EAAYR,GAC1Do/C,EAAY3pE,KAAK4pE,qBAA2BN,EACAG,EACA1+C,EACAR,EAWlD,OARKvqB,MAAKopE,YAAY5mE,QACpBxC,KAAK6pE,+CAGP7pE,KAAKopE,YAAYv0D,KAAK80D,GACtBA,EAAUxE,cAActkE,UAAU,WAAM,MAAAhB,GAAKiqE,kBAAkBH,KAC/D3pE,KAAKkoE,UAAUt7D,KAAK+8D,GAEbA,GAMTlE,EAAF1kE,UAAAgpE,SAAE,WAGE,IAFA,GAAI1/D,GAAIrK,KAAKopE,YAAY5mE,OAElB6H,KAKLrK,KAAKopE,YAAY/+D,GAAGk5B,SAQxBkiC,EAAF1kE,UAAAyoE,cAAE,SAAcl7C,GACZ,MAAOtuB,MAAKopE,YAAY38D,KAAK,SAAAu9D,GAAU,MAAAA,GAAO17C,KAAOA,KAQ/Cm3C,EAAV1kE,UAAA2qB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgBvsB,KAAKi1C,kBAAkB1qB,EAC7C,OAAOvqB,MAAK4pB,SAASsD,OAAOX,IAQtBk5C,EAAV1kE,UAAAk0C,kBAAA,SAA4Bg1B,GACxB,GAAM9yD,GAAQ,GAAIqV,GAAAA,eAChBC,iBAAkBzsB,KAAK4pB,SAASvgB,WAAWqjB,SAC3Cud,eAAgBggC,EAAahgC,gBAAkBjqC,KAAKsnC,kBACpDve,WAAYkhD,EAAalhD,WACzBoK,YAAa82C,EAAa92C,YAC1BnW,UAAWitD,EAAajtD,UACxB45B,SAAUqzB,EAAarzB,SACvBszB,UAAWD,EAAaC,UACxBC,SAAUF,EAAaE,SACvBC,UAAWH,EAAaG,WAO1B,OAJIH,GAAa70B,gBACfj+B,EAAMi+B,cAAgB60B,EAAa70B,eAG9Bj+B,GASDsuD,EAAV1kE,UAAA2oE,uBAAA,SAAiCt/B,EAAqB7f,GAClD,GAAMS,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBhrB,KAAK8pB,UAAW,GAAIqB,WACrEg8C,GAAiB58C,MAEda,EACF,GAAIC,GAAAA,gBAAgB+7C,GAAoB78C,EAAOlK,iBAAkB4K,EAGrE,OAFqBmf,GAAQtoB,OAA2BsJ,GAEpCG,UAYdk6C,EAAV1kE,UAAA6oE,qBACA,SAAMN,EACAG,EACA1+C,EACAR,GAIF,GAAMo/C,GACF,GAAItC,IAAmBt8C,EAAY0+C,EAAiBzpE,KAAK4oE,UAAWr+C,EAAO+D,GAW/E,IARI/D,EAAO4I,aACTpI,EAAW2Z,gBAAgB7jC,UAAU,WAC9B8oE,EAAU9jC,cACb8jC,EAAUpmC,UAKZ+lC,YAAkC5xD,GAAAA,YACpC+xD,EAAgBphD,qBACd,GAAItH,GAAAA,eAAkBuoD,EAAsB,MACnC19C,UAAWrB,EAAOpX,KAAMw2D,UAFzCA,SAGW,CACL,GAAM1+C,GAAWjrB,KAAK6rB,gBAAmBtB,EAAQo/C,EAAWF,GACtD39C,EAAa29C,EAAgBzhD,sBAC/B,GAAIqD,GAAAA,gBAAgBi+C,MAAwBx6D,GAAWmc,GAC3D0+C,GAAUvE,kBAAoBt5C,EAAWP,SAO3C,MAJAo+C,GACGrB,WAAW/9C,EAAOnK,MAAOmK,EAAO5f,QAChCy9B,eAAe7d,EAAOlhB,UAElBsgE,GAWDlE,EAAV1kE,UAAA8qB,gBACA,SAAMtB,EACAo/C,EACAF,GAEF,GAAMz+C,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAM5Eo/C,EAAkB,GAAIl/C,WACzBi8C,GAAoBqC,IACpBlB,GAAiBh+C,EAAOpX,OACxBk0D,GAAcsC,IAWjB,QARIp/C,EAAOvN,WACLgO,GAAiBA,EAAahd,IAA2B5H,EAAAA,eAAgB,OAC7EikE,EAAgB37C,IAAItoB,EAAAA,gBAClB1E,MAAO6oB,EAAOvN,UACd9Q,OAAQC,EAAAA,OAIL,GAAI+e,GAAAA,eAAeF,GAAgBhrB,KAAK8pB,UAAWugD,IAOpD5E,EAAV1kE,UAAA+oE,kBAAA,SAA4BH,GACxB,GAAM1nE,GAAQjC,KAAKopE,YAAYrrD,QAAQ4rD,EAEnC1nE,IAAS,IACXjC,KAAKopE,YAAY9pD,OAAOrd,EAAO,GAI1BjC,KAAKopE,YAAY5mE,SACpBxC,KAAKkpE,oBAAoB9/D,QAAQ,SAACkhE,EAAev+D,GAC3Cu+D,EACFv+D,EAAQm/C,aAAa,cAAeof,GAEpCv+D,EAAQ6+C,gBAAgB,iBAI5B5qD,KAAKkpE,oBAAoBtgC,QACzB5oC,KAAKqpE,gBAAgBz8D,UAQnB64D,EAAV1kE,UAAA8oE,wDACI,GAAMU,GAAmBvqE,KAAK8oE,kBAAkB0B,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAc11D,SAEvC1K,EAAIqgE,EAASloE,OAAS,EAAG6H,GAAK,EAAGA,IAAK,CAC7C,GAAIsgE,GAAUD,EAASrgE,EAEnBsgE,KAAYJ,GACO,WAArBI,EAAQ9iC,UACa,UAArB8iC,EAAQ9iC,UACP8iC,EAAQC,aAAa,eAEtB5qE,KAAKkpE,oBAAoBx6C,IAAIi8C,EAASA,EAAQE,aAAa,gBAC3DF,EAAQzf,aAAa,cAAe,0BAvR9ChmD,KAACioB,EAAAA,iDAzDDjoB,KAAEkoB,EAAAA,UAYFloB,KAAEooB,EAAAA,WALFpoB,KAAQ4lE,EAAAA,SAARzkE,aAAAnB,KAmFOoB,EAAAA,aACPpB,SAAA4J,GAAAzI,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmB6J,EAAAA,OAAnB3J,MAA0BojE,QAC1BtjE,SAAA4J,GAAAzI,aAAAnB,KAAO6J,EAAAA,OAAP3J,MAAcqjE,QAlCdvjE,KAAaugE,EAAbp/D,aAAAnB,KAmCOoB,EAAAA,WAnCPpB,KAmCmBsoB,EAAAA,aA3FnBtoB,KAAE6lE,EAAAA,oBAZFtF,KCqBIuF,GAAmB,gBAuBrB,QAAFC,GACuBtB,EACXjlE,EACAwmE,GAFWlrE,KAAvB2pE,UAAuBA,EACX3pE,KAAZ0E,YAAYA,EACA1E,KAAZkrE,QAAYA,EAVZlrE,KAAA61B,UAA2C,eArC3C,MAiDEo1C,GAAFlqE,UAAA+f,SAAE,WACO9gB,KAAK2pE,YAMR3pE,KAAK2pE,UAAYwB,EAAiBnrE,KAAK0E,YAAa1E,KAAKkrE,QAAQ9B,eAIrE6B,EAAFlqE,UAAA6f,YAAE,SAAYlX,GACV,GAAM0hE,GAAgB1hE,EAA1B,iBAAqDA,EAArD,qBAEQ0hE,KACFprE,KAAK+nE,aAAeqD,EAAcxuB,8BAtCxC13C,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mDACV8F,SAAU,iBACVpF,MACE6I,UAAW,gCACX4yC,oBAAqB,YACrBt8C,KAAQ,kDAdZA,KAAQmiE,GAARhhE,aAAAnB,KA2BKoB,EAAAA,aA9BLpB,KAAE6N,EAAAA,aAEF7N,KAAQugE,wBAoBR5vC,YAAA3wB,KAAGuB,EAAAA,MAAHrB,MAAS,gBAGT2iE,eAAA7iE,KAAGuB,EAAAA,MAAHrB,MAAS,sBAETimE,kBAAAnmE,KAAGuB,EAAAA,MAAHrB,MAAS,qBA1CT6lE,mBAmFE,QAAFK,GACwBtG,EACZtgE,EACAwmE,GAFYlrE,KAAxBglE,WAAwBA,EACZhlE,KAAZ0E,YAAYA,EACA1E,KAAZkrE,QAAYA,EALZlrE,KAAAsuB,GAAgB,oBAAoB08C,KAjFpC,MAwFEM,GAAFvqE,UAAA+f,SAAE,WAAA,GAAFjhB,GAAAG,IACSA,MAAKglE,aACRhlE,KAAKglE,WAAamG,EAAiBnrE,KAAK0E,YAAa1E,KAAKkrE,QAAQ9B,cAGhEppE,KAAKglE,YACP/7D,QAAQC,UAAUC,KAAK,WACrB,GAAMwiB,GAAY9rB,EAAKmlE,WAAWsC,kBAE9B37C,KAAcA,EAAU4/C,kBAC1B5/C,EAAU4/C,gBAAkB1rE,EAAKyuB,sBA1B3CppB,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uCACV8F,SAAU,iBACVpF,MACEC,MAAS,mBACToyB,OAAQ,8CA3DZlzB,KAAQmiE,GAARhhE,aAAAnB,KAkEKoB,EAAAA,aArELpB,KAAE6N,EAAAA,aAEF7N,KAAQugE,wBAgERn3C,KAAAppB,KAAGuB,EAAAA,SAjFH6kE,iCAAA,sBA6GApmE,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,+DACVU,MAAOC,MAAS,0BA/GlBwlE,iCAAA,sBAwHAtmE,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,+DACVU,MAAOC,MAAS,0BA1HlBylE,iCCAA,sBAuBAvmE,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAka,EAAAA,cACAha,EAAAA,aACAD,IAEFI,SACE23D,GACA6D,GACAK,GACAE,GACAC,GACAp8D,IAEFQ,cACEu3D,GACA6D,GACAK,GACAG,GACAD,IAEF54D,WACE6yD,GACAiD,IAEFn/C,iBAAkB69C,QAjDpBvU,gFCAA,MA4ByCzqD,GAAzCsjE,EAAAvkE,GAEA3F,OAAAC,eAAMiqE,EAAN3qE,UAAA,0BAAA,WAAqC,MAAOf,MAAK2rE,aAC/C,SAAuBjqE,GAAiB1B,KAAK2rE,QAAUjqE,mCAGzDF,OAAAC,eAAMiqE,EAAN3qE,UAAA,0BAAA,WAAqC,MAAOf,MAAK4rE,aAC/C,SAAuBlqE,GAAiB1B,KAAK4rE,QAAUlqE,mCAGzDF,OAAAC,eAAMiqE,EAAN3qE,UAAA,mBAAA,WAA+B,MAAOf,MAAKgkC,aACzC,SAAgBtiC,GAAkB1B,KAAKgkC,QAAUtiC,mCAGnDF,OAAAC,eAAMiqE,EAAN3qE,UAAA,2BAAA,WAAuC,MAAOf,MAAKgkC,aACjD,SAAwBtiC,GAAkB1B,KAAKgkC,QAAUtiC,kDA3B3DwD,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,wDACV8F,SAAU,sBACV3F,QAAS,qBAAsB,sBAC/BO,MACEC,MAAS,qCAGT6lE,KAAQ,IACRpa,UAAW,6CAIfqa,qBAAA5mE,KAAGuB,EAAAA,QAIHslE,qBAAA7mE,KAAGuB,EAAAA,QAIHulE,cAAA9mE,KAAGuB,EAAAA,MAAHrB,MAAS,kBAIT6mE,sBAAA/mE,KAAGuB,EAAAA,SAzCHilE,GA4ByCQ,EAAAA,qBCX5B9a,GACT,GAAIzxC,GAAAA,eAA6B,4BCe/BwsD,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGEz3C,GAAe,EAInB03C,GAAA,WACE,QAAFA,GAAqBj1B,EACAC,EACAC,EAEAC,GAJAt3C,KAArBm3C,0BAAqBA,EACAn3C,KAArBo3C,YAAqBA,EACAp3C,KAArBq3C,iBAAqBA,EAEAr3C,KAArBs3C,UAAqBA,EAtDrB,MAAA80B,MAwDaC,GAAqB70B,EAAgB40B,mBA6JhD,QAAFE,GAAwB5nE,EACA6L,EAEiB+mC,EACfF,EACAC,EACZF,EACsDo1B,EAC9CC,EACRC,GATZ,GAAF5sE,GAUIsH,EAVJC,KAAApH,KAUUm3C,EAA2BC,EAAaC,EAAkBC,IAVpEt3C,WAAwBH,GAAxB6E,YAAwBA,EACA7E,EAAxB0Q,UAAwBA,EAEiB1Q,EAAzCy3C,UAAyCA,EAKnBz3C,EAAtB2sE,iBAAsBA,EAvItB3sE,EAAAo4C,KAAmB,aAAavjB,KAOhC70B,EAAA6sE,WAAc,EAMd7sE,EAAAg5C,SAAqB,EAMrBh5C,EAAA45C,aAAyC,GAAI5tC,GAAAA,QAM7ChM,EAAAi5C,YAAwB,YAMxBj5C,EAAA8sE,YAAe,EAuBf9sE,EAAAygC,WAAwB,EAwBxBzgC,EAAA41B,WAAwB,EAgBxB51B,EAAA+sE,MAAoB,OAsBpB/sE,EAAAgtE,WAAsB,EAEtBhtE,EAAAitE,uBACI,OACA,WACA,iBACA,QACA,OACA,QACA77D,OAAO,SAAA87D,GAAK,MAAAC,GAAAA,yBAAyBx+C,IAAIu+C,KAezCltE,EAAKotE,oBAAsBV,GAAsB1sE,EAAK6E,YAAY9B,cAElE/C,EAAKqtE,qBAAuBrtE,EAAK6B,MAGjC7B,EAAKyuB,GAAKzuB,EAAKyuB,GAKX/d,EAAUq3B,KACZ6kC,EAAOxgE,kBAAkB,WACvBvH,EAAY9B,cAAcqlC,iBAAiB,QAAS,SAACn+B,GACnD,GAAIqjE,GAAKrjE,EAAgC,MACpCqjE,GAAGzrE,OAAUyrE,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCztE,EAAK6sE,WAAa7sE,EAAK0Q,UAAUK,YA5PrC,MAoF8BxI,GAA9BkkE,EAAAnlE,GAwCA3F,OAAAC,eAAM6qE,EAANvrE,UAAA,2BACI,MAAIf,MAAKs3C,WAAyC,OAA5Bt3C,KAAKs3C,UAAUl1C,SAC5BpC,KAAKs3C,UAAUl1C,SAEjBpC,KAAKsgC,eAEd,SAAa5+B,GACX1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,GAInC1B,KAAK64C,UACP74C,KAAK64C,SAAU,EACf74C,KAAKy5C,aAAa7sC,yCAUxBpL,OAAAC,eAAM6qE,EAANvrE,UAAA,UAAA,WAAqB,MAAOf,MAAK85C,SAC/B,SAAOp4C,GAAiB1B,KAAK85C,IAAMp4C,GAAS1B,KAAKi4C,sCAcnDz2C,OAAAC,eAAM6qE,EAANvrE,UAAA,gBAAA,WAA4B,MAAOf,MAAKy1B,eACtC,SAAa/zB,GAAkB1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,oCAKxEF,OAAAC,eAAM6qE,EAANvrE,UAAA,YAAA,WAAuB,MAAOf,MAAK4sE,WACjC,SAASlrE,GACP1B,KAAK4sE,MAAQlrE,GAAS,OACtB1B,KAAKutE,iBAKAvtE,KAAKwtE,eAAiBR,EAAAA,yBAAyBx+C,IAAIxuB,KAAK4sE,SAC3D5sE,KAAK0E,YAAY9B,cAAcsC,KAAOlF,KAAK4sE,wCAajDprE,OAAAC,eAAM6qE,EAANvrE,UAAA,aAAA,WAAwB,MAAOf,MAAKitE,oBAAoBvrE,WACtD,SAAUA,GACJA,IAAU1B,KAAK0B,QACjB1B,KAAKitE,oBAAoBvrE,MAAQA,EACjC1B,KAAKy5C,aAAa7sC,yCAMxBpL,OAAAC,eAAM6qE,EAANvrE,UAAA,gBAAA,WAA4B,MAAOf,MAAK6sE,eACtC,SAAanrE,GAAkB1B,KAAK6sE,UAAYxkE,EAAAA,sBAAsB3G,oCAsDtE4qE,EAAFvrE,UAAA+f,SAAE,WAAA,GAAFjhB,GAAAG,IACIA,MAAKwsE,iBAAiBp6C,QAAQpyB,KAAK0E,YAAY9B,eAAe/B,UAAU,SAAAiJ,GACtEjK,EAAK8sE,WAAa7iE,EAAM2jE,aACxB5tE,EAAK45C,aAAa7sC,UAItB0/D,EAAFvrE,UAAA6f,YAAE,WACE5gB,KAAKy5C,aAAa7sC,QAGpB0/D,EAAFvrE,UAAAC,YAAE,WACEhB,KAAKy5C,aAAa5sC,WAClB7M,KAAKwsE,iBAAiBl6C,eAAetyB,KAAK0E,YAAY9B,gBAGxD0pE,EAAFvrE,UAAAwkC,UAAE,WACMvlC,KAAKs3C,WAIPt3C,KAAK26C,mBAMP36C,KAAK0tE,0BAIPpB,EAAFvrE,UAAA0B,MAAE,WAAgBzC,KAAK0E,YAAY9B,cAAcH,SAG/C6pE,EAAFvrE,UAAA8I,cAAE,SAAc8jE,GACRA,IAAc3tE,KAAK64C,SAAY74C,KAAK4tE,WACtC5tE,KAAK64C,QAAU80B,EACf3tE,KAAKy5C,aAAa7sC,SAItB0/D,EAAFvrE,UAAAuvD,SAAE,aAWUgc,EAAZvrE,UAAA2sE,uBAAE,WACE,GAAMjtC,GAAWzgC,KAAK0B,KAElB1B,MAAKktE,uBAAyBzsC,IAChCzgC,KAAKktE,qBAAuBzsC,EAC5BzgC,KAAKy5C,aAAa7sC,SAKZ0/D,EAAZvrE,UAAAwsE,cAAE,WACE,GAAIpB,GAAwBpuD,QAAQ/d,KAAK4sE,QAAU,EACjD,KAAMiB,GAAgC7tE,KAAK4sE,QAKrCN,EAAZvrE,UAAA+sE,cAAE,WACE,MAAO9tE,MAAK8sE,sBAAsB/uD,QAAQ/d,KAAK4sE,QAAU,GAIjDN,EAAZvrE,UAAAgtE,YAAE,WAEE,GAAIC,GAAYhuE,KAAK0E,YAA6C,cAAEspE,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZvrE,UAAAysE,YAAE,WACE,MAAiE,aAA1DxtE,KAAK0E,YAAY9B,cAAcilC,SAAShqB,eAOjDrc,OAAFC,eAAM6qE,EAANvrE,UAAA,aAAE,WACE,QAAQf,KAAK8tE,iBAAoB9tE,KAAK0E,YAAY9B,cAAclB,OAAU1B,KAAK+tE,eAC1E/tE,KAAK2sE,6CAOZnrE,OAAFC,eAAM6qE,EAANvrE,UAAA,wBAAE,WAAkC,MAAOf,MAAK64C,UAAY74C,KAAKm7C,uCAM/DmxB,EAAFvrE,UAAAogD,kBAAE,SAAkBC,GAAiBphD,KAAKqhD,iBAAmBD,EAAI7F,KAAK,MAMpE+wB,EAAFvrE,UAAAugD,iBAAE,WAAqBthD,KAAKyC,wBAlT5ByC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,sCACV8F,SAAU,WACVpF,MAIEC,MAAS,oDACTkoE,2BAA4B,YAG5BhsC,YAAa,KACbisC,qBAAsB,cACtB3c,aAAc,WACd4c,aAAc,WACdC,aAAc,WACdvsB,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxB3jB,SAAU,uBACVD,UAAW,sBACX2zB,UAAW,cAEb7+C,YAAaC,QAASsvC,GAAqBrvC,YAAaw5D,4CArE1DpnE,KAAE6N,EAAAA,aAJF7N,KAAgC2J,EAAAA,WAchC3J,KAA4Bs9C,EAAAA,UAA5Bn8C,aAAAnB,KAiMeoB,EAAAA,WAjMfpB,KAiM2BqxC,EAAAA,SAjM3BrxC,KAAuCm9C,EAAAA,OAAvCh8C,aAAAnB,KAkMeoB,EAAAA,aAlMfpB,KAAQo9C,EAAAA,mBAARj8C,aAAAnB,KAmMeoB,EAAAA,aAlMfpB,KAA6BoT,KAoM7BpT,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BqxC,EAAAA,OAA3BrxC,KAAmC6J,EAAAA,OAAnC3J,MAA0CgsD,QAjM1ClsD,KAAQopE,EAAAA,kBANRppE,KAAE8H,EAAAA,4BAsGF5K,WAAA8C,KAAGuB,EAAAA,QAuBH6nB,KAAAppB,KAAGuB,EAAAA,QASH+4C,cAAAt6C,KAAGuB,EAAAA,QAMHiyB,WAAAxzB,KAAGuB,EAAAA,QAMHvB,OAAAA,KAAGuB,EAAAA,QAgBHy/B,oBAAAhhC,KAAGuB,EAAAA,QAMH/E,QAAAwD,KAAGuB,EAAAA,QAUHmnE,WAAA1oE,KAAGuB,EAAAA,SAvMH6lE,GAoF8BD,gCCpF9B,sBAiBAnnE,KAACgK,EAAAA,SAAD9J,OACEyK,cAAey8D,GAAUZ,IACzBv8D,SACEC,EAAAA,aACAm/D,EAAAA,gBACAhoC,IAEF92B,SACE8+D,EAAAA,gBAGAhoC,GACA+lC,GACAZ,IAEF94D,WAAY0F,QAhCdk2D,gCCmBAxuE,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAAyuE,cAA0B,WAG1BzuE,KAAA0uE,kBAA8B,gBAG9B1uE,KAAAmiE,eAA2B,iBAG3BniE,KAAAuiE,eAA2B,aAG3BviE,KAAAoiE,cAA0B,gBAG1BpiE,KAAAwiE,cAA0B,YAG1BxiE,KAAAsiE,mBAA+B,oBAG/BtiE,KAAAyiE,mBAA+B,gBAG/BziE,KAAAkiE,uBAAmC,cAGnCliE,KAAAiiE,2BAAuC,wBAjDvC,sBAaA/8D,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY,8GAbzB0zC,KCwBA0L,GAAA,WACE,QAAFA,GAAqBt9D,EACAitE,EACA94C,EACAmO,GAHAhkC,KAArB0B,MAAqBA,EACA1B,KAArB2uE,aAAqBA,EACA3uE,KAArB61B,UAAqBA,EACA71B,KAArBgkC,QAAqBA,EA5BrB,MAAAg7B,oBAoFE,QAAFjM,GAAsBruD,EAAiCgH,GAAjC1L,KAAtB0E,YAAsBA,EAAiC1E,KAAvD0L,QAAuDA,EAjBvD1L,KAAA4uE,QAAqB,EAGrB5uE,KAAA6uE,wBAAoC,EAGpC7uE,KAAA8uE,WAAwB,EAMxB9uE,KAAA+uE,gBAA6B,EAG7B/uE,KAAAgvE,oBAAiE,GAAIjnE,GAAAA,aAArE,MAIEgrD,GAAFhyD,UAAAkuE,aAAE,SAAaC,IACNlvE,KAAK6uE,wBAA2BK,EAAKlrC,UAG1ChkC,KAAKgvE,oBAAoBjtE,KAAKmtE,EAAKxtE,QAIrCF,OAAFC,eAAMsxD,EAANhyD,UAAA,uBAAE,WACE,MAAOf,MAAK6rE,MAAQ7rE,KAAK6rE,KAAKrpE,QAAUxC,KAAK6rE,KAAK,GAAGrpE,OACjDxC,KAAK4uE,QAAU5uE,KAAK6rE,KAAK,GAAGrpE,OAAS,mCAG3CuwD,EAAFhyD,UAAAouE,cAAE,SAAc7X,EAAkBoC,GAC9B,GAAI0V,GAAa9X,EAAWt3D,KAAK4uE,QAAUlV,CAO3C,OAJIpC,KACF8X,GAAcpvE,KAAKqvE,iBAGdD,GAAcpvE,KAAK8uE,YAI5B/b,EAAFhyD,UAAAy9D,iBAAE,WAAA,GAAF3+D,GAAAG,IACIA,MAAK0L,QAAQO,kBAAkB,WAC7BpM,EAAK6L,QAAQ0tC,SAAShzB,eAAeha,KAAK0I,EAAAA,KAAK,IAAIjU,UAAU,WAC3DhB,EAAK6E,YAAY9B,cAAc6nD,cAAc,6BAA6BhoD,4BA9ElFyC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,q1CACVC,QAAF,g0BACEQ,MACFC,MAAA,oBACMuM,KAAN,OACI+8D,qBAAJ,QAEAnkE,SAAA,kBACA1F,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BAitD,EAAAxsD,6DAoCAgpE,aAAArqE,KAAQuB,EAAAA,QAGR+oE,gBAAAtqE,KAAAuB,EAAAA,QAGAgpE,wBAAQvqE,KAARuB,EAAAA,QAGAmoE,UAAA1pE,KAAAuB,EAAAA,QAGAooE,yBAAA3pE,KAAAuB,EAAAA,QAGAqoE,aAAA5pE,KAAAuB,EAAAA,QAGAsoE,kBAAA7pE,KAAAuB,EAAAA,QAGAuoE,sBAAA9pE,KAAAyB,EAAAA,UASAosD,mBCiDE,QAAFG,GAAsB/xD,EACsCsvD,EAC3BtB,EACClsD,GAC9B,GAJkBjD,KAAtBmB,mBAAsBA,EACsCnB,KAA5DywD,aAA4DA,EAC3BzwD,KAAjCmvD,aAAiCA,EACCnvD,KAAlCiD,KAAkCA,EAnClCjD,KAAAu/D,eAA8D,GAAIx3D,GAAAA,aAGlE/H,KAAA2jE,eAA0D,GAAI57D,GAAAA,aAG9D/H,KAAAu+D,iBAAyD,GAAIx2D,GAAAA,cA8BpD/H,KAAKmvD,aACR,KAAMuQ,GAA2B,cAEnC,KAAK1/D,KAAKywD,aACR,KAAMiP,GAA2B,mBAGnC,IAAMgQ,GAAiB1vE,KAAKmvD,aAAawgB,oBACnCC,EAAiB5vE,KAAKmvD,aAAa0gB,kBAAkB,UACrDC,EAAe9vE,KAAKmvD,aAAa0gB,kBAAkB,QAGrDE,EAAWD,EAAa9lE,IAAI,SAACgmE,EAAM3lE,GACrC,OAAQ2lE,KAAdA,EAAoBC,OAAQL,EAAevlE,KAEvCrK,MAAKkwE,UAAYH,EAASh/D,MAAM2+D,GAAgBxlE,OAAO6lE,EAASh/D,MAAM,EAAG2+D,IAEzE1vE,KAAKi+D,YAAcj+D,KAAKmvD,aAAawQ,QA5CzC,MAlDAn+D,QAAAC,eAAMyxD,EAANnyD,UAAA,kBAAA,WAAwB,MAAOf,MAAKi+D,iBAClC,SAAev8D,GACb,GAAM48D,GAAgBt+D,KAAKi+D,YACrB2B,EACF5/D,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,KAAW1B,KAAKmvD,aAAawQ,OACxF3/D,MAAKi+D,YAAcj+D,KAAKmvD,aAAa0Q,UAAUD,EAAW5/D,KAAKm/D,QAASn/D,KAAKk/D,SACxEl/D,KAAKmwE,qBAAqB7R,EAAet+D,KAAKi+D,cACjDj+D,KAAK8/D,yCAOXt+D,OAAAC,eAAMyxD,EAANnyD,UAAA,gBAAA,WAA6B,MAAOf,MAAKmgC,eACvC,SAAaz+B,GACX1B,KAAKmgC,UAAYngC,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,IACxE1B,KAAKowE,cAAgBpwE,KAAKqwE,uBAAuBrwE,KAAKmgC,4CAM1D3+B,OAAAC,eAAMyxD,EAANnyD,UAAA,eAAA,WAA4B,MAAOf,MAAKigE,cACtC,SAAYv+D,GACV1B,KAAKigE,SAAWjgE,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,qCAM3EF,OAAAC,eAAMyxD,EAANnyD,UAAA,eAAA,WAA4B,MAAOf,MAAKkgE,cACtC,SAAYx+D,GACV1B,KAAKkgE,SAAWlgE,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,qCAgEzEwxD,EAAFnyD,UAAAyI,mBAAE,WACExJ,KAAK8/D,SAIP5M,EAAFnyD,UAAAuvE,cAAE,SAAc/f,GACZ,GAAIvwD,KAAKowE,eAAiB7f,EAAM,CAC9B,GAAMggB,GAAevwE,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAC9CyS,EAAgBxwE,KAAKmvD,aAAawR,SAAS3gE,KAAK+9D,YAChD0S,EAAezwE,KAAKmvD,aAAa4P,WAAWwR,EAAcC,EAAejgB,EAE/EvwD,MAAKu/D,eAAex9D,KAAK0uE,GAG3BzwE,KAAK2jE,eAAe5hE,QAItBmxD,EAAFnyD,UAAA0/D,2BAAE,SAA2B32D,GAKzB,GAAMw0D,GAAgBt+D,KAAKi+D,YACrBtxC,EAAQ3sB,KAAKi7C,QAEnB,QAAQnxC,EAAMyZ,SACZ,IAAKoZ,GAAAA,WACH38B,KAAK+9D,WAAa/9D,KAAKmvD,aAAamQ,gBAAgBt/D,KAAKi+D,YAAatxC,EAAQ,GAAK,EACnF,MACF,KAAKkQ,GAAAA,YACH78B,KAAK+9D,WAAa/9D,KAAKmvD,aAAamQ,gBAAgBt/D,KAAKi+D,YAAatxC,GAAS,EAAI,EACnF,MACF,KAAKiQ,GAAAA,SACH58B,KAAK+9D,WAAa/9D,KAAKmvD,aAAamQ,gBAAgBt/D,KAAKi+D,aAAc,EACvE,MACF,KAAKnhC,GAAAA,WACH98B,KAAK+9D,WAAa/9D,KAAKmvD,aAAamQ,gBAAgBt/D,KAAKi+D,YAAa,EACtE,MACF,KAAKz6C,GAAAA,KACHxjB,KAAK+9D,WAAa/9D,KAAKmvD,aAAamQ,gBAAgBt/D,KAAKi+D,YACrD,EAAIj+D,KAAKmvD,aAAaqR,QAAQxgE,KAAKi+D,aACvC,MACF,KAAKv6C,GAAAA,IACH1jB,KAAK+9D,WAAa/9D,KAAKmvD,aAAamQ,gBAAgBt/D,KAAKi+D,YACpDj+D,KAAKmvD,aAAaoR,kBAAkBvgE,KAAKi+D,aACxCj+D,KAAKmvD,aAAaqR,QAAQxgE,KAAKi+D,aACrC,MACF,KAAKzhC,GAAAA,QACHx8B,KAAK+9D,WAAaj0D,EAAM6xC,OACpB37C,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,aAAc,GACtDj+D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,aAAc,EAC3D,MACF,KAAKvhC,GAAAA,UACH18B,KAAK+9D,WAAaj0D,EAAM6xC,OACpB37C,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YAAa,GACrDj+D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,YAAa,EAC1D,MACF,KAAKr6C,GAAAA,MAOH,YANK5jB,KAAKo/D,aAAcp/D,KAAKo/D,WAAWp/D,KAAKi+D,eAC3Cj+D,KAAKswE,cAActwE,KAAKmvD,aAAaqR,QAAQxgE,KAAKi+D,cAClDj+D,KAAK2jE,eAAe5hE,OAEpB+H,EAAMsE,kBAGV,SAEE,OAGApO,KAAKmvD,aAAakP,YAAYC,EAAet+D,KAAK+9D,aACpD/9D,KAAKu+D,iBAAiBx8D,KAAK/B,KAAK+9D,YAGlC/9D,KAAKw+D,mBAEL10D,EAAMsE,kBAIR8kD,EAAFnyD,UAAA++D,MAAE,WACE9/D,KAAKowE,cAAgBpwE,KAAKqwE,uBAAuBrwE,KAAK8W,UACtD9W,KAAK0wE,WAAa1wE,KAAKqwE,uBAAuBrwE,KAAKmvD,aAAawQ,SAChE3/D,KAAK2wE,YACD3wE,KAAKmvD,aAAa4R,cAAc,SAAS/gE,KAAKmvD,aAAawR,SAAS3gE,KAAK+9D,aACpEqD,mBAET,IAAIK,GAAezhE,KAAKmvD,aAAa4P,WAAW/+D,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAC3E/9D,KAAKmvD,aAAawR,SAAS3gE,KAAK+9D,YAAa,EACjD/9D,MAAK4wE,kBA/Ma,EAgNG5wE,KAAKmvD,aAAa0hB,aAAapP,GAC/CzhE,KAAKmvD,aAAawgB,qBAjNL,EAmNlB3vE,KAAK8wE,mBACL9wE,KAAKmB,mBAAmBC,gBAI1B8xD,EAAFnyD,UAAAy9D,iBAAE,WACEx+D,KAAK0+D,iBAAiBF,oBAIhBtL,EAAVnyD,UAAA+vE,4BACI,GAAMxQ,GAActgE,KAAKmvD,aAAaoR,kBAAkBvgE,KAAK+9D,YACvDgT,EAAY/wE,KAAKmvD,aAAa6hB,cACpChxE,MAAKixE,WACL,KAAK,GAAI5mE,GAAI,EAAG6kE,EAAOlvE,KAAK4wE,iBAAkBvmE,EAAIi2D,EAAaj2D,IAAK6kE,IAAQ,CAjO1D,GAkOZA,IACFlvE,KAAKixE,OAAOp8D,SACZq6D,EAAO,EAET,IAAM3e,GAAOvwD,KAAKmvD,aAAa4P,WACzB/+D,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAC/B/9D,KAAKmvD,aAAawR,SAAS3gE,KAAK+9D,YAAa1zD,EAAI,GACjD25B,EAAUhkC,KAAKkxE,kBAAkB3gB,GACjC16B,EAAY71B,KAAKmvD,aAAa4B,OAAOR,EAAMvwD,KAAKywD,aAAaO,QAAQmgB,cAC3EnxE,MAAKixE,OAAOjxE,KAAKixE,OAAOzuE,OAAS,GAC5BqS,KAAK,GAAImqD,IAAgB30D,EAAI,EAAG0mE,EAAU1mE,GAAIwrB,EAAWmO,MAK1DkvB,EAAVnyD,UAAAmwE,kBAAA,SAA4B3gB,GACxB,QAASA,KACHvwD,KAAKo/D,YAAcp/D,KAAKo/D,WAAW7O,OACnCvwD,KAAKm/D,SAAWn/D,KAAKmvD,aAAakP,YAAY9N,EAAMvwD,KAAKm/D,UAAY,MACrEn/D,KAAKk/D,SAAWl/D,KAAKmvD,aAAakP,YAAY9N,EAAMvwD,KAAKk/D,UAAY,IAOrEhM,EAAVnyD,UAAAsvE,uBAAA,SAAiC9f,GAC7B,MAAOA,IAAQvwD,KAAKmwE,qBAAqB5f,EAAMvwD,KAAK+9D,YAChD/9D,KAAKmvD,aAAaqR,QAAQjQ,GAAQ,MAIhC2C,EAAVnyD,UAAAovE,qBAAA,SAA+BiB,EAAcC,GACzC,SAAUD,IAAMC,GAAMrxE,KAAKmvD,aAAawR,SAASyQ,IAAOpxE,KAAKmvD,aAAawR,SAAS0Q,IACzErxE,KAAKmvD,aAAaiP,QAAQgT,IAAOpxE,KAAKmvD,aAAaiP,QAAQiT,KAO/Dne,EAAVnyD,UAAAmuD,oBAAA,SAA8BjwC,GAC1B,MAAQjf,MAAKmvD,aAAa8B,eAAehyC,IAAQjf,KAAKmvD,aAAawB,QAAQ1xC,GAAQA,EAAM,MAInFi0C,EAAVnyD,UAAAk6C,kBACI,MAAOj7C,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,sBA1QlCwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,kkBACV6F,SAAU,eACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAZ,KAAEysD,GAAFtrD,aAAAnB,KAAAoB,EAAAA,aA8GApB,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,cAnGA4sD,EAAA3sD,sEAwBA44D,UAAAj6D,KAAAuB,EAAAA,QAcAy4D,UAAAh6D,KAAAuB,EAAAA,QASA24D,aAAAl6D,KAAAuB,EAAAA,QAQA84D,iBAAAr6D,KAAAyB,EAAAA,SAQAg9D,iBAAAz+D,KAAAyB,EAAAA,SAGA43D,mBAAAr5D,KAAAyB,EAAAA,SAGA+3D,mBAAAx5D,KAAAsB,EAAAA,UAAApB,MAAA2tD,OAMAG,mBhBUE,QAAFE,GAAsBjyD,EACWguD,EACClsD,GAC9B,GAHkBjD,KAAtBmB,mBAAsBA,EACWnB,KAAjCmvD,aAAiCA,EACCnvD,KAAlCiD,KAAkCA,EAtBlCjD,KAAAu/D,eAAuD,GAAIx3D,GAAAA,aAG3D/H,KAAAw/D,aAAqD,GAAIz3D,GAAAA,aAGzD/H,KAAAu+D,iBAAyD,GAAIx2D,GAAAA,cAiBpD/H,KAAKmvD,aACR,KAAMuQ,GAA2B,cAGnC1/D,MAAKi+D,YAAcj+D,KAAKmvD,aAAawQ,QAlBzC,MAnDAn+D,QAAAC,eAAM2xD,EAANryD,UAAA,kBAAA,WAAwB,MAAOf,MAAKi+D,iBAClC,SAAev8D,GACb,GAAI48D,GAAgBt+D,KAAKi+D,YACnB2B,EACF5/D,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,KAAW1B,KAAKmvD,aAAawQ,OACxF3/D,MAAKi+D,YAAcj+D,KAAKmvD,aAAa0Q,UAAUD,EAAW5/D,KAAKm/D,QAASn/D,KAAKk/D,SACzEz7D,KAAK2qC,MAAMpuC,KAAKmvD,aAAaiP,QAAQE,GA1BjB,KA2BpB76D,KAAK2qC,MAAMpuC,KAAKmvD,aAAaiP,QAAQp+D,KAAKi+D,aA3BtB,KA4BtBj+D,KAAK8/D,yCAOXt+D,OAAAC,eAAM2xD,EAANryD,UAAA,gBAAA,WAA6B,MAAOf,MAAKmgC,eACvC,SAAaz+B,GACX1B,KAAKmgC,UAAYngC,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,IACxE1B,KAAKsxE,cAAgBtxE,KAAKmgC,WAAangC,KAAKmvD,aAAaiP,QAAQp+D,KAAKmgC,4CAM1E3+B,OAAAC,eAAM2xD,EAANryD,UAAA,eAAA,WAA4B,MAAOf,MAAKigE,cACtC,SAAYv+D,GACV1B,KAAKigE,SAAWjgE,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,qCAM3EF,OAAAC,eAAM2xD,EAANryD,UAAA,eAAA,WAA4B,MAAOf,MAAKkgE,cACtC,SAAYx+D,GACV1B,KAAKkgE,SAAWlgE,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,qCAsCzE0xD,EAAFryD,UAAAyI,mBAAE,WACExJ,KAAK8/D,SAIP1M,EAAFryD,UAAA++D,MAAE,WAAA,GAAFjgE,GAAAG,IACIA,MAAKuxE,WAAavxE,KAAKmvD,aAAaiP,QAAQp+D,KAAKmvD,aAAawQ,QAC9D,IAAI2B,GAAathE,KAAKmvD,aAAaiP,QAAQp+D,KAAKi+D,aAC5CuT,EAAelQ,EApGK,EAqGxBthE,MAAKyxE,SACL,KAAK,GAAIpnE,GAAI,EAAGkuD,KAAoBluD,EAtGZ,GAsG8BA,IACpDkuD,EAAI1jD,KAAKysD,EAAakQ,EAAennE,GArGhB,GAsGjBkuD,EAAI/1D,SACNxC,KAAKyxE,OAAO58D,KAAK0jD,EAAIvuD,IAAI,SAAA40D,GAAQ,MAAA/+D,GAAK8+D,mBAAmBC,MACzDrG,KAGJv4D,MAAKmB,mBAAmBC,gBAI1BgyD,EAAFryD,UAAAo9D,cAAE,SAAcS,GACZ5+D,KAAKw/D,aAAaz9D,KAAK/B,KAAKmvD,aAAa4P,WAAWH,EAAM,EAAG,GAC7D,IAAIwB,GAAQpgE,KAAKmvD,aAAawR,SAAS3gE,KAAK+9D,YACxCuC,EACAtgE,KAAKmvD,aAAaoR,kBAAkBvgE,KAAKmvD,aAAa4P,WAAWH,EAAMwB,EAAO,GAClFpgE,MAAKu/D,eAAex9D,KAAK/B,KAAKmvD,aAAa4P,WAAWH,EAAMwB,EACxD38D,KAAKE,IAAI3D,KAAKmvD,aAAaqR,QAAQxgE,KAAK+9D,YAAauC,MAI3DlN,EAAFryD,UAAA0/D,2BAAE,SAA2B32D,GAKzB,GAAMw0D,GAAgBt+D,KAAKi+D,YACrBtxC,EAAQ3sB,KAAKi7C,QAEnB,QAAQnxC,EAAMyZ,SACZ,IAAKoZ,GAAAA,WACH38B,KAAK+9D,WAAa/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YAAatxC,EAAQ,GAAK,EACpF,MACF,KAAKkQ,GAAAA,YACH78B,KAAK+9D,WAAa/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YAAatxC,GAAS,EAAI,EACpF,MACF,KAAKiQ,GAAAA,SACH58B,KAAK+9D,WAAa/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,aAzIvC,EA0InB,MACF,KAAKnhC,GAAAA,WACH98B,KAAK+9D,WAAa/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YA5IvC,EA6InB,MACF,KAAKz6C,GAAAA,KACHxjB,KAAK+9D,WAAa/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,aACrDj+D,KAAKmvD,aAAaiP,QAAQp+D,KAAKi+D,aAlJhB,GAmJpB,MACF,KAAKv6C,GAAAA,IACH1jB,KAAK+9D,WAAa/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YArJtC,GAsJDj+D,KAAKmvD,aAAaiP,QAAQp+D,KAAKi+D,aAtJ9B,GAsJ4D;wHAChF,MACF,KAAKzhC,GAAAA,QACHx8B,KAAK+9D,WACD/9D,KAAKmvD,aAAa6O,iBACdh+D,KAAKi+D,YAAan0D,EAAM6xC,QAAS,KA3JrB,GA4JpB,MACF,KAAKjf,GAAAA,UACH18B,KAAK+9D,WACD/9D,KAAKmvD,aAAa6O,iBACdh+D,KAAKi+D,YAAan0D,EAAM6xC,OAASuiB,IAhKrB,GAiKpB,MACF,KAAKt6C,GAAAA,MACH5jB,KAAKm+D,cAAcn+D,KAAKmvD,aAAaiP,QAAQp+D,KAAKi+D,aAClD,MACF,SAEE,OAGAj+D,KAAKmvD,aAAakP,YAAYC,EAAet+D,KAAK+9D,aACpD/9D,KAAKu+D,iBAAiBx8D,KAAK/B,KAAK+9D,YAGlC/9D,KAAKw+D,mBAEL10D,EAAMsE,kBAGRglD,EAAFryD,UAAA09D,eAAE,WACE,MAAOz+D,MAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YApLd,IAwL1B3K,EAAFryD,UAAAy9D,iBAAE,WACEx+D,KAAK0+D,iBAAiBF,oBAIhBpL,EAAVryD,UAAA49D,mBAAA,SAA6BC,GACzB,GAAIC,GAAW7+D,KAAKmvD,aAAa2P,YAAY9+D,KAAKmvD,aAAa4P,WAAWH,EAAM,EAAG,GACnF,OAAO,IAAII,IAAgBJ,EAAMC,EAAUA,EAAU7+D,KAAKi/D,kBAAkBL,KAItExL,EAAVryD,UAAAk+D,kBAAA,SAA4BL,GAExB,OAAa9vD,KAAT8vD,GAA+B,OAATA,GACrB5+D,KAAKk/D,SAAWN,EAAO5+D,KAAKmvD,aAAaiP,QAAQp+D,KAAKk/D,UACtDl/D,KAAKm/D,SAAWP,EAAO5+D,KAAKmvD,aAAaiP,QAAQp+D,KAAKm/D,SACzD,OAAO,CAIT,KAAKn/D,KAAKo/D,WACR,OAAO,CAMT,KAAK,GAHCC,GAAcr/D,KAAKmvD,aAAa4P,WAAWH,EAAM,EAAG,GAGjDrO,EAAO8O,EAAar/D,KAAKmvD,aAAaiP,QAAQ7N,IAASqO,EAC9DrO,EAAOvwD,KAAKmvD,aAAamQ,gBAAgB/O,EAAM,GAC/C,GAAIvwD,KAAKo/D,WAAW7O,GAClB,OAAO,CAIX,QAAO,GAOD6C,EAAVryD,UAAAmuD,oBAAA,SAA8BjwC,GAC1B,MAAQjf,MAAKmvD,aAAa8B,eAAehyC,IAAQjf,KAAKmvD,aAAawB,QAAQ1xC,GAAQA,EAAM,MAInFm0C,EAAVryD,UAAAk6C,kBACI,MAAOj7C,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,sBA9NlCwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,odACV6F,SAAU,mBACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAZ,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cAUA8sD,EAAA7sD,sEAuBA44D,UAAAj6D,KAAAuB,EAAAA,QAeAy4D,UAAAh6D,KAAAuB,EAAAA,QASA24D,aAAAl6D,KAAAuB,EAAAA,QAQA84D,iBAAAr6D,KAAAyB,EAAAA,SAQA64D,eAAAt6D,KAAAyB,EAAAA,SAGA43D,mBAAAr5D,KAAAyB,EAAAA,SAGA+3D,mBAAAx5D,KAAAsB,EAAAA,UAAApB,MAAA2tD,OAMAK,mBCYE,QAAFD,GAAsBhyD,EACsCsvD,EAC3BtB,EACClsD,GAC9B,GAJkBjD,KAAtBmB,mBAAsBA,EACsCnB,KAA5DywD,aAA4DA,EAC3BzwD,KAAjCmvD,aAAiCA,EACCnvD,KAAlCiD,KAAkCA,EA7BlCjD,KAAAu/D,eAAuD,GAAIx3D,GAAAA,aAG3D/H,KAAAy/D,cAAsD,GAAI13D,GAAAA,aAG1D/H,KAAAu+D,iBAAyD,GAAIx2D,GAAAA,cAwBpD/H,KAAKmvD,aACR,KAAMuQ,GAA2B,cAEnC,KAAK1/D,KAAKywD,aACR,KAAMiP,GAA2B,mBAGnC1/D,MAAKi+D,YAAcj+D,KAAKmvD,aAAawQ,QA5BzC,MAlDAn+D,QAAAC,eAAM0xD,EAANpyD,UAAA,kBAAA,WAAwB,MAAOf,MAAKi+D,iBAClC,SAAev8D,GACb,GAAI48D,GAAgBt+D,KAAKi+D,YACnB2B,EACF5/D,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,KAAW1B,KAAKmvD,aAAawQ,OACxF3/D,MAAKi+D,YAAcj+D,KAAKmvD,aAAa0Q,UAAUD,EAAW5/D,KAAKm/D,QAASn/D,KAAKk/D,SACzEl/D,KAAKmvD,aAAaiP,QAAQE,KAAmBt+D,KAAKmvD,aAAaiP,QAAQp+D,KAAKi+D,cAC9Ej+D,KAAK8/D,yCAOXt+D,OAAAC,eAAM0xD,EAANpyD,UAAA,gBAAA,WAA6B,MAAOf,MAAKmgC,eACvC,SAAaz+B,GACX1B,KAAKmgC,UAAYngC,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,IACxE1B,KAAK+/D,eAAiB//D,KAAKggE,uBAAuBhgE,KAAKmgC,4CAM3D3+B,OAAAC,eAAM0xD,EAANpyD,UAAA,eAAA,WAA4B,MAAOf,MAAKigE,cACtC,SAAYv+D,GACV1B,KAAKigE,SAAWjgE,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,qCAM3EF,OAAAC,eAAM0xD,EAANpyD,UAAA,eAAA,WAA4B,MAAOf,MAAKkgE,cACtC,SAAYx+D,GACV1B,KAAKkgE,SAAWlgE,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,qCAgDzEyxD,EAAFpyD,UAAAyI,mBAAE,WACExJ,KAAK8/D,SAIP3M,EAAFpyD,UAAAo/D,eAAE,SAAeC,GACb,GAAMC,GACArgE,KAAKmvD,aAAa4P,WAAW/+D,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAAaqC,EAAO,EAEtFpgE,MAAKy/D,cAAc19D,KAAKs+D,EAExB,IAAMC,GAActgE,KAAKmvD,aAAaoR,kBAAkBF,EAExDrgE,MAAKu/D,eAAex9D,KAAK/B,KAAKmvD,aAAa4P,WACvC/+D,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAAaqC,EAC5C38D,KAAKE,IAAI3D,KAAKmvD,aAAaqR,QAAQxgE,KAAK+9D,YAAauC,MAI3DnN,EAAFpyD,UAAA0/D,2BAAE,SAA2B32D,GAKzB,GAAMw0D,GAAgBt+D,KAAKi+D,YACrBtxC,EAAQ3sB,KAAKi7C,QAEnB,QAAQnxC,EAAMyZ,SACZ,IAAKoZ,GAAAA,WACH38B,KAAK+9D,WAAa/9D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,YAAatxC,EAAQ,GAAK,EACrF,MACF,KAAKkQ,GAAAA,YACH78B,KAAK+9D,WAAa/9D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,YAAatxC,GAAS,EAAI,EACrF,MACF,KAAKiQ,GAAAA,SACH58B,KAAK+9D,WAAa/9D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,aAAc,EACzE,MACF,KAAKnhC,GAAAA,WACH98B,KAAK+9D,WAAa/9D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,YAAa,EACxE,MACF,KAAKz6C,GAAAA,KACHxjB,KAAK+9D,WAAa/9D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,aACtDj+D,KAAKmvD,aAAawR,SAAS3gE,KAAKi+D,aACrC,MACF,KAAKv6C,GAAAA,IACH1jB,KAAK+9D,WAAa/9D,KAAKmvD,aAAauR,kBAAkB1gE,KAAKi+D,YACvD,GAAKj+D,KAAKmvD,aAAawR,SAAS3gE,KAAKi+D,aACzC,MACF,KAAKzhC,GAAAA,QACHx8B,KAAK+9D,WACD/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YAAan0D,EAAM6xC,QAAU,IAAM,EAC/E,MACF,KAAKjf,GAAAA,UACH18B,KAAK+9D,WACD/9D,KAAKmvD,aAAa6O,iBAAiBh+D,KAAKi+D,YAAan0D,EAAM6xC,OAAS,GAAK,EAC7E,MACF,KAAK/3B,GAAAA,MACH5jB,KAAKmgE,eAAengE,KAAKmvD,aAAawR,SAAS3gE,KAAKi+D,aACpD,MACF,SAEE,OAGAj+D,KAAKmvD,aAAakP,YAAYC,EAAet+D,KAAK+9D,aACpD/9D,KAAKu+D,iBAAiBx8D,KAAK/B,KAAK+9D,YAGlC/9D,KAAKw+D,mBAEL10D,EAAMsE,kBAIR+kD,EAAFpyD,UAAA++D,MAAE,WAAA,GAAFjgE,GAAAG,IACIA,MAAK+/D,eAAiB//D,KAAKggE,uBAAuBhgE,KAAK8W,UACvD9W,KAAK4gE,YAAc5gE,KAAKggE,uBAAuBhgE,KAAKmvD,aAAawQ,SACjE3/D,KAAK6gE,WAAa7gE,KAAKmvD,aAAa2P,YAAY9+D,KAAK+9D,WAErD,IAAI+C,GAAa9gE,KAAKmvD,aAAa4R,cAAc,QAEjD/gE,MAAKghE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKh3D,IAAI,SAAAuuD,GAAO,MAAAA,GAAIvuD,IACvE,SAAAo2D,GAAS,MAAAvgE,GAAKohE,oBAAoBb,EAAOU,EAAWV,QACxDpgE,KAAKmB,mBAAmBC,gBAI1B+xD,EAAFpyD,UAAAy9D,iBAAE,WACEx+D,KAAK0+D,iBAAiBF,oBAOhBrL,EAAVpyD,UAAAi/D,uBAAA,SAAiCzP,GAC7B,MAAOA,IAAQvwD,KAAKmvD,aAAaiP,QAAQ7N,IAASvwD,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAC7E/9D,KAAKmvD,aAAawR,SAASpQ,GAAQ,MAIjC4C,EAAVpyD,UAAAkgE,oBAAA,SAA8Bb,EAAec,GACzC,GAAIrrC,GAAY71B,KAAKmvD,aAAa4B,OAC9B/wD,KAAKmvD,aAAa4P,WAAW/+D,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,YAAaqC,EAAO,GAChFpgE,KAAKywD,aAAaO,QAAQmQ,mBAC9B,OAAO,IAAInC,IACPoB,EAAOc,EAAUE,oBAAqBvrC,EAAW71B,KAAKqhE,mBAAmBjB,KAIvEjN,EAAVpyD,UAAAsgE,mBAAA,SAA6BjB,GAEzB,GAAMkB,GAAathE,KAAKmvD,aAAaiP,QAAQp+D,KAAK+9D,WAElD,QAAcjvD,KAAVsxD,GAAiC,OAAVA,GACvBpgE,KAAKuhE,4BAA4BD,EAAYlB,IAC7CpgE,KAAKwhE,6BAA6BF,EAAYlB,GAChD,OAAO,CAGT,KAAKpgE,KAAKo/D,WACR,OAAO,CAMT,KAAK,GAHCqC,GAAezhE,KAAKmvD,aAAa4P,WAAWuC,EAAYlB,EAAO,GAG5D7P,EAAOkR,EAAczhE,KAAKmvD,aAAawR,SAASpQ,IAAS6P,EAC7D7P,EAAOvwD,KAAKmvD,aAAamQ,gBAAgB/O,EAAM,GAClD,GAAIvwD,KAAKo/D,WAAW7O,GAClB,OAAO,CAIX,QAAO,GAOD4C,EAAVpyD,UAAAwgE,4BAAA,SAAsC3C,EAAcwB,GAChD,GAAIpgE,KAAKk/D,QAAS,CAChB,GAAMwC,GAAU1hE,KAAKmvD,aAAaiP,QAAQp+D,KAAKk/D,SACzCyC,EAAW3hE,KAAKmvD,aAAawR,SAAS3gE,KAAKk/D,QAEjD,OAAON,GAAO8C,GAAY9C,IAAS8C,GAAWtB,EAAQuB,EAGxD,OAAO,GAODxO,EAAVpyD,UAAAygE,6BAAA,SAAuC5C,EAAcwB,GACjD,GAAIpgE,KAAKm/D,QAAS,CAChB,GAAMyC,GAAU5hE,KAAKmvD,aAAaiP,QAAQp+D,KAAKm/D,SACzC0C,EAAW7hE,KAAKmvD,aAAawR,SAAS3gE,KAAKm/D,QAEjD,OAAOP,GAAOgD,GAAYhD,IAASgD,GAAWxB,EAAQyB,EAGxD,OAAO,GAOD1O,EAAVpyD,UAAAmuD,oBAAA,SAA8BjwC,GAC1B,MAAQjf,MAAKmvD,aAAa8B,eAAehyC,IAAQjf,KAAKmvD,aAAawB,QAAQ1xC,GAAQA,EAAM,MAInFk0C,EAAVpyD,UAAAk6C,kBACI,MAAOj7C,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,sBA7QlCwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,0hBACV6F,SAAU,cACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAZ,KAAEysD,GAAFtrD,aAAAnB,KAAAoB,EAAAA,aAkGApB,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,cAvFA6sD,EAAQ5sD,sEAkBR44D,UAAAj6D,KAAAuB,EAAAA,QAcAy4D,UAAAh6D,KAAAuB,EAAAA,QASA24D,aAAAl6D,KAAAuB,EAAAA,QAQA84D,iBAAAr6D,KAAAyB,EAAAA,SAQA84D,gBAAAv6D,KAAAyB,EAAAA,SAGA43D,mBAAAr5D,KAAAyB,EAAAA,SAGA+3D,mBAAAx5D,KAAAsB,EAAAA,UAAApB,MAAA2tD,OAMAI,mBCnDE,QAAFE,GAAsB9iC,EACsCuxC,EAC1B3S,EAC0BsB,EAC9CjgC,GAJQxwB,KAAtBuwB,MAAsBA,EACsCvwB,KAA5D8hE,SAA4DA,EAC1B9hE,KAAlCmvD,aAAkCA,EAC0BnvD,KAA5DywD,aAA4DA,EAGxDzwD,KAAK8hE,SAASroB,aAAa54C,UAAU,WAAM,MAAA2vB,GAAkBpvB,iBA5CjE,MAgDEI,QAAFC,eAAM4xD,EAANtyD,UAAA,wBAAE,WACE,GAAiC,SAA7Bf,KAAK8hE,SAASC,YAChB,MAAO/hE,MAAKmvD,aACP4B,OAAO/wD,KAAK8hE,SAAS/D,WAAY/9D,KAAKywD,aAAaO,QAAQgR,gBACvDZ,mBAEX,IAAiC,QAA7BphE,KAAK8hE,SAASC,YAChB,MAAO/hE,MAAKmvD,aAAa2P,YAAY9+D,KAAK8hE,SAAS/D,WAErD,IAAMuD,GAAathE,KAAKmvD,aAAaiP,QAAQp+D,KAAK8hE,SAAS/D,WAK3D,OAJwB/9D,MAAKmvD,aAAa2P,YACtC9+D,KAAKmvD,aAAa4P,WAAWuC,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BthE,KAAKmvD,aAAa2P,YACrC9+D,KAAKmvD,aAAa4P,WAAWuC,EFtCT,GEsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvF9/D,OAAFC,eAAM4xD,EAANtyD,UAAA,yBAAE,WACE,MAAoC,SAA7Bf,KAAK8hE,SAASC,YACjB/hE,KAAKuwB,MAAM0xC,2BAA6BjiE,KAAKuwB,MAAM2xC,wDAIzD1gE,OAAFC,eAAM4xD,EAANtyD,UAAA,uBAAE,WACE,OACEq/D,MAASpgE,KAAKuwB,MAAM4xC,eACpBvD,KAAQ5+D,KAAKuwB,MAAM6xC,cACnBC,aAAcriE,KAAKuwB,MAAM+xC,oBACzBtiE,KAAK8hE,SAASC,8CAIlBvgE,OAAFC,eAAM4xD,EAANtyD,UAAA,uBAAE,WACE,OACEq/D,MAASpgE,KAAKuwB,MAAMgyC,eACpB3D,KAAQ5+D,KAAKuwB,MAAMiyC,cACnBH,aAAcriE,KAAKuwB,MAAMkyC,oBACzBziE,KAAK8hE,SAASC,8CAIlB1O,EAAFtyD,UAAA2hE,qBAAE,WACE1iE,KAAK8hE,SAASC,YAA2C,SAA7B/hE,KAAK8hE,SAASC,YAAyB,aAAe,SAIpF1O,EAAFtyD,UAAA4hE,gBAAE,WACE3iE,KAAK8hE,SAAS/D,WAA0C,SAA7B/9D,KAAK8hE,SAASC,YACrC/hE,KAAKmvD,aAAauR,kBAAkB1gE,KAAK8hE,SAAS/D,YAAa,GAC3D/9D,KAAKmvD,aAAa6O,iBACdh+D,KAAK8hE,SAAS/D,WAAyC,QAA7B/9D,KAAK8hE,SAASC,aAAyB,GF3ErD,KEgF1B1O,EAAFtyD,UAAA6hE,YAAE,WACE5iE,KAAK8hE,SAAS/D,WAA0C,SAA7B/9D,KAAK8hE,SAASC,YACrC/hE,KAAKmvD,aAAauR,kBAAkB1gE,KAAK8hE,SAAS/D,WAAY,GAC1D/9D,KAAKmvD,aAAa6O,iBACdh+D,KAAK8hE,SAAS/D,WACmB,QAA7B/9D,KAAK8hE,SAASC,YAAwB,EFrF9B,KE0F1B1O,EAAFtyD,UAAA8hE,gBAAE,WACE,OAAK7iE,KAAK8hE,SAAS3C,WAGXn/D,KAAK8hE,SAAS3C,UACjBn/D,KAAK8iE,YAAY9iE,KAAK8hE,SAAS/D,WAAY/9D,KAAK8hE,SAAS3C,WAIhE9L,EAAFtyD,UAAAgiE,YAAE,WACE,OAAQ/iE,KAAK8hE,SAAS5C,UACjBl/D,KAAK8iE,YAAY9iE,KAAK8hE,SAAS/D,WAAY/9D,KAAK8hE,SAAS5C,UAIxD7L,EAAVtyD,UAAA+hE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7BjjE,KAAK8hE,SAASC,YACT/hE,KAAKmvD,aAAaiP,QAAQ4E,IAAUhjE,KAAKmvD,aAAaiP,QAAQ6E,IACjEjjE,KAAKmvD,aAAawR,SAASqC,IAAUhjE,KAAKmvD,aAAawR,SAASsC,GAErC,QAA7BjjE,KAAK8hE,SAASC,YACT/hE,KAAKmvD,aAAaiP,QAAQ4E,IAAUhjE,KAAKmvD,aAAaiP,QAAQ6E,GAGhEx/D,KAAK2qC,MAAMpuC,KAAKmvD,aAAaiP,QAAQ4E,GFlHpB,KEmHpBv/D,KAAK2qC,MAAMpuC,KAAKmvD,aAAaiP,QAAQ6E,GFnHjB,oBEM5B/9D,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,0vBACV6F,SAAU,oBACV1F,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAhBAZ,KAAQysD,GAARtrD,aAAAnB,KAAAoB,EAAAA,aA6IApB,SAAa4J,GAAWzI,aAAxBnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAvHiC3J,MAuHjCwsD,QAhJA1sD,KAAQ+H,EAAAA,qBAdRomD,qDAuQArzD,KAAAmvD,aAAAA,EAAEnvD,KAAFywD,aAAAA,kQAFA,KAAAiP,GAAA,cAQA,KAAA1/D,KAAYywD,aACZ,KAAAiP,GAAA,mBAGA1/D,MAAAotC,aAAA7c,EAAA7mB,QAAA7I,UAAA,WACA2vB,EAAApvB,eAEQvB,EAAR45C,aAAA7sC,SA7CA,MAgDApL,QAAOC,eAAPqxD,EAAA/xD,UAAA,WACAiN,+HAtGAE,YAAA,EACAC,cAAA,mLAUAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,oMAsCAnO,KAAAy5C,aAAA7sC,QAEAsB,YAAA,EACAC,cAAA,qDAIAH,6EACAhO,KAAAkjE,sBAAA,GAEAh1D,YAAA,EACAC,cAAA,yHA2BAnO,KAAA+9D,WAAA/9D,KAAAmjE,SAAAnjE,KAAAmvD,aAAAwQ,QAEI3/D,KAAKojE,aAATpjE,KAAAqjE,iFAMArjE,KAAAkjE,sBAAA,EACQljE,KAAKsjE,uFAMbtjE,KAAAy5C,aAAA5sC,wFAKA,IAAAX,IAAAA,EAAAq3D,YAAA,CACA,GAAAC,GAAAxjE,KAA0ByjE,0BAE1BD,IACAA,EAAA1D,QAIA9/D,KAAOy5C,aAAP7sC,sLAWA5M,KAAAu/D,eAAAx9D,KAAAwuD,8RAqBAvwD,KAAA+hE,YAAAyB,0OAeA1Q,EAAAzsD,6iCAnNAd,QAAA,67CACEQ,MACFC,MAAA,gBAEEmF,SAAF,cACE1F,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAgtD,EAAAz5C,eAAA,WAAA,QACAnU,KAAAouD,iJA/IAR,EAAQvsD,gBA2PRm9D,kBAAAx+D,KAAAuB,EAAAA,QAzQA08D,UAAAj+D,KAAAuB,EAAAA,6DAgKA04D,UAAAj6D,KAAAuB,EAAAA,QAeAy4D,UAAAh6D,KAAGuB,EAAAA,QAQH24D,aAAAl6D,KAAAuB,EAAAA,QAGA84D,iBAAGr6D,KAAHyB,EAAAA,SAQA64D,eAAAt6D,KAAQyB,EAAAA,SAQR84D,gBAAGv6D,KAAHyB,EAAAA,SAQAg9D,iBAAAz+D,KAAAyB,EAAAA,SAGAi9D,YAAA1+D,KAAAsB,EAAAA,UAASpB,MAAT8tD,MAMA2Q,WAAA3+D,KAAAsB,EAAAA,UAAApB,MAAA+tD,MAMA2Q,gBAAA5+D,KAAGsB,EAAAA,UAAHpB,MAAAguD,OAMAN,KChOaiR,IAKXptB,eAAgBz/B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ9T,EAAAA,OAAO0jB,QAAS,EAAGzjB,UAAW,iBAC5C6T,EAAAA,MAAM,QAAS9T,EAAAA,OAAO0jB,QAAS,EAAGzjB,UAAW,iBAC7C+T,EAAAA,WAAW,gBAAiBw/B,EAAAA,OAC1BjnB,EAAAA,MAAM,kBAAmBC,EAAAA,gBACzBvY,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBjU,EAAAA,OAAO0jB,QAAS,QAIlEi9C,eAAgB9sD,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ9T,EAAAA,OAAO0jB,QAAS,KAC9B5P,EAAAA,MAAM,QAAS9T,EAAAA,OAAO0jB,QAAS,KAC/B1P,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDCShC2sD,GAAgB,EAGPC,GACT,GAAIvkD,GAAAA,eAAqC,kCAQhC4zC,IACX1gD,QAASqxD,GACTj0C,MAAO7C,EAAAA,SACP8C,WAAYi0C,IAKdC,GAAA,WACE,QAAFA,GAAqB1/D,GAAA1E,KAArB0E,YAAqBA,EArErB,MAAA0/D,MAuEaC,GAAiCr9D,EAAWo9D,mBAwCvD,QAAFnR,GAAcluD,GACd,MAAIoC,GAAJC,KAAApH,KAAU+E,IAAV/E,KATA,MAJ6CoI,GAA7C6qD,EAAA9rD,GAgBE8rD,EAAFlyD,UAAA2P,gBAAE,WACE1Q,KAAKskE,UAAUhB,kCApCnBp+D,KAACC,EAAAA,UAADC,OAAAC,SAAA,yBACEC,SAAU,yjBACVC,QAAF,+sBACEQ,MACFC,MAAA,yBACMu+D,oBAAN,UACIC,uCAAJ,sBAEArrD,YACA4qD,GAAAptB,eACAotB,GAAAC,gBAEA74D,SAAA,uBACA1F,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,sEArEAytD,EAAA1sD,0DA6EA0sD,mEAoKAjzD,KAAA4pB,SAAAA,EAAsB5pB,KAAtB0L,QAAsBA,EACA1L,KAAtBygB,kBAAAA,EACsBzgB,KAAtBsnC,gBAAAA,EACsBtnC,KAAtBmvD,aAAAA,EAC8DnvD,KAA9DiD,KAAAA,EACkCjD,KAAlCyQ,UAA8CA,kbAP9C,KAAAivD,GAA8C,eA3D9C,MAuEAl+D,QAAAC,eAAAuxD,EAAAjyD,UAAA,WACAiN,+FAxIA0gB,0FAGAxgB,YAAA,EACAC,cAAA,2JAUAugB,+BAGAxgB,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,wKAOAugB,gDAEA+R,KAAAzgC,KAAAsgC,YACAtgC,KAAAsgC,UAAUG,EAEFzgC,KAARsvD,gBAAA1iD,KAAA6zB,KAGAvyB,YAAA,EACAC,cAAA,8IA4BEA,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA0CAnO,KAAAykE,mBAAAxjE,cACIjB,KAAKsvD,gBAATziD,WACQ7M,KAAR0kE,YACQ1kE,KAAR0kE,UAAAz+C,UAEQjmB,KAAK2kE,mBAAb,2DAOA3kE,MAAAmgC,UAAAowB,EACAvwD,KAAAmvD,aAAAyB,SAAmBn1B,EAAnBz7B,KAAkCmgC,YAC1BngC,KAARyvD,iBAAA7iD,KAAA2jD,qLAoBA,IAAAvwD,KAAAqyD,iBAAA,KAAAlpC,OAAA,8DAEAnpB,MAAAqyD,iBAAA/tC,EACAtkB,KAAAykE,mBACQzkE,KAARqyD,iBAAAtC,aAAAlvD,UAAA,SAAAa,GAAA,MAAA7B,GAAAsgC,UAAAz+B,mEAQA,IAAA1B,KAAYqyD,iBACZ,KAAAlpC,OAAA,+DAEMnpB,MAANyQ,YACAzQ,KAAA4kE,0BAAA5kE,KAAAyQ,UAAAozB,eAEA7jC,KAAA6kE,QAAA7kE,KAAA8kE,gBAAA9kE,KAAA+kE,eACA/kE,KAAAokC,SAAA,EAEIpkC,KAAKuyD,aAATxwD,gDAMA,IAAA/B,KAAAokC,QAAA,CAEMpkC,KAAN0kE,WAAA1kE,KAAA0kE,UAAA7iD,eACA7hB,KAAA0kE,UAAAziD,SAEMjiB,KAAKglE,aACXhlE,KAAAglE,WAAAzhC,QACQvjC,KAAKglE,WAAa,MAEpBhlE,KAAKilE,iBAAXjlE,KAAAilE,gBAAAzgB,YACAxkD,KAAAilE,gBAAAhjD,QAEA,IAAAijD,GAAA,oCAMUrlE,EAAK2yD,aAAfzwD,OACQlC,EAAK+kE,0BAAb,MAGA5kE,MAAA4kE,2BACA,kBAAA5kE,MAAA4kE,0BAAAniE,6DAWAyiE,sIAOQ7kD,iBAAkBrgB,KAA1BygB,kBACMsI,WAAN,0BAEA/oB,KAAAglE,WAAkBG,cAAlBtkE,UAAA,WAAA,MAAAhB,GAAA0jC,UACAvjC,KAAAglE,WAAAI,kBAAAnT,WAAAjyD,KAEIA,KAAKqlE,0JAQTrlE,KAAA0kE,WAEA1kE,KAAAslE,eAGAtlE,KAAA0kE,UAAA7iD,gBACA7hB,KAAA2kE,mBAAA3kE,KAAA0kE,UAAA5iD,OAAA9hB,KAAAilE,iBAEQjlE,KAAK2kE,mBAAbp5C,SAAA0mC,WAAAjyD,KACMA,KAAKqlE,YAELrlE,KAAK0L,QAAX0tC,SAAAhzB,eAAAha,KAAA0I,EAAAA,KAAA,IAAAjU,UAAA,uKAWAsyB,aAAA,EACMiiB,cAAN,mCACMp4B,UAAWhd,KAAjBiD,KACMgnC,eAANjqC,KAAAsnC,kBACMve,WAAN,wBAEA/oB,MAAA0kE,UAAA1kE,KAAA4pB,SAAAsD,OAAwCX,GACxC7rB,EAAAA,MAAAV,KAAA0kE,UAAAhgC,gBAAA1kC,KAAA0kE,UAAAx4C,cAAAlsB,KAAA0kE,UAAAa,gBAAAn5D,KAAA6E,EAAAA,OAAA,SAAAnH,GAIA,MACWA,GADXyZ,UAAA4lB,EAAAA,iEAKAtoC,UAAA,WAAiC,MAAjChB,GAAA0jC,yKAQAiG,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACO87B,UAAP,GACOl7B,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBAjrC,KAAA2kE,mBAAAp5C,SAAAkxB,MAAAA,GAEMz8C,KAAKglE,aACXhlE,KAAAglE,WAAAI,kBAAA3oB,MAAAA,IAGAuW,EAAA3sD,2EA/WA8E,SAAA,gBACEvF,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAqtD,EAAA35C,eAAiB,WAAjB,QACAnU,KAAAugE,gEA5FAvgE,SAAQ4J,GAARzI,aAAAnB,KAAA6J,EAAAA,OAAA3J,MAAA8+D,QA5BAh/D,KAAEysD,GAAFtrD,aAAAnB,KAAAoB,EAAAA,aAmBApB,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAIApB,SAAE4J,GAAFzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAwM,EAAAA,eAIAohD,EAAAzsD,gBA/BAm/D,0BAAAxgE,KAAAuB,EAAAA,QA0QA08D,UAAAj+D,KAAAuB,EAAAA,0DA3IAo+D,UAAA3/D,KAAAuB,EAAAA,QAGArE,WAAA8C,KAAAuB,EAAAA,QAYA+4D,eAAAt6D,KAAAyB,EAAAA,SAGA84D,gBAAAv6D,KAAAyB,EAAAA,SAcAoiB,aAAA7jB,KAAAuB,EAAAA,QAQA8rD,eAAArtD,KAAAyB,EAAAA,OAAAvB,MAAA,YAmBAotD,eAAAttD,KAAGyB,EAAAA,OAAHvB,MAAA,YAMA89B,SAAAh+B,KAAAuB,EAAAA,SAMAusD,KnBtKa9B,IACXr+C,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAA8sC,MAC9Bn6B,OAAO,GAIIq8B,IACXt+C,QAAS8yD,EAAAA,cACT7yD,YAAaqP,EAAAA,WAAW,WAAM,MAAA8sC,MAC9Bn6B,OAAO,GAST86B,GAAA,WAIE,QAAFA,GAEWgW,EAEAC,GAFA7lE,KAAX4lE,OAAWA,EAEA5lE,KAAX6lE,cAAWA,EACP7lE,KAAK0B,MAAQ1B,KAAK4lE,OAAOlkE,MApE7B,MAAAkuD,oBA4OE,QAAFX,GACcvqD,EACWyqD,EAC2BsB,EAC1BJ,GAJxB,GAAFxwD,GAAAG,IAKI,IAJUA,KAAd0E,YAAcA,EACW1E,KAAzBmvD,aAAyBA,EAC2BnvD,KAApDywD,aAAoDA,EAC1BzwD,KAA1BqwD,WAA0BA,EA/D1BrwD,KAAA6vD,WAAM,GAAI9nD,GAAAA,aAIV/H,KAAA2vD,UAAM,GAAI5nD,GAAAA,aAGV/H,KAAA+vD,aAAiB,GAAIhoD,GAAAA,aAGrB/H,KAAAsvD,gBAAoB,GAAIvnD,GAAAA,aAExB/H,KAAAq4C,WAAe,aAEfr4C,KAAA0vD,aAA+C,aAE/C1vD,KAAAqvD,mBAA+B,aAE/BrvD,KAAAwvD,wBAAoChoD,EAAAA,aAAaC,MAEjDzH,KAAA8vD,oBAAgCtoD,EAAAA,aAAaC,MAG7CzH,KAAA8lE,gBAAyC,WACrC,MAAOjmE,GAAK6wD,gBACR,MAAQqV,oBAAuBC,KAAQnmE,EAAK6E,YAAY9B,cAAclB,SAI9E1B,KAAAimE,cAAuC,SAACjuD,GACpC,GAAMkuD,GAAermE,EAAKqvD,oBAAoBrvD,EAAKsvD,aAAaC,YAAYp3C,EAAQtW,OACpF,QAAS7B,EAAK8D,MAAQuiE,GAClBrmE,EAAKsvD,aAAakP,YAAYx+D,EAAK8D,IAAKuiE,IAAiB,EACzD,MAAQC,kBAAqBxiE,IAAO9D,EAAK8D,IAAKyiE,OAAUF,KAIhElmE,KAAAqmE,cAAuC,SAACruD,GACpC,GAAMkuD,GAAermE,EAAKqvD,oBAAoBrvD,EAAKsvD,aAAaC,YAAYp3C,EAAQtW,OACpF,QAAS7B,EAAK6D,MAAQwiE,GAClBrmE,EAAKsvD,aAAakP,YAAYx+D,EAAK6D,IAAKwiE,IAAiB,EACzD,MAAQI,kBAAqB5iE,IAAO7D,EAAK6D,IAAK0iE,OAAUF,KAIhElmE,KAAAumE,iBAA0C,SAACvuD,GACvC,GAAMkuD,GAAermE,EAAKqvD,oBAAoBrvD,EAAKsvD,aAAaC,YAAYp3C,EAAQtW,OACpF,OAAQ7B,GAAK2mE,aAAgBN,IAAgBrmE,EAAK2mE,YAAYN,IAClDpU,qBAAuB,GAA/B,MAKR9xD,KAAAkwD,WAAMuW,EAAAA,WAAWC,SACN1mE,KAAK8lE,gBAAiB9lE,KAAKimE,cAAejmE,KAAKqmE,cAAermE,KAAKumE,mBAG9EvmE,KAAA0wD,iBAA4B,GAOnB1wD,KAAKmvD,aACR,KAAMuQ,GAA2B,cAEnC,KAAK1/D,KAAKywD,aACR,KAAMiP,GAA2B,mBAInC1/D,MAAK8vD,oBAAsBX,EAAawX,cAAc9lE,UAAU,WAC9DhB,EAAK6B,MAAQ7B,EAAK6B,QA1PxB,MAkGAF,QAAAC,eAAMwtD,EAANluD,UAAA,qBAAA,SAAoBW,GAChB1B,KAAK4mE,mBAAmBllE,oCAIlButD,EAAVluD,UAAA6lE,mBAAA,SAA6BllE,GACrBA,IACF1B,KAAKuvD,YAAc7tD,EACnB1B,KAAKuvD,YAAYsX,eAAe7mE,QAMtCwB,OAAAC,eAAMwtD,EAANluD,UAAA,2BAAA,SAA0BW,GACtB1B,KAAKwmE,YAAc9kE,EACnB1B,KAAKqvD,sDAMT7tD,OAAAC,eAAMwtD,EAANluD,UAAA,aAAA,WAA0B,MAAOf,MAAKu5B,YACpC,SAAU73B,GACRA,EAAQ1B,KAAKmvD,aAAaC,YAAY1tD,GACtC1B,KAAK0wD,iBAAmBhvD,GAAS1B,KAAKmvD,aAAawB,QAAQjvD,GAC3DA,EAAQ1B,KAAKkvD,oBAAoBxtD,EACjC,IAAMolE,GAAU9mE,KAAK0B,KACrB1B,MAAKu5B,OAAS73B,EACd1B,KAAK8wD,aAAapvD,GAEb1B,KAAKmvD,aAAayB,SAASkW,EAASplE,IACvC1B,KAAK+vD,aAAahuD,KAAKL,oCAO7BF,OAAAC,eAAMwtD,EAANluD,UAAA,WAAA,WAAwB,MAAOf,MAAKm5B,UAClC,SAAQz3B,GACN1B,KAAKm5B,KAAOn5B,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,IACnE1B,KAAKqvD;kBAMT7tD,OAAAC,eAAMwtD,EAANluD,UAAA,WAAA,WAAwB,MAAOf,MAAKk5B,UAClC,SAAQx3B,GACN1B,KAAKk5B,KAAOl5B,KAAKkvD,oBAAoBlvD,KAAKmvD,aAAaC,YAAY1tD,IACnE1B,KAAKqvD,sDAMT7tD,OAAAC,eAAMwtD,EAANluD,UAAA,gBAAA,WAA4B,QAASf,KAAKsgC,eACxC,SAAa5+B,GACX,GAAM++B,GAAWp4B,EAAAA,sBAAsB3G,GACjCqK,EAAU/L,KAAK0E,YAAY9B,aAE7B5C,MAAKsgC,YAAcG,IACrBzgC,KAAKsgC,UAAYG,EACjBzgC,KAAKsvD,gBAAgBvtD,KAAK0+B,IAIxBA,GAAY10B,EAAQwuB,MAItBxuB,EAAQwuB,wCAoFZ00B,EAAFluD,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACQA,MAAKuvD,cACPvvD,KAAKwvD,wBAA0BxvD,KAAKuvD,YAAYE,iBAAiB5uD,UAAU,SAACiW,GAC1EjX,EAAK6B,MAAQoV,EACbjX,EAAK6vD,aAAa54C,GAClBjX,EAAKw4C,aACLx4C,EAAK8vD,UAAU5tD,KAAK,GAAI6tD,IAAwB/vD,EAAMA,EAAK6E,YAAY9B,gBACvE/C,EAAKgwD,WAAW9tD,KAAK,GAAI6tD,IAAwB/vD,EAAMA,EAAK6E,YAAY9B,oBAK9EqsD,EAAFluD,UAAAC,YAAE,WACEhB,KAAKwvD,wBAAwBvuD,cAC7BjB,KAAK8vD,oBAAoB7uD,cACzBjB,KAAK+vD,aAAaljD,WAClB7M,KAAKsvD,gBAAgBziD,YAIvBoiD,EAAFluD,UAAAivD,0BAAE,SAA0Bx5B,GACxBx2B,KAAKqvD,mBAAqB74B,GAI5By4B,EAAFluD,UAAAkvD,SAAE,SAASvJ,GACP,MAAO1mD,MAAKkwD,WAAalwD,KAAKkwD,WAAWxJ,GAAK,MAOhDuI,EAAFluD,UAAAovD,6BAAE,WACE,MAAOnwD,MAAKowD,6BAOdnB,EAAFluD,UAAAqvD,0BAAE,WACE,MAAOpwD,MAAKqwD,WAAarwD,KAAKqwD,WAAWD,4BAA8BpwD,KAAK0E,aAI9EuqD,EAAFluD,UAAAu1B,WAAE,SAAW50B,GACT1B,KAAK0B,MAAQA,GAIfutD,EAAFluD,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAK0vD,aAAel5B,GAItBy4B,EAAFluD,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKq4C,WAAa7hB,GAIpBy4B,EAAFluD,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,GAGlBs4B,EAAFluD,UAAAw7B,WAAE,SAAWzyB,GACLA,EAAM6xC,QAAU7xC,EAAMyZ,UAAYuZ,EAAAA,aACpC98B,KAAKuvD,YAAY7kC,OACjB5gB,EAAMsE,mBAIV6gD,EAAFluD,UAAAuvD,SAAE,SAAS5uD,GACP,GAAI6uD,GAAOvwD,KAAKmvD,aAAaqB,MAAM9uD,EAAO1B,KAAKywD,aAAaD,MAAMb,UAClE3vD,MAAK0wD,iBAAmBH,GAAQvwD,KAAKmvD,aAAawB,QAAQJ,GAC1DA,EAAOvwD,KAAKkvD,oBAAoBqB,GAE3BvwD,KAAKmvD,aAAayB,SAASL,EAAMvwD,KAAKu5B,UACzCv5B,KAAKu5B,OAASg3B,EACdvwD,KAAK0vD,aAAaa,GAClBvwD,KAAK+vD,aAAahuD,KAAKwuD,GACvBvwD,KAAK2vD,UAAU5tD,KAAK,GAAI6tD,IAAwB5vD,KAAMA,KAAK0E,YAAY9B,kBAI3EqsD,EAAFluD,UAAAq3C,UAAE,WACEp4C,KAAK6vD,WAAW9tD,KAAK,GAAI6tD,IAAwB5vD,KAAMA,KAAK0E,YAAY9B,iBAI1EqsD,EAAFluD,UAAA8vD,iBAAE,WACE,MAAO7wD,MAAKqwD,WAAarwD,KAAKqwD,WAAW5T,UAAQ3tC,IAInDmgD,EAAFluD,UAAAu7B,QAAE,WAEMt8B,KAAK0B,OACP1B,KAAK8wD,aAAa9wD,KAAK0B,OAGzB1B,KAAKq4C,cAIC4W,EAAVluD,UAAA+vD,aAAA,SAAuBpvD,GACnB1B,KAAK0E,YAAY9B,cAAclB,MAC3BA,EAAQ1B,KAAKmvD,aAAa4B,OAAOrvD,EAAO1B,KAAKywD,aAAaO,QAAQrB,WAAa,IAO7EV,EAAVluD,UAAAmuD,oBAAA,SAA8BjwC,GAC1B,MAAQjf,MAAKmvD,aAAa8B,eAAehyC,IAAQjf,KAAKmvD,aAAawB,QAAQ1xC,GAAQA,EAAM,qBAvS7F/Z,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uBACVuN,WACEs+C,GACAC,IACCt+C,QAASu+C,GAA0Bt+C,YAAam8C,IAEnDlpD,MACEsrD,uBAAwB,OACxBzP,mBAAoB,kDACpB0P,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZ3zB,SAAU,YACVC,YAAa,sBAEf7yB,SAAU,6DA/EZjG,KAAE6N,EAAAA,aAmBF7N,KAAQysD,GAARtrD,aAAAnB,KA8MOoB,EAAAA,aACPpB,SAAA4J,GAAAzI,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmB6J,EAAAA,OAAnB3J,MAA0BwsD,QA9M1B1sD,KAAQq9C,GAARl8C,aAAAnB,KA+MOoB,EAAAA,gCA/IPurD,gBAAA3sD,KAAGuB,EAAAA,QAcHqrD,sBAAA5sD,KAAGuB,EAAAA,QAQH/E,QAAAwD,KAAGuB,EAAAA,QAiBH9C,MAAAuB,KAAGuB,EAAAA,QASH/C,MAAAwB,KAAGuB,EAAAA,QASHrE,WAAA8C,KAAGuB,EAAAA,QAsBHopD,aAAA3qD,KAAGyB,EAAAA,SAIHgpD,YAAAzqD,KAAGyB,EAAAA,UApLHsoD,iCCAA,sBA4BA/pD,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,gCA7BZ0sD,mBAoEE,QAAFC,GAAqBzhC,EAAkCpvB,GAAlCnB,KAArBuwB,MAAqBA,EAAkCvwB,KAAvDmB,mBAAuDA,EAlBvDnB,KAAA8tB,cAA0BtmB,EAAAA,aAAaC,MAgBvC,MATAjG,QAAAC,eAAMuwD,EAANjxD,UAAA,2BACI,WAA0B+N,KAAnB9O,KAAKsgC,UAA0BtgC,KAAKiyD,WAAW7vD,WAAapC,KAAKsgC,eAE1E,SAAa5+B,GACX1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,oCASzCswD,EAAFjxD,UAAA6f,YAAE,SAAYlX,GACNA,EAAR,YACM1J,KAAKkyD,sBAITF,EAAFjxD,UAAAC,YAAE,WACEhB,KAAK8tB,cAAc7sB,eAGrB+wD,EAAFjxD,UAAAyI,mBAAE,WACExJ,KAAKkyD,sBAGPF,EAAFjxD,UAAAilB,MAAE,SAAMlc,GACA9J,KAAKiyD,aAAejyD,KAAKoC,WAC3BpC,KAAKiyD,WAAWvnC,OAChB5gB,EAAMqsB,oBAIF67B,EAAVjxD,UAAAmxD,yCACUC,EAAqBnyD,KAAKiyD,WAAajyD,KAAKiyD,WAAW3C,gBAAkBnjD,EAAAA,KACzEimD,EAAgBpyD,KAAKiyD,YAAcjyD,KAAKiyD,WAAWI,iBACrDryD,KAAKiyD,WAAWI,iBAAiB/C,gBAAkBnjD,EAAAA,KACjDmmD,EAAoBtyD,KAAKiyD,WAC3BvxD,EAAAA,MAAMV,KAAKiyD,WAAWM,aAAcvyD,KAAKiyD,WAAWO,cACpDrmD,EAAAA,IAEJnM,MAAK8tB,cAAc7sB,cACnBjB,KAAK8tB,cAAgBptB,EAAAA,MACnBV,KAAKuwB,MAAM7mB,QACXyoD,EACAC,EACAE,GACAzxD,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,iCAvE9C8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEC,SAAU,4hBACVC,QAAF,quBACEQ,MACFC,MAAA,wBACMysD,uCAAN,kCACIC,qBAAJ,8CACIC,mBAAJ,6CAEAxnD,SAAA,sBACA1F,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAjCAksD,EAAAzrD,mFAyCAqsD,cAAA1tD,KAAA8tB,EAAAA,aAAA5tB,MAAA2sD,OAaAC,iCClEA,sBA8BA9sD,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAwK,GACAi5C,GACAvpC,EAAAA,cACA0iB,EAAAA,WACA18B,EAAAA,cAEFG,SACEqjD,GACAC,GACAC,GACAC,GACAhE,GACA+C,GACAD,GACAmB,GACAC,GACAC,GACAC,IAEFxjD,cACEijD,GACAC,GACAC,GACAC,GACAhE,GACA+C,GACAD,GACAmB,GACAC,GACAC,GACAC,IAEFzgD,WACE0gD,GACAC,IAEFhqC,iBACE0pC,GACAI,QAvEJG,gCC+BAxzD,KAAAw5B,WAA+B,EAM/Bx5B,KAAAyzD,QAA4B,EAH5B,MALAjyD,QAAAC,eAAMiyD,EAAN3yD,UAAA,gBAAA,WAA4B,MAAOf,MAAKw5B,eACtC,SAAa93B,GAAkB1B,KAAKw5B,UAAYnxB,EAAAA,sBAAsB3G,oCAKxEF,OAAAC,eAAMiyD,EAAN3yD,UAAA,aAAA,WAAyB,MAAOf,MAAKyzD,YACnC,SAAU/xD,GAAkB1B,KAAKyzD,OAASprD,EAAAA,sBAAsB3G,mDAzBlEwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEU,MACFwM,KAAA,YACMksB,0BAAN,uCACIk1B,+BAAJ,WACIC,4BAAJ,QACI5tD,MAAJ,eAEAV,SAAA,GACAC,QAAA,+SACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,+EAYA4tD,iCClCA,sBAcAxuD,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,GAAiBD,EAAAA,cAC3BK,SAAUikD,GAAYrkD,IACtBQ,cAAe6jD,QAjBjB5P,qFC8BAjkD,GAAAg0D,aAAiC,EAUjCh0D,EAAAi0D,YAAkD,YAxClD,MAyBkC1rD,GAAlC2rD,EAAA5sD,GAGA3F,OAAAC,eAAMsyD,EAANhzD,UAAA,kBAAA,WAA8B,MAAOf,MAAK6zD,iBACxC,SAAe/mD,GAAiB9M,KAAK6zD,YAAcxrD,EAAAA,sBAAsByE,mDAX3E5H,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,gBACV8F,SAAU,eACVpF,MACEC,MAAO,uCAKXguD,aAAA9uD,KAAGuB,EAAAA,QAaHqtD,cAAA5uD,KAAGuB,EAAAA,SAxCHstD,GAyBkCE,EAAAA,c3FFrBC,IAMXC,gBAAiBj9C,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,YAAa9T,EAAAA,OAAOC,UAAW,kBACrC6T,EAAAA,MAAM,WAAY9T,EAAAA,OAAOC,UAAW,oBACpC+T,EAAAA,WAAW,yBAA0BC,EAAAA,QAZO,wCAgB9C88C,sBAAuBl9C,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,YAAa9T,EAAAA,OACjBsH,OAAQ,yBAER0pD,QAASC,gBAAiB,UAE5Bn9C,EAAAA,MAAM,WAAY9T,EAAAA,OAChBsH,OAAQ,wBAER0pD,QAASE,eAAgB,UAE3Bl9C,EAAAA,WAAW,yBAA0Bw/B,EAAAA,OACnCjnB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiB9Y,UAAU,IACrDO,EAAAA,QA7B0C,0CAkC9Ck9C,cAAet9C,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,YAAa9T,EAAAA,OAAOsH,OAAQ,MAAOyM,WAAY,YACrDD,EAAAA,MAAM,WAAY9T,EAAAA,OAAOsH,OAAQ,IAAKyM,WAAY,aAClDC,EAAAA,WAAW,yBAA0BC,EAAAA,QArCO,uD4FF9C,QAAFm9C,GAAqBzQ,GAAAhkD,KAArBgkD,UAAqBA,EAlBrB,sBAcA9+C,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,gFAPZH,KAAmBwS,EAAAA,eARnB+8C,KCwCIC,GAAW,iBAuDb,QAAFC,GAAsCC,EACxBzzD,EACA0zD,EACQp0C,GAHpB,GAAF5gB,GAIIsH,EAJJC,KAAApH,KAIU40D,EAAWzzD,EAAoB0zD,IAJzC70D,WAGsBH,GAAtB4gB,kBAAsBA,EApBtB5gB,EAAAg0D,aAAwB,EAGxBh0D,EAAAi1D,cAA2B,GAAIjpD,GAAAA,QAY/BhM,EAAAk1D,UAAc,8BAA8BL,KAOxC70D,EAAK+0D,UAAYA,IAbrB,MAjBuCxsD,GAAvCusD,EAAAxtD,GAIA3F,OAAAC,eAAMkzD,EAAN5zD,UAAA,kBAAA,WAA8B,MAAOf,MAAK6zD,iBACxC,SAAenyD,GACb1B,KAAK6zD,YAAcxrD,EAAAA,sBAAsB3G,oCA4B3CizD,EAAF5zD,UAAAi0D,eAAE,WACE,MAAIh1D,MAAK40D,UACA50D,KAAK40D,UAAUZ,WAEjBh0D,KAAKg0D,YAIdW,EAAF5zD,UAAAk0D,YAAE,WACE,QAAIj1D,KAAK40D,WAC4E,aAA3E50D,KAAKk1D,SAAWl1D,KAAK40D,UAAUd,YAAc9zD,KAAKm1D,sBAM9DR,EAAF5zD,UAAAo0D,kBAAE,WACE,MAAOn1D,MAAKk1D,SAAW,WAAa,aAGtCP,EAAF5zD,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACQA,MAAKo1D,cAEPp1D,KAAKkjC,OAAO92B,KACVqV,EAAAA,UAAS,MACTxQ,EAAAA,OAAO,WAAM,MAAApR,GAAKq1D,WAAar1D,EAAKkpC,UACpCj0B,EAAAA,KAAK,IACLjU,UAAU,WACVhB,EAAKkpC,QAAU,GAAIhoB,GAAAA,eAAelhB,EAAKu1D,aAAapR,UAAWnkD,EAAK4gB,sBAK1Ek0C,EAAF5zD,UAAA6f,YAAE,SAAYlX,GACV1J,KAAK80D,cAAcloD,KAAKlD,IAG1BirD,EAAF5zD,UAAAC,YAAE,WACEmG,EAAJpG,UAAUC,YAAVoG,KAAApH,MACIA,KAAK80D,cAAcjoD,YAGrB8nD,EAAF5zD,UAAAs0D,eAAE,SAAevrD,GACb,GAAMtB,GAAYsB,EAAMiC,QAAQvD,UAEzB8sD,EAAXxrD,EAAAwrD,UAAsB5yC,EAAtB5Y,EAAA4Y,OAMsB,UAAd4yC,GAAoC,aAAZ5yC,EAC1Bla,EAAUG,IARK,gBASQ,UAAd2sD,GAAqC,cAAZ5yC,GAClCla,EAAUC,OAVK,gCApGrBvD,KAACC,EAAAA,UAADC,OAAAG,QAAA,mpCACEF,SAAU,sBACV8F,SAAF,oBACE7F,SAAU,meACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,WAAA,YACE+vD,SAAF,SAAA,SAAA,kBACEp8C,YAAF+6C,GAAAM,eACE5hD,oCAKoC9D,KAAtC/I,MACAC,MAAA,sBACMwvD,uBAAN,WACIC,sCAAJ,+IAlCAvwD,KAAQi9B,EAAAA,4BAfRj9B,KAAE8M,EAAAA,oBAUF2iD,EAAApuD,4FA6DAouD,uBAvFAe,GAAA,yBAwKA,wEALA3vD,MACAC,MAAA,sBAIA0vD,mBCtGE,QAAFC,GACmBrZ,EACPnqB,EACAD,EACA/wB,GAJV,GAAFtB,GAAAG,IACmBA,MAAnBs8C,MAAmBA,EACPt8C,KAAZmyB,SAAYA,EACAnyB,KAAZkyB,cAAYA,EACAlyB,KAAZmB,mBAAYA,EANZnB,KAAA41D,0BAAsCpuD,EAAAA,aAAaC,MAU/CzH,KAAK41D,0BAA4Bl1D,EAAAA,MAC/B47C,EAAMpZ,OACNoZ,EAAM/2B,OACN+2B,EAAMwY,cAAc1oD,KAAK6E,EAAAA,OAAO,SAAAvH,GAAW,SAAGA,EAHpD,aAG0EA,EAH1E,cAKK7I,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,iBAEzC8wB,EAAcE,QAAQD,EAASvvB,eAOnC,MAGE+yD,GAAF50D,UAAA80D,QAAE,WACE71D,KAAKs8C,MAAMzlB,UAIb8+B,EAAF50D,UAAA+0D,YAAE,WACE,MAAO91D,MAAKs8C,MAAM4Y,UAIpBS,EAAF50D,UAAAo0D,kBAAE,WACE,MAAOn1D,MAAKs8C,MAAM6Y,qBAIpBQ,EAAF50D,UAAAg1D,YAAE,WACE,MAAO/1D,MAAKs8C,MAAMhuB,IAIpBqnC,EAAF50D,UAAAi1D,YAAE,WACE,OAAQh2D,KAAKs8C,MAAM0X,aAAeh0D,KAAKs8C,MAAMl6C,UAI/CuzD,EAAF50D,UAAAk1D,SAAE,SAASnsD,GACP,OAAQA,EAAMyZ,SAEZ,IAAKM,GAAAA,MACL,IAAKD,GAAAA,MACH9Z,EAAMsE,iBACNpO,KAAK61D,SACL,MACF,SACE,SAINF,EAAF50D,UAAAC,YAAE,WACEhB,KAAK41D,0BAA0B30D,cAC/BjB,KAAKkyB,cAAcI,eAAetyB,KAAKmyB,SAASvvB,+BAnGpDsC,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEE,QAAF,u3BACED,SAAU,mRACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEqT,YACF+6C,GAAAC,gBACAD,GAAAE,uBAEAruD,MACAC,MAAA,6BACMuM,KAAN,SACI2vB,YAAJ,kBACIqf,kBAAJ,0BACI2U,uBAAJ,gBACIzjD,uBAAJ,gBACIjE,uBAAwB,iBACxBgnD,uBAAwB,gBACxB5mD,UAAJ,YACIovB,YAAJ,mBACIm4B,qBAAsB,uQA5B1BjxD,KAAQuzB,EAAAA,eATRvzB,KAAE+H,EAAAA,qBAHF0oD,EAAApvD,kFA4EAovD,iCAyDA,+EALA5vD,MACAC,MAAA,8CAIAowD,iCAaA,yEALArwD,MACAC,MAAA,wCAIAqwD,iCC9JA,sBAsBAnxD,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUC,EAAAA,aAAcknD,EAAAA,mBAAoBhnD,EAAAA,cAC5CG,SACEskD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,IAEF5kD,cACEkkD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,QAxCJ8B,mBCsCE,QAAFC,GAAsBrkC,GAAAnyB,KAAtBmyB,SAAsBA,EAHtBnyB,KAAAy2D,SAAqB,EACrBz2D,KAAA02D,SAAqB,EAUrB,MAJAl1D,QAAAC,eAAM+0D,EAANz1D,UAAA,eAAA,WAA0B,MAAOf,MAAKy2D,cACpC,SAAY/0D,GAAiB1B,KAAKy2D,SAAWE,GAAej1D,oCAI9DF,OAAAC,eAAM+0D,EAANz1D,UAAA,eAAA,WAA0B,MAAOf,MAAK02D,cACpC,SAAYh1D,GAAiB1B,KAAK02D,SAAWC,GAAej1D,oCAM5D80D,EAAFz1D,UAAA61D,UAAE,SAAUC,EAAkBn1D,GAC1B1B,KAAKmyB,SAASvvB,cAAcS,MAAMwzD,GAAYn1D,kBAjClDwD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,cACVpF,MACFC,MAAA,iBAEAV,SAAA,gEACAC,QAAA,gvCACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oEAnBA0wD,EAAEjwD,mEAmCFiwD,KA9CAM,GAAA,8IA6EAA,EAAAzwD,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qPAnBAO,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAmxD,EAAEz9C,eAAF,WAAA,QACAnU,KAAA6N,EAAAA,8GAqBA,+HAAAgkD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC9EAC,GAAA,WA2BE,QAAFA,GAAcC,EAAoBC,GAAhC,GAAFv3D,GAAAG,IAtBAA,MAAAq3D,YAAwB,EAGxBr3D,KAAAs3D,SAAqB,EAoBjBt3D,KAAKu3D,QAAU,GAAIvuC,OAAMmuC,GACzBn3D,KAAKu3D,QAAQC,KAAK,EAAG,EAAGx3D,KAAKu3D,QAAQ/0D,QAErCxC,KAAKigB,UAAYm3C,EAAMptD,IAAI,SAAAytD,GAAQ,MAAA53D,GAAK63D,WAAWD,KA3DvD,MAuCEj2D,QAAFC,eAAMy1D,EAANn2D,UAAA,gBAAE,WAAyB,MAAOf,MAAKs3D,SAAW,mCAMhD91D,OAAFC,eAAMy1D,EAANn2D,UAAA,eAAE,WACE,GAAI42D,GAAal0D,KAAKC,IAA1BqG,MAAqBtG,KAAYzD,KAAKu3D,QAGlC,OAAOI,GAAa,EAAI33D,KAAK43D,SAAWD,EAAa,EAAI33D,KAAK43D,0CAcxDV,EAAVn2D,UAAA22D,WAAA,SAAqBD,GAEjB,GAAII,GAAgB73D,KAAK83D,iBAAiBL,EAAKM,QAS/C,OANA/3D,MAAKg4D,kBAAkBH,EAAeJ,GAItCz3D,KAAKq3D,YAAcQ,EAAgBJ,EAAKM,QAEjC,GAAIE,IAAaj4D,KAAKs3D,SAAUO,IAIjCX,EAAVn2D,UAAA+2D,iBAAA,SAA2BI,GACvB,GAAIA,EAAWl4D,KAAKu3D,QAAQ/0D,OAC1B,KAAM2mB,OAAM,oCAAoC+uC,EAAtD,kCACyCl4D,KAAKu3D,QAAQ/0D,OAAtD,KAII,IAAIq1D,IAAiB,EACjBM,GAAe,CAGnB,IAEMn4D,KAAKq3D,YAAca,EAAWl4D,KAAKu3D,QAAQ/0D,OAC7CxC,KAAKo4D,YAIPP,EAAgB73D,KAAKu3D,QAAQx5C,QAAQ,EAAG/d,KAAKq3D,cAGvB,GAAlBQ,GAKJM,EAAcn4D,KAAKq4D,iBAAiBR,GAIpC73D,KAAKq3D,YAAcQ,EAAgB,GARjC73D,KAAKo4D,kBAWAD,EAAcN,EAAgBK,EAIvC,OAAOz0D,MAAKC,IAAIm0D,EAAe,IAIzBX,EAAVn2D,UAAAq3D,oBACIp4D,KAAKq3D,YAAc,EACnBr3D,KAAKs3D,UAGL,KAAK,GAAIjtD,GAAI,EAAGA,EAAIrK,KAAKu3D,QAAQ/0D,OAAQ6H,IACvCrK,KAAKu3D,QAAQltD,GAAK5G,KAAKC,IAAI,EAAG1D,KAAKu3D,QAAQltD,GAAK,IAQ5C6sD,EAAVn2D,UAAAs3D,iBAAA,SAA2BR,GACvB,IAAK,GAAIxtD,GAAIwtD,EAAgB,EAAGxtD,EAAIrK,KAAKu3D,QAAQ/0D,OAAQ6H,IACvD,GAAuB,GAAnBrK,KAAKu3D,QAAQltD,GACf,MAAOA,EAKX,OAAOrK,MAAKu3D,QAAQ/0D,QAId00D,EAAVn2D,UAAAi3D,kBAAA,SAA4BjqC,EAAe0pC,GACvC,IAAK,GAAIptD,GAAI,EAAGA,EAAIotD,EAAKM,QAAS1tD,IAChCrK,KAAKu3D,QAAQxpC,EAAQ1jB,GAAKotD,EAAKa,SAnJrCpB,KA4JAe,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBx4D,KAArBu4D,IAAqBA,EAAoBv4D,KAAzCw4D,IAAyCA,EA7JzC,MAAAP,MCiBAQ,GAAA,wBAEAz4D,KAAA04D,MAAkB,EAClB14D,KAAAy2D,SAAqB,EApBrB,MAiCEgC,GAAF13D,UAAA43D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAc77C,GAC/Dhd,KAAK84D,YAAcC,GAAeH,GAClC54D,KAAK04D,MAAQnB,EAAQK,SACrB53D,KAAKy2D,SAAWc,EAAQe,QACxBt4D,KAAKg5D,MAAQH,EACb74D,KAAKguB,WAAahR,GAUpBy7C,EAAF13D,UAAAk4D,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCl5D,KAAK84D,YAAvC,MAAwDK,EAAxD,MAUEV,EAAF13D,UAAAq4D,gBAAE,SAAgBC,EAAkBn8B,GAGhC,MAAkB,KAAXA,EAAe,IAAMo8B,GAAK,IAAID,EAAzC,MAAuDr5D,KAAK84D,YAA5D,OAA8E57B,IAU5Eu7B,EAAF13D,UAAAw4D,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDx5D,KAAK84D,YAA5D,KAUEL,EAAF13D,UAAA04D,SAAE,SAAShC,EAAmBH,EAAkBoC,GAE5C,GAAIC,GAAsB,IAAM35D,KAAKg5D,MAIjCY,GAA8B55D,KAAKg5D,MAAQ,GAAKh5D,KAAKg5D,KAEzDh5D,MAAK65D,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvD55D,KAAK85D,aAAarC,EAAMH,EAAUqC,EAAqBC,IAIzDnB,EAAF13D,UAAA84D,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgBj6D,KAAKi5D,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBl6D,KAAKguB,WAAuB,QAAU,MACjDypC,GAAKb,UAAUsD,EAAMl6D,KAAKo5D,gBAAgBa,EAAeP,IACzDjC,EAAKb,UAAU,QAAS0C,GAAKt5D,KAAKu5D,YAAYU,EAAexC,EAAKM,YAMpEU,EAAF13D,UAAAo5D,cAAE,WACE,MAAUn6D,MAAK84D,YAAnB,OAAqC94D,KAAKy2D,SAA1C,SAOEgC,EAAF13D,UAAAq5D,YAAE,SAAYC,GACV,MAAUr6D,MAAKy2D,SAAnB,MAAiCz2D,KAAKu5D,YAAYc,EAAY,IAgB5D5B,EAAF13D,UAAAu5D,kBAAE,WAA+C,MAAO,OA7IxD7B,KA6JA8B,GAAA,SAAApzD,GAEE,QAAFozD,GAAqBC,GAAnB,GAAF36D,GAA+CsH,EAA/CC,KAAApH,OAAAA,WAAqBH,GAArB26D,eAAqBA,IA/JrB,MA6JqCpyD,GAArCmyD,EAAApzD,GAIEozD,EAAFx5D,UAAA43D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAc77C,GAC/D7V,EAAJpG,UAAU43D,KAAVvxD,KAAApH,KAAe44D,EAAYrB,EAASsB,EAAM77C,GACtChd,KAAKw6D,eAAiBzB,GAAe/4D,KAAKw6D,iBAG5CD,EAAFx5D,UAAA+4D,aAAE,SAAarC,EAAmBH,GAC9BG,EAAKb,UAAU,MAAO52D,KAAKo5D,gBAAgBp5D,KAAKw6D,eAAgBlD,IAChEG,EAAKb,UAAU,SAAU0C,GAAKt5D,KAAKu5D,YAAYv5D,KAAKw6D,eAAgB/C,EAAKa,YAG3EiC,EAAFx5D,UAAAu5D,kBAAE,WACE,OACE,SAAUhB,GAAQt5D,KAAKo6D,YAAYp6D,KAAKw6D,gBAA9C,MAAmEx6D,KAAKm6D,mBAItEI,EAAFx5D,UAAA05D,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE9BD,EAAKE,OAAOxxD,QAAQ,SAAAquD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SAtL/B2D,GA6JqC9B,IAoCrCoC,GAAA,SAAA1zD,GAME,QAAF0zD,GAAcn5D,GAAZ,GAAF7B,GACIsH,EADJC,KAAApH,OAAAA,WAEIH,GAAKi7D,YAAYp5D,KAzMrB,MAiMqC0G,GAArCyyD,EAAA1zD,GAWE0zD,EAAF95D,UAAA+4D,aAAE,SAAarC,EAAmBH,EAAkByC,EACrCC,GACX,GAAIe,GAAuBhB,EAAe/5D,KAAKg7D,cAC/Ch7D,MAAKi7D,eAAiBj7D,KAAKi5D,gBAAgB8B,EAAsBf,GAKjEvC,EAAKb,UAAU,YAAa52D,KAAKo5D,gBAAgBp5D,KAAKi7D,eAAgB3D,IACtEG,EAAKb,UAAU,aAAc0C,GAAKt5D,KAAKu5D,YAAYv5D,KAAKi7D,eAAgBxD,EAAKa,YAG/EuC,EAAF95D,UAAAu5D,kBAAE,WACE,OACE,gBAAiBhB,GAAQt5D,KAAKo6D,YAAYp6D,KAAKi7D,gBAArD,MAA0Ej7D,KAAKm6D,mBAI7EU,EAAF95D,UAAA05D,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAKE,OAAOxxD,QAAQ,SAAAquD,GAClBA,EAAKb,UAAU,YAAa,MAC5Ba,EAAKb,UAAU,aAAc,SAIzBiE,EAAV95D,UAAA+5D,YAAA,SAAsBp5D,GAClB,GAAMw5D,GAAax5D,EAAMw4B,MAAM,IAE/B,IAA0B,IAAtBghC,EAAW14D,OACb,KAAM2mB,OAAM,uDAAuDznB,EAAzE,IAGI1B,MAAKg7D,eAAiB5gC,WAAW8gC,EAAW,IAAM9gC,WAAW8gC,EAAW,KA9O5EL,GAiMqCpC,IAwDrC0C,GAAA,SAAAh0D,+DAzPA,MAyPmCiB,GAAnC+yD,EAAAh0D,GAEEg0D,EAAFp6D,UAAA+4D,aAAE,SAAarC,EAAmBH,GAE9B,GAAIyD,GAAuB,IAAM/6D,KAAKy2D,SAGlC2E,GAAuBp7D,KAAK04D,MAAQ,GAAK14D,KAAK04D,MAG9CuC,EAAiBj7D,KAAKi5D,gBAAgB8B,EAAsBK,EAEhE3D,GAAKb,UAAU,MAAO52D,KAAKo5D,gBAAgB6B,EAAgB3D,IAC3DG,EAAKb,UAAU,SAAU0C,GAAKt5D,KAAKu5D,YAAY0B,EAAgBxD,EAAKa,YAGtE6C,EAAFp6D,UAAA05D,MAAE,SAAMC,GACJA,EAAKE,OAAOxxD,QAAQ,SAAAquD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SA5Q/BuE,GAyPmC1C,kBCpLjC,QAAF4C,GAAsBlpC,EAA0ClvB,GAA1CjD,KAAtBmyB,SAAsBA,EAA0CnyB,KAAhEiD,KAAgEA,EARhEjD,KAAAs7D,QAA4B,MAqB5B,MATA95D,QAAAC,eAAM45D,EAANt6D,UAAA,YAAA,WAAuB,MAAOf,MAAKg5D,WACjC,SAASt3D,GAAiB1B,KAAKg5D,MAAQrC,GAAej1D,oCAIxDF,OAAAC,eAAM45D,EAANt6D,UAAA,kBAAA,WAA6B,MAAOf,MAAKs7D,aACvC,SAAe55D,GAAiB1B,KAAKs7D,QAAUC,GAAe75D,oCAIhEF,OAAAC,eAAM45D,EAANt6D,UAAA,iBAAA,SAAgBW,GACZ,GAAM++B,GAAW86B,GAAe75D,EAE5B++B,KAAazgC,KAAKw7D,aACpBx7D,KAAKw7D,WAAa/6B,EAClBzgC,KAAKy7D,eAAez7D,KAAKw7D,8CAI7BH,EAAFt6D,UAAA+f,SAAE,WACE9gB,KAAK07D,aACL17D,KAAK27D,mBAOPN,EAAFt6D,UAAA6H,sBAAE,WACE5I,KAAK47D,gBAICP,EAAVt6D,UAAA26D,sBACI,IAAK17D,KAAK64D,KACR,KAAM1vC,OAAM,qFAMRkyC,EAAVt6D,UAAA46D,2BACS37D,KAAKw7D,YACRx7D,KAAKy7D,eAAe,QAKhBJ,EAAVt6D,UAAA06D,eAAA,SAAyBI,GACjB77D,KAAK87D,aACP97D,KAAK87D,YAAYrB,MAAMz6D,MAzFR,QA4Fb67D,EACF77D,KAAK87D,YAAc,GAAIX,IACdU,GAAaA,EAAU99C,QAAQ,MAAQ,EAChD/d,KAAK87D,YAAc,GAAIjB,IAAgBgB,GAEvC77D,KAAK87D,YAAc,GAAIvB,IAAgBsB,IAKnCR,EAAVt6D,UAAA66D,mCACUrE,EAAU,GAAIL,IAAgBl3D,KAAK64D,KAAM74D,KAAK46D,QAC9C59C,EAAYhd,KAAKiD,KAAOjD,KAAKiD,KAAKvB,MAAQ,KAChD1B,MAAK87D,YAAYnD,KAAK34D,KAAK44D,WAAYrB,EAASv3D,KAAK64D,KAAM77C,GAE3Dhd,KAAK46D,OAAOxxD,QAAQ,SAACquD,EAAMx1D,GACzB,GAAMg7B,GAAMs6B,EAAQt3C,UAAUhe,EAC9BpC,GAAKi8D,YAAYrC,SAAShC,EAAMx6B,EAAIs7B,IAAKt7B,EAAIu7B,OAG/Cx4D,KAAK26D,cAAc36D,KAAK87D,YAAYxB,sBAItCe,EAAFt6D,UAAA45D,cAAE,SAAct3D,GACRA,IACFrD,KAAKmyB,SAASvvB,cAAcS,MAAMA,EAAM,IAAMA,EAAM,oBApH1D6B,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,cACV7F,SAAU,uCACVC,QAAF,gvCACEQ,MACFC,MAAA,iBAEAJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHArBA01D,EAAQ90D,kFA4CRqyD,aAAA1zD,KAAAuB,EAAAA,QAKAo1D,YAAA32D,KAAQuB,EAAAA,SAUR40D,iCClFA,sBAiBAn2D,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUm0C,GAAej0C,IACzBI,SACE4rD,GACA7E,GACAM,GACAxT,GACAj0C,GACA2nD,GACAC,GACAF,IAEFlnD,cACEwrD,GACA7E,GACAM,GACAE,GACAC,GACAF,QAnCJgF,KjBsEAC,GAAA,WAME,QAAFA,GAAc7oD,GAGJ,EAAc00B,SAClB7nC,KAAK2pD,WAAU,EAEf3pD,KAAK+pD,IAAG,EAlFd,MAAAiS,oBA6HE,QAAFzS,GACwB6B,EACZE,EACsB96C,GAFVxQ,KAAxBorD,YAAwBA,EACZprD,KAAZsrD,WAAYA,EA1BZtrD,KAAAmsD,gBAA4B,GAAIt+B,KAMhC7tB,KAAAusD,gBAA4B,GAAI1+B,KAGhC7tB,KAAAi8D,kBAA8B,GAAIpuC,KAGlC7tB,KAAA4rD,sBAAkC,GAAI/9B,KAGtC7tB,KAAAk8D,uBAAmC,GAAIruC,KAOvC7tB,KAAAm8D,qBAAiC,iBAM3Bn8D,KAAKyQ,UAAYD,EAjIvB,MAyIE+4C,GAAFxoD,UAAAq7D,WAAE,SAAW3S,EAAkBM,GAC3B,MAAO/pD,MAAKq8D,sBAAsB,GAAI5S,EAAUM,IAQlDR,EAAFxoD,UAAAu7D,kBAAE,SAAkB7S,EAAkB8S,GAClC,MAAOv8D,MAAKw8D,6BAA6B,GAAI/S,EAAU8S,IASzDhT,EAAFxoD,UAAAs7D,sBAAE,SAAsBnQ,EAAmBzC,EAAkBM,GACzD,MAAO/pD,MAAKisD,kBAAkBC,EAAWzC,EAAU,GAAIuS,IAAcjS,KASvER,EAAFxoD,UAAAy7D,6BAAE,SAA6BtQ,EAAmBzC,EAAkB8S,GAChE,GAAME,GAAmBz8D,KAAKsrD,WAAWC,SAASC,EAAAA,gBAAgBkR,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAM5S,GAAa3pD,KAAKiqD,+BAA+BwS,EACvD,OAAOz8D,MAAKisD,kBAAkBC,EAAWzC,EAAU,GAAIuS,IAAcrS,KAOvEJ,EAAFxoD,UAAA67D,cAAE,SAAc7S,GACZ,MAAO/pD,MAAK68D,yBAAyB,GAAI9S,IAO3CR,EAAFxoD,UAAA+7D,qBAAE,SAAqBP,GACnB,MAAOv8D,MAAK+8D,gCAAgC,GAAIR,IAQlDhT,EAAFxoD,UAAA87D,yBAAE,SAAyB3Q,EAAmBnC,GAC1C,MAAO/pD,MAAKqsD,qBAAqBH,EAAW,GAAI8P,IAAcjS,KAQhER,EAAFxoD,UAAAg8D,gCAAE,SAAgC7Q,EAAmBqQ,GACjD,GAAME,GAAmBz8D,KAAKsrD,WAAWC,SAASC,EAAAA,gBAAgBkR,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAM5S,GAAa3pD,KAAKmqD,sBAAsBsS,EAC9C,OAAOz8D,MAAKqsD,qBAAqBH,EAAW,GAAI8P,IAAcrS,KAWhEJ,EAAFxoD,UAAAi8D,uBAAE,SAAuBC,EAAe9W,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxC8W,GACIj9D,KAAKk8D,uBAAuBxtC,IAAIuuC,EAAO9W,GAChCnmD,MAOTupD,EAAFxoD,UAAAytD,sBAAE,SAAsByO,GACpB,MAAOj9D,MAAKk8D,uBAAuBluD,IAAIivD,IAAUA,GASnD1T,EAAFxoD,UAAAm8D,uBAAE,SAAuB/W,GAErB,MADAnmD,MAAKm8D,qBAAuBhW,EACrBnmD,MAOTupD,EAAFxoD,UAAA0tD,uBAAE,WACE,MAAOzuD,MAAKm8D,sBAWd5S,EAAFxoD,UAAAo8D,kBAAE,SAAkBhS,GAAlB,GAAFtrD,GAAAG,KACU+pD,EAAM/pD,KAAKsrD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKpB,EACH,KAAM2B,IAAmCP,EAG3C,IAAMiS,GAAap9D,KAAKi8D,kBAAkBjuD,IAAI+7C,EAE9C,OAAIqT,GACKjxD,EAAAA,GAAakxD,GAASD,IAGxBp9D,KAAK6pD,uBAAuB,GAAImS,IAAc7Q,IAAU/+C,KAC7DkxD,EAAAA,IAAI,SAAAjT,GAAO,MAAAxqD,GAAKo8D,kBAAkBvtC,IAAG,EAAO27B,KAC5CrgD,EAAAA,IAAI,SAAAqgD,GAAO,MAAAgT,IAAShT,OAYxBd,EAAFxoD,UAAA0sD,gBAAE,SAAgB91C,EAAcu0C,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAMzuC,GAAM2uC,GAAQF,EAAWv0C,GACzB4S,EAASvqB,KAAKmsD,gBAAgBn+C,IAAIyP,EAExC,IAAI8M,EACF,MAAOvqB,MAAKu9D,kBAAkBhzC,EAIhC,IAAMm/B,GAAiB1pD,KAAKusD,gBAAgBv+C,IAAIk+C,EAEhD,OAAIxC,GACK1pD,KAAKw9D,0BAA0B7lD,EAAM+xC,GAGvC+T,EAAAA,WAAgBnU,GAA4B7rC,KAM7C8rC,EAAVxoD,UAAAw8D,kBAAA,SAA4BhzC,GACxB,MAAIA,GAAOo/B,WAEFx9C,EAAAA,GAAakxD,GAAS9yC,EAAOo/B,aAG7B3pD,KAAK6pD,uBAAuBt/B,GAAQne,KACzCkxD,EAAAA,IAAI,SAAAjT,GAAO,MAAA9/B,GAAOo/B,WAAaU,IAC/BrgD,EAAAA,IAAI,SAAAqgD,GAAO,MAAAgT,IAAShT,OAalBd,EAAVxoD,UAAAy8D,0BAAA,SAAoC7lD,EAAc+xC,cAIxCgU,EAAY19D,KAAKwpD,+BAA+B7xC,EAAM+xC,EAE5D,IAAIgU,EAIF,MAAOvxD,GAAAA,GAAauxD,EAKtB,IAAMC,GAAwDjU,EAC3Dz4C,OAAO,SAAA2sD,GAAiB,OAACA,EAAcjU,aACvC3/C,IAAI,SAAA4zD,GACH,MAAO/9D,GAAKqqD,0BAA0B0T,GAAexxD,KACnDyxD,EAAAA,WAAW,SAAClQ,GACV,GAAM5D,GAAMlqD,EAAKyrD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcmS,EAAc7T,IAKjF,OADA9M,SAAQD,MAAM,yBAAyB+M,EAAnD,YAAkE4D,EAAIhjC,SACnDxe,EAAAA,GAAa,UAO5B,OAAO2xD,GAAAA,SAASH,GAAsBvxD,KAAKpC,EAAAA,IAAI,WAC7C,GAAMq/C,GAAYxpD,EAAK2pD,+BAA+B7xC,EAAM+xC;2CAE5D,KAAKL,EACH,KAAMC,IAA4B3xC,EAGpC,OAAO0xC,OASHE,EAAVxoD,UAAAyoD,+BAAA,SAAyCC,EAAkBC,GAGvD,IAAK,GAAIr/C,GAAIq/C,EAAelnD,OAAS,EAAG6H,GAAK,EAAGA,IAAK,CACnD,GAAMkgB,GAASm/B,EAAer/C,EAC9B,IAAIkgB,EAAOo/B,WAAY,CACrB,GAAMN,GAAYrpD,KAAK4pD,uBAAuBr/B,EAAOo/B,WAAYF,EACjE,IAAIJ,EACF,MAAOA,IAIb,MAAO,OAODE,EAAVxoD,UAAA8oD,uBAAA,SAAiCt/B,aAC7B,OAAOvqB,MAAK8pD,UAAUv/B,EAAOw/B,KACxB39C,KAAKpC,EAAAA,IAAI,SAAAggD,GAAW,MAAAnqD,GAAKoqD,+BAA+BD,OAOvDT,EAAVxoD,UAAAmpD,0BAAA,SAAoC3/B,aAEhC,OAAIA,GAAOo/B,WACFx9C,EAAAA,GAAaoe,EAAOo/B,YAGtB3pD,KAAK8pD,UAAUv/B,EAAOw/B,KAAK39C,KAAKpC,EAAAA,IAAI,SAAAggD,GAOzC,MAJKz/B,GAAOo/B,aACVp/B,EAAOo/B,WAAa9pD,EAAKsqD,sBAAsBH,IAG1Cz/B,EAAOo/B,eAOVJ,EAAVxoD,UAAAkpD,+BAAA,SAAyCG,GACrC,GAAMC,GAAMrqD,KAAKmqD,sBAAsBC,EAEvC,OADApqD,MAAKsqD,kBAAkBD,GAChBA,GAQDd,EAAVxoD,UAAA6oD,uBAAA,SAAiCW,EAAqBd,GAClD,GAAMe,GAAaD,EAAQE,cAAc,IAAMhB,EAE/C,KAAKe,EACH,MAAO,KAKT,IAAME,GAAcF,EAAWG,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAY7iB,SAAShqB,cACvB,MAAO7d,MAAKsqD,kBAAiB,EAM/B,IAA2C,WAAvCI,EAAY7iB,SAAShqB,cACvB,MAAO7d,MAAKsqD,kBAAkBtqD,KAAK6qD,cAAcH,GAQnD,IAAML,GAAMrqD,KAAKmqD,sBAAsB,cAIvC,OAFAE,GAAIvZ,YAAY4Z,GAET1qD,KAAKsqD,kBAAkBD,IAMxBd,EAAVxoD,UAAAopD,sBAAA,SAAgCW,GAC5B,GAAMC,GAAM/qD,KAAKyQ,UAAUmgC,cAAc,MACzCma,GAAIC,UAAYF,CAChB,IAAMT,GAAMU,EAAIN,cAAc,MAE9B,KAAKJ,EACH,KAAMlhC,OAAM,sBAGd,OAAOkhC,IAMDd,EAAVxoD,UAAA8pD,cAAA,SAAwB9+C,GAGpB,IAAK,GAFDs+C,GAAMrqD,KAAKmqD,sBAAsB,eAE5B9/C,EAAI,EAAGA,EAAI0B,EAAQiF,WAAWxO,OAAQ6H,IACzC0B,EAAQiF,WAAW3G,GAAG+G,WAAapR,KAAKyQ,UAAUw6C,cACpDZ,EAAIvZ,YAAY/kC,EAAQiF,WAAW3G,GAAGsgD,WAAU,GAIpD,OAAON,IAMDd,EAAVxoD,UAAAupD,kBAAA,SAA4BD,GAMxB,MALAA,GAAIa,aAAa,MAAO,IACxBb,EAAIa,aAAa,SAAU,QAC3Bb,EAAIa,aAAa,QAAS,QAC1Bb,EAAIa,aAAa,sBAAuB,iBACxCb,EAAIa,aAAa,YAAa,SACvBb,GAODd,EAAVxoD,UAAA+oD,UAAA,SAAoBqB,aAChB,KAAKnrD,KAAKorD,YACR,KAAMC,KAGR,IAAe,MAAXF,EACF,KAAMhiC,OAAM,+BAA+BgiC,EAAjD,KAGI,IAAMpB,GAAM/pD,KAAKsrD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKpB,EACH,KAAM2B,IAAmCP,EAM3C,IAAMQ,GAAkB3rD,KAAK4rD,sBAAsB59C,IAAI+7C,EAEvD,IAAI4B,EACF,MAAOA,EAKT,IAAME,GAAM7rD,KAAKorD,YAAYp9C,IAAI+7C,GAAM+B,aAAc,SAAS1/C,KAC5D2/C,EAAAA,SAAS,WAAM,MAAAlsD,GAAK+rD,sBAAsBh9B,OAAOm7B,KACjDiC,EAAAA,QAIF,OADAhsD,MAAK4rD,sBAAsBl9B,IAAIq7B,EAAK8B,GAC7BA,GASDtC,EAAVxoD,UAAAkrD,kBAAA,SAA4BC,EAAmBzC,EAAkBl/B,GAE7D,MADAvqB,MAAKmsD,gBAAgBz9B,IAAI09B,GAAQF,EAAWzC,GAAWl/B,GAChDvqB,MAQDupD,EAAVxoD,UAAAsrD,qBAAA,SAA+BH,EAAmB3hC,GAC9C,GAAM+hC,GAAkBtsD,KAAKusD,gBAAgBv+C,IAAIk+C,EAQjD,OANII,GACFA,EAAgBz3C,KAAK0V,GAErBvqB,KAAKusD,gBAAgB79B,IAAIw9B,GAAY3hC,IAGhCvqB,qBA5eXkF,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY,+CArFzB1a,KAAQsnD,EAAAA,WAARnmD,aAAAnB,KAqHKoB,EAAAA,aA5GLpB,KAAQunD,EAAAA,eA8GRvnD,SAAA4J,GAAAzI,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiB6J,EAAAA,OAAjB3J,MAAwBwM,EAAAA,4LAhIxB23C,KAwlBamD,IAEX75C,QAAS02C,GACTt5B,OACG,GAAI3pB,GAAAA,SAAY,GAAIknB,GAAAA,SAAY+7B,KAChC,GAAIjjD,GAAAA,SAAYkmD,EAAAA,YACjBC,EAAAA,cACC,GAAInmD,GAAAA,SAAYsL,EAA+B,WAElDse,WAAYy8B,ICtkBdC,GAAA,WACE,QAAFA,GAAqBloD,GAAA1E,KAArB0E,YAAqBA,EA5BrB,MAAAkoD,MA8BaC,GAAoB7lD,EAAW4lD,mBAkF1C,QAAFE,GACM/nD,EACQgoD,EACkBC,GAH9B,GAAFntD,GAIIsH,EAJJC,KAAApH,KAIU+E,IAJV/E,WAEcH,GAAdktD,cAAcA,EA1BdltD,EAAAotD,SAA6B,EAgCpBD,GACHjoD,EAAWnC,cAAcsoD,aAAa,cAAe,UAnB3D,MA3B6B9iD,GAA7B0kD,EAAA3lD,GAOA3F,OAAAC,eAAMqrD,EAAN/rD,UAAA,yBACI,MAAOf,MAAKitD,aAEd,SAAWC,GACTltD,KAAKitD,QAAU5kD,EAAAA,sBAAsB6kD,oCASzC1rD,OAAAC,eAAMqrD,EAAN/rD,UAAA,eAAA,WAA0B,MAAOf,MAAKmtD,cACpC,SAAYzrD,GACV1B,KAAKmtD,SAAWntD,KAAKotD,kBAAkB1rD,oCAM3CF,OAAAC,eAAMqrD,EAAN/rD,UAAA,gBAAA,WAA2B,MAAOf,MAAKqtD,eACrC,SAAa3rD,GACX1B,KAAKqtD,UAAYrtD,KAAKotD,kBAAkB1rD,oCAiClCorD,EAAV/rD,UAAAusD,eAAA,SAAyB7D,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAM8D,GAAQ9D,EAASvvB,MAAM,IAC7B,QAAQqzB,EAAM/qD,QACZ,IAAK,GAAG,OAAQ,GAAI+qD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMpkC,OAAM,uBAAuBsgC,EAAlD,OAIEqD,EAAF/rD,UAAA6f,YAAE,SAAYlX,GAAZ,GAAF7J,GAAAG,IAEI,IAAI0J,EAAR,QACM,GAAI1J,KAAKwtD,QAAS,CAChB,GAAR7uC,GAAA3e,KAAAstD,eAAAttD,KAAAwtD,SAAetB,EAAfvtC,EAAA,GAA0B8qC,EAA1B9qC,EAAA,EAEQ3e,MAAK+sD,cAAcU,gBAAgBhE,EAAUyC,GAAW9/C,KAAK0I,EAAAA,KAAK,IAAIjU,UACpE,SAAAwpD,GAAO,MAAAxqD,GAAK6tD,eAAerD,IAC3B,SAACsD,GAAe,MAAA1Q,SAAQ2Q,IAAI,0BAA0BD,EAAIhjC,eAG5D3qB,MAAK6tD,kBAIL7tD,MAAK8tD,kBACP9tD,KAAK+tD,0BAITjB,EAAF/rD,UAAA+f,SAAE,WAGM9gB,KAAK8tD,kBACP9tD,KAAK+tD,0BAIDjB,EAAV/rD,UAAA+sD,0BACI,OAAQ9tD,KAAKwtD,SAGPV,EAAV/rD,UAAA2sD,eAAA,SAAyBrD,GACrBrqD,KAAK6tD,kBAOL,KAAK,GAFCG,GAAY3D,EAAI4D,iBAAiB,SAE9B5jD,EAAI,EAAGA,EAAI2jD,EAAUxrD,OAAQ6H,IACpC2jD,EAAU3jD,GAAGkH,aAAe,GAG9BvR,MAAK0E,YAAY9B,cAAckuC,YAAYuZ,IAGrCyC,EAAV/rD,UAAA8sD,4BAMI,IAAK,GALCK,GAA6BluD,KAAK0E,YAAY9B,cAC9CurD,EAAaD,EAAcl9C,WAAWxO,OAInC6H,EAAI,EAAGA,EAAI8jD,EAAY9jD,IAC9B6jD,EAAcE,YAAYF,EAAcl9C,WAAW3G,KAI/CyiD,EAAV/rD,UAAAgtD,kCACI,GAAK/tD,KAAK8tD,iBAAV,CAIA,GAAMO,GAAoBruD,KAAK0E,YAAY9B,cACrC0rD,EAAetuD,KAAKuuD,QACtBvuD,KAAK+sD,cAAcyB,sBAAsBxuD,KAAKuuD,SAC9CvuD,KAAK+sD,cAAc0B,wBAEnBH,IAAgBtuD,KAAK0uD,wBACnB1uD,KAAK0uD,uBACPL,EAAK7lD,UAAUC,OAAOzI,KAAK0uD,uBAEzBJ,GACFD,EAAK7lD,UAAUG,IAAI2lD,GAErBtuD,KAAK0uD,sBAAwBJ,GAG3BtuD,KAAK2uD,UAAY3uD,KAAK4uD,yBACpB5uD,KAAK4uD,wBACPP,EAAK7lD,UAAUC,OAAOzI,KAAK4uD,wBAEzB5uD,KAAK2uD,UACPN,EAAK7lD,UAAUG,IAAI3I,KAAK2uD,UAE1B3uD,KAAK4uD,uBAAyB5uD,KAAK2uD,YAS/B7B,EAAV/rD,UAAAqsD,kBAAA,SAA4B1rD,GACxB,MAAwB,gBAAVA,GAAqBA,EAAM8P,OAAO0oB,MAAM,KAAK,GAAKx4B,kBAzLpEwD,KAACC,EAAAA,UAADC,OAAAE,SAAA,4BACED,SAAU,WACV8F,SAAU,UACV5F,QAAF,spBACEC,QAAF,SACEO,MACFwM,KAAA,MACMvM,MAAN,WACI6oD,0BAAJ,UAEAppD,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EA1DAZ,SAAE4J,GAAFzI,aAAAnB,KAAA+J,EAAAA,UAAA7J,MAAA,oBAsGA0nD,EAAAvmD,iEAlCAgoD,UAAArpD,KAAAuB,EAAAA,QAUAkoD,WAAAzpD,KAAAuB,EAAAA,SAWAqmD,mCCtGA,sBAaA5nD,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,IACVI,SAAUq9C,GAASz9C,IACnBQ,cAAei9C,QAhBjBhzC,KHwBAg1C,GAAA,yBAxBA,MAAAA,MAyBalI,GAAoB3/C,EAAmB6nD,IAIpDC,GAAA,yBA7BA,MAAAA,MA8BaC,GAAwB/nD,EAAmB8nD,+EAexD,MACgC3mD,GAAhCq7C,EAAAt8C,kBAdAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACE8F,SAAU,aACVpF,MACFwM,KAAA,aACMvM,MAAN,gBAEAV,SAAA,4BACAC,QAAA,u3sBACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGA29C,OA7CAD,GAAA,SAAAr8C,gBA2DA,MAAA,QAAAA,GAAAA,EAAA4C,MAAA/J,KAAAwY,YAAAxY,KAHA,4FARAsF,SAAA,4BACES,MAAQC,MAAS,YACjBT,QAAF;+3sBACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAGA09C,GACAoD,gCASA,+HAAAjD,iCAUA,yHAAAC,iCAUA,0HAAAC,4DA8BsB,qBAPtBhkD,EAAAgnD,SAAAA,EAOAhnD,EAAAinD,YAAA,EAAEjnD,EAAFinD,aAAAD,EAAAhnD,EAtEA,cA0EA6jD,EAAA3iD,UAAAyI,+FASE,oFAEFk6C,EAAA3iD,UAAAgmD,wBAEA/mD,KAAAmyB,SAAAvvB,cAAA4F,UAAAG,IAAA,wBAEA+6C,EAAA3iD,UAAAimD,uBAEAhnD,KAAAmyB,SAAAvvB,cAAA4F,UAAAC,OAAA,oDAKE,8DAAFvD,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCACgB8F,SAAhB,cACApF,4BAnDAkhD,+BAAA,UACAC,oCAAA,UACAppB,UAAA,iBACMC,SAAN,0CAGAz4B,SAAA,uYACAG,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA49C,EAAArqC,eAAe,WAAf,QACAnU,KAAA6N,EAAAA,aACA7N,KAAAu+C,GAAAp9C,aAAAnB,KAAAoB,EAAAA,uHA7DAo9C,ONFAyD,GAAA,yBA5CA,MAAAA,MA6Ca9D,GAA6Bp8C,EAAmBoG,EAAc85C,KAG3EC,GAAA,yBAhDA,MAAAA,MAiDaC,GAA0BpgD,EAAmBmgD,IAG7CjE,IACXtwC,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAA+gC,MAC9BpuB,OAAO,GAITwyB,GAAA,WACE,QAAFA,GAEWtyB,EAEAkkB,GAFAl5C,KAAXg1B,OAAWA,EAEAh1B,KAAXk5C,OAAWA,EAhEX,MAAAoO,qBAyIE,QAAFlE,GAAsBjxB,EACA8N,EAE2CsnB,GAH/D,GAAF1nD,GAIIsH,EAJJC,KAAApH,OAAAA,WAAsBH,GAAtBsyB,SAAsBA,EACAtyB,EAAtBogC,gBAAsBA,EAE2CpgC,EAAjE0nD,cAAiEA,EA5CjE1nD,EAAAsgC,WAAsB,EACtBtgC,EAAAygC,WAAsB,EAGtBzgC,EAAA2nD,WAAuB,EAQvB3nD,EAAA4nD,iBAAkD,UAkBlD,MAjCmCr/C,GAAnCg7C,EAAAj8C,GAsBA3F,OAAAC,eAAM2hD,EAANriD,UAAA,gBAAA,WAAmB,MAAOf,MAAKsgC,WAActgC,KAAKunD,eAAiBvnD,KAAKunD,cAAcnlD,cACpF,SAAaV,GACX,GAAM++B,GAAWp4B,EAAAA,sBAAsB3G,EAEnC++B,KAAazgC,KAAKsgC,YACpBtgC,KAAKsgC,UAAYG,EACjBzgC,KAAKigC,gBAAgB7+B,iDAM3BI,OAAAC,eAAM2hD,EAANriD,UAAA,gBAAA,WAA4B,MAAOf,MAAKunD,cAAcnM,gBAAgByC,WAAW79C,WAC/E,SAAa0B,GACX,GAAMm8C,GAAax1C,EAAAA,sBAAsB3G,EAErCm8C,KAAe79C,KAAKmgC,YACtBngC,KAAK+iD,aAAalF,GAClB79C,KAAKunD,cAActE,uDAWvBG,EAAFriD,UAAA+f,SAAE,WAAA,GAAFjhB,GAAAG,KAMU49C,EAAc59C,KAAKmgC,SAEzBl3B,SAAQC,UAAUC,KAAK,YACjBtJ,EAAKsgC,WAAayd,KACpB/9C,EAAKiX,UAAW,EAChBjX,EAAKogC,gBAAgB7+B,mBAK3BgiD,EAAFriD,UAAAyI,mBAAE,WAGE,GAAIk+C,IAAc1nD,KAAK2nD,OAAQ3nD,KAAKmyB,WAGtCixB,EAAFriD,UAAAC,YAAE,WAAA,GAAFnB,GAAAG,IACQA,MAAK8W,UAGP7N,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAKiX,UAAW,IAG/C9W,KAAKunD,cAAcK,sBAAsB5nD,OAI3CojD,EAAFriD,UAAA81B,OAAE,WACE72B,KAAK8W,UAAY9W,KAAK8W,UAIxBssC,EAAFriD,UAAA0B,MAAE,WACEzC,KAAKmyB,SAASvvB,cAAcH,SAO9B2gD,EAAFriD,UAAAkkD,SAAE,WACE,MAAOjlD,MAAK6nD,MAAQ7nD,KAAK6nD,MAAMjlD,cAAc2O,YAAc,IAI7D6xC,EAAFriD,UAAA6gC,kBAAE,WACE,MAAO5hC,MAAKoC,UAAYpC,KAAK6hC,eAAiB7hC,KAAKunD,cAAc1lB,eAGnEuhB,EAAFriD,UAAAgK,aAAE,WACO/K,KAAKoC,WACRpC,KAAK62B,SAGL72B,KAAKunD,cAAcnxB,iBAAiBp2B,QAIxCojD,EAAFriD,UAAAgmD,aAAE,WACE/mD,KAAKwnD,WAAY,EACjBxnD,KAAKunD,cAAcO,kBAAkB9nD,OAGvCojD,EAAFriD,UAAAimD,YAAE,WACEhnD,KAAKwnD,WAAY,EACjBxnD,KAAKunD,cAAclP,cAIrB+K,EAAFriD,UAAA2xB,gBAAE,WACE,MAAO1yB,MAAKmyB,SAASvvB,eAIvBwgD,EAAFriD,UAAAgiD,aAAE,SAAajsC,GACX,MAAIA,KAAa9W,KAAKmgC,YAItBngC,KAAKmgC,UAAYrpB,EAEbA,EACF9W,KAAKunD,cAAcnM,gBAAgBb,OAAOv6C,MAE1CA,KAAKunD,cAAcnM,gBAAgBX,SAASz6C,MAG9CA,KAAKigC,gBAAgB7+B,gBACd,mBAtKX8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACE8F,SAAU,gBACV3F,QAAF,iBACEO,MACFwM,KAAA,SACMvM,MAAN,gCACI83B,UAAJ,iBACIC,SAAJ,gBACInvB,UAAW,iBACXm5C,SAAJ,KACIC,iCAAJ,WACIC,8BAAJ,YACIC,uBAAJ,sBACI15C,uBAAJ,uBAEAlJ,SAAA,waACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAtEAZ,KAAEg+C,GAAF78C,aAAAnB,KAAA6J,EAAAA,OAAA3J,MAAA+c,EAAAA,WAAA,WAAA,MAAA+gC,YAuPAE,EAAA78C,qGApKAkhD,mBAAAviD,KAAAuB,EAAAA,QAGA/E,QAAAwD,KAAGuB,EAAAA,QAGHrE,WAAA8C,KAAAuB,EAAAA,QAGAqQ,WAAA5R,KAAAuB,EAAAA,SAeA28C,sCA4IA,GAAAvjD,GAAAsH,EAAAC,KAAApH,OAAAA,IAmCA,OAEAH,GAAAsyB,SAAAA,kNAFAtyB,EAzBA,6GAgCAumD,WACShJ,gBACF+K,cAAP,WAAA,OAAA,IACAnoD,KAAAooD,cAGApoD,KAAAqoD,sBAAAroD,KAAAooD,aAEQpoD,KAAKooD,YAAc,MAG3BpoD,KAAAsoD,cAAAtoD,KAAAo7C,gBAAA,SAAAv6C,UAAA,SAAAiJ,cAGA,IAAA,GAAAy+C,GAAA,EAAA5pC,EAAA7U,EAAAwwC,MAAAiO,EAAA5pC,EAAAnc,OAAA+lD,IAAA,CACA,GAAAlC,GAAA1nC,EAAA4pC,EACYlC,GAAZvvC,UAAA,EAEA,GAAAhN,EAAA0wC,QACA,IAAA,GAAAjF,GAAA,EAAAE,EAAA3rC,EAAA0wC,QAAAjF,EAAAE,EAAAjzC,OAAA+yC,IAAA,CAEA,GAAA8Q,GAAyB5Q,EAAzBF,EACY8Q,GAAZvvC,UAAA,4bAgCA,GAAA0xC,GAAAxoD,KAAAw+C,gBAAAtF,EAEAsP,GAAA,2CAIA,IAAaA,GAAbxoD,KAAAi5C,QAAAz2C,OAAA,GACAxC,KAAAC,YAAAwoD,uEAOA7M,EAAA57C,KAAAC,YACUyoD,EAAV9M,EAAAG,eACI,QAAJx4B,GACA,IAAAM,GAAAA,MAEA,IAAAD,GAAAA,MACA5jB,KAAAoC,WACApC,KAAA2oD,+BAEU7+C,EAAVsE,iBAGA,MACA,KAASoV,GAAAA,KACT,IAAAE,GAAAA,IACAH,IAAAC,EAAAA,KAAAo4B,EAAAn4B,qBAAAm4B,EAAAj4B,oBACA7Z,EAAAsE,gBACQ,MACR,KAAAw6C,GAAAA,EACA9+C,EAAA++C,UACA7oD,KAAAi5C,QAAAxsC,KAAA,SAAAysC,GAAA,OAAAA,EAAApiC,WAAA9W,KAAA8oD,YAAA9oD,KAAA+oD,cACYj/C,EAAMsE,iBAElB,MACA,SACQwtC,EAAR93B,UAAAha,GAEAyZ,IAAAqZ,EAAAA,UAAArZ,IAAAuZ,EAAAA,aAAAhzB,EAAAkyC,UACAJ,EAAAG,kBAAA2M,GAEQ1oD,KAAR2oD,wFAOA3oD,KAAAo4C,UAAAp4C,KAAAgpD,iKAYAhpD,KAAAqoD,sBAAAY,OAGAjpD,KAAAooD,YAAAa,0DAMAjpD,KAAAi5C,QAAA7vC,QAAA,SAAA8vC,GAAA,MAAAA,GAAA92C,SAAAu0B,qLAiBA32B,MAAAi5C,QAAA7vC,QAAA,SAAA8vC,GAAA,MAAAA,GAAA6J,cAAA,OACS/4C,IAAT,SAAAtI,GAEA,MAAA7B,GAAAo5C,QAAAxsC,KAAA,SAAAysC,GACU,MAAVr5C,GAAAijD,YAAAjjD,EAAAijD,YAAA5J,EAAAx3C,MAAAA,GAAAw3C,EAAAx3C,QAAAA,MAE6FuP,OAA7Fi4C,SACA9/C,QAAA,SAAA8vC,GAAA,MAAA,GAAA6J,cAAA,iRAYA,GAAAoG,GAA4BnpD,KAA5Bi5C,QAAA92C,UAAAinD,EAEAD,KACAA,EAAAtyB;kCAmBAqiB,EAAA6J,aAAAlF,KAEAmF,GAAyB,KAGzBA,GACAhjD,KAAAijD,kLAkBAC,EAAA78C,+FA9QAb,QAAA,WAAA,gBAAA,YACEO,MACFwM,KAAA,UACA8rB,aAAA,WACAr4B,MAAA,qBACM83B,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACIxvB,uBAAJ,uBAEAlJ,SAAA,4BACAC,QAAA,u3sBACAE,cAAAC,EAAAA,kBAAAC,KACAiN,WAAAuwC,IACEv9C,gBAAFC,EAAAA,wBAAAC,WAIAo9C,EAAA7pC,eAAA,WAAA,QACAnU,KAAA6N,EAAAA,gGAtPAkmC,UAAA/zC,KAAAsO,EAAAA,gBAAApO,MAAAg+C,MA4RAjd,kBAAAjhC,KAAAyB,EAAAA,iEA3BAu8C,GAIAG,gCCxRA,sBA4BAn+C,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUm0C,GAAe/zC,GAAiBF,GAAiBk0C,GAAyBn0C,EAAAA,cACpFK,SACE+zC,GACAC,GACAC,GACAC,GACAL,GACAj0C,GACAu0C,GACAC,GACAN,GACAL,GACAE,GACAU,IAEFj0C,cACE2zC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAX,GACAE,QApDJW,mBC+BE,QAAFtR,GACYuR,EACAC,EACAC,EACAp6B,EACArJ,EACkBhQ,GALlBzQ,KAAZgkD,UAAYA,EACAhkD,KAAZikD,0BAAYA,EACAjkD,KAAZkkD,QAAYA,EACAlkD,KAAZ8pB,UAAYA,EACA9pB,KAAZygB,kBAAYA,EACkBzgB,KAA9ByQ,UAA8BA,EArC9B,MA2CEgiC,GAAF1xC,UAAA+gB,OAAE,SAAOqiC,OAAT,KAAAA,IAASA,MACAnkD,KAAK+oC,UACR/oC,KAAK+oC,QAAU,GAAIhoB,GAAAA,eAAe/gB,KAAKgkD,UAAWhkD,KAAKygB,oBAGzDzgB,KAAKiiB,SAEAjiB,KAAKokD,UACRpkD,KAAKokD,QAAU,GAAIC,GAAAA,gBAAgBrkD,KAAKyQ,UAAUmgC,cAAc,OAC5D5wC,KAAKikD,0BAA2BjkD,KAAKkkD,QAASlkD,KAAK8pB,WAGzD,IAAM/d,GAAuB/L,KAAKgkD,UAAUj/C,WAAWnC,aAKvDmJ,GAAkB,WAAEu4C,aAAatkD,KAAKokD,QAAQG,cAAex4C,GAC7D/L,KAAK+oC,QAAQjnB,OAAO9hB,KAAKokD,QAASD,IAOpC1R,EAAF1xC,UAAAkhB,OAAE,WACMjiB,KAAK+oC,QAAQyb,YACfxkD,KAAK+oC,QAAQ9mB,UAIjBwwB,EAAF1xC,UAAAC,YAAE,WACMhB,KAAKokD,SACPpkD,KAAKokD,QAAQn+B,0BApDnB/gB,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,sEAfZH,KAAEwS,EAAAA,cACFxS,KAAEgd,EAAAA,2BACFhd,KAAEu/C,EAAAA,iBACFv/C,KAAEooB,EAAAA,WACFpoB,KAAE8M,EAAAA,mBAuBF9M,SAAA4J,GAAAzI,aAAAnB,KAAK6J,EAAAA,OAAL3J,MAAYwM,EAAAA,eArCZ6gC,KCyBaR,IAYXC,cAAeh7B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQ9T,EAAAA,OACZ0jB,QAAS,EAGTzjB,UAAW,uBAEb+T,EAAAA,WAAW,gBAAiBqtC,EAAAA,UAC1B90B,EAAAA,MAAM,oBAAqBvsB,EAAAA,OAAO0jB,QAAS,KAC3CzP,EAAAA,QAAQ,eAAgBjU,EAAAA,OAAO0jB,QAAS,EAAGzjB,UAAW,mBACtDuzC,EAAAA,OACEjnB,EAAAA,MAAM,oBAAqBtY,EAAAA,QAAQ,yCACjCjU,EAAAA,OAAO0jB,QAAS,MAElBzP,EAAAA,QAAQ,yCAA0CjU,EAAAA,OAAOC,UAAW,sBAGxE+T,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBjU,EAAAA,OAAO0jB,QAAS,QAQvEorB,YAAaj7B,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAW9T,EAAAA,OAAO0jB,QAAS,KACjC1P,EAAAA,WAAW,aACThU,EAAAA,OAAO0jB,QAAS,IAChBzP,EAAAA,QAAQ,qDASD66B,GAAcF,GAAkBE,YAMhCD,GAAgBD,GAAkBC,cCjElCE,GAAiB,GAAIzyB,GAAAA,eAA6B,kBCY/DglC,GAAA,yBA9BA,MAAAA,MA+BaC,GAAwB39C,EAAmBoG,EAAcs3C,oBAwCpE,QAAFpS,GACY7tC,EACU8L,EACV0hB,EACoC6gB,GAJ9C,GAAFlzC,GAOIsH,EAAJC,KAAApH,OAAAA,WANYH,GAAZ6E,YAAYA,EAEA7E,EAAZqyB,cAAYA,EACoCryB,EAAhDkzC,YAAgDA,EAZhDlzC,EAAAo2C,SAA4C,GAAIpqC,GAAAA,QAGhDhM,EAAAk1C,cAA0B,EAG1Bl1C,EAAA4zC,kBAA8B,EAWtBvhB,GAIFA,EAAcE,QAAQvyB,EAAK6yB,mBAAmB,GAG5CqgB,GAAeA,EAAY8R,SAC7B9R,EAAY8R,QAAQhlD,GAGtBA,EAAK4Q,UAAYD,IAhBrB,MAlBiCpI,GAAjCmqC,EAAAprC,GAsCEorC,EAAFxxC,UAAA0B,MAAE,SAAM8G,OAAR,KAAAA,IAAQA,EAAR,WACQvJ,KAAKkyB,cACPlyB,KAAKkyB,cAAc0E,SAAS52B,KAAK0yB,kBAAmBnpB,GAEpDvJ,KAAK0yB,kBAAkBjwB,SAI3B8vC,EAAFxxC,UAAAC,YAAE,WACMhB,KAAKkyB,eACPlyB,KAAKkyB,cAAcI,eAAetyB,KAAK0yB,mBAGrC1yB,KAAK+yC,aAAe/yC,KAAK+yC,YAAY+R,YACvC9kD,KAAK+yC,YAAY+R,WAAW9kD,MAG9BA,KAAKi2C,SAASppC,YAIhB0lC,EAAFxxC,UAAAmK,aAAE,WACE,MAAOlL,MAAKoC,SAAW,KAAO,KAIhCmwC,EAAFxxC,UAAA2xB,gBAAE,WACE,MAAO1yB,MAAK0E,YAAY9B,eAI1B2vC,EAAFxxC,UAAAgkD,eAAE,SAAej7C,GACT9J,KAAKoC,WACP0H,EAAMsE,iBACNtE,EAAMqsB,oBAKVoc,EAAFxxC,UAAAikD,kBAAE,WACEhlD,KAAKi2C,SAASrpC,KAAK5M,OAIrBuyC,EAAFxxC,UAAAkkD,SAAE,WACE,GAAMl5C,GAAuB/L,KAAK0E,YAAY9B,cACxCsiD,EAAellD,KAAKyQ,UAAYzQ,KAAKyQ,UAAU00C,UAAY,EAC7DC,EAAS,EAEb,IAAIr5C,EAAQiF,WAMV,IAAK,GALCq0C,GAASt5C,EAAQiF,WAAWxO,OAKzB6H,EAAI,EAAGA,EAAIg7C,EAAQh7C,IACtB0B,EAAQiF,WAAW3G,GAAG+G,WAAa8zC,IACrCE,GAAUr5C,EAAQiF,WAAW3G,GAAGkH,YAKtC,OAAO6zC,GAAO5zC,uBAxHlBtM,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACE8F,SAAU,cACV3F,QAAF,WAAA,iBACEO,MACFwM,KAAA,WACMvM,MAAN,gBACIs/C,oCAAJ,eACIC,wCAAJ,mBACIhE,kBAAJ,iBACI/yC,uBAAJ,sBACIg3C,kBAAmB,mBACnB52C,UAAJ,yBACI8iB,eAAJ,uBAEA9rB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEL,SAAF,yRAzCAJ,KAAEuzB,EAAAA,eA6DFvzB,SAAA4J,GAAAzI,aAAAnB,KAAK6J,EAAAA,OAAL3J,MAAYgtC,MAAZltC,KAAAoB,EAAAA,cAEAisC,OTbaF,GACT,GAAI1yB,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAAS4lC,mBAqKb,QAAFrU,GACY1sC,EACAgH,EACkC67B,GAFlCvnC,KAAZ0E,YAAYA,EACA1E,KAAZ0L,QAAYA,EACkC1L,KAA9CunC,gBAA8CA,EAnI9CvnC,KAAA0lD,WAAsC1lD,KAAKunC,gBAAgBiK,UAC3DxxC,KAAA2lD,WAAsC3lD,KAAKunC,gBAAgBkK,UAI3DzxC,KAAA4lD,UAGA5lD,KAAA6lD,aAAyB,GAAIh6C,GAAAA,QAG7B7L,KAAA8lD,iBAA6Bt+C,EAAAA,aAAaC,MAG1CzH,KAAA2xC,cAGA3xC,KAAA6xC,qBAA2C,OAG3C7xC,KAAA6rC,eAAmB,GAAIhgC,GAAAA,QAYvB7L,KAAAo1C,cAAmCp1C,KAAKunC,gBAAgB6N,cA8CxDp1C,KAAA+lD,gBAAqC/lD,KAAKunC,gBAAgBmL,eAQ1D1yC,KAAAgmD,aAA8ChmD,KAAKunC,gBAAgBpU,YAiCnEnzB,KAAAulB,OAAM,GAAIxd,GAAAA,aAOV/H,KAAAujC,MAAoBvjC,KAAKulB,OAAzB,MA1FA/jB,QAAAC,eAAM2vC,EAANrwC,UAAA,iBAAA,WAAmC,MAAOf,MAAK0lD,gBAC7C,SAAchkD,GACE,WAAVA,GAAgC,UAAVA,GACxBukD,KAEFjmD,KAAK0lD,WAAahkD,EAClB1B,KAAKqxC,sDAKT7vC,OAAAC,eAAM2vC,EAANrwC,UAAA,iBAAA,WAAmC,MAAOf,MAAK2lD,gBAC7C,SAAcjkD,GACE,UAAVA,GAA+B,UAAVA,GACvBwkD,KAEFlmD,KAAK2lD,WAAajkD,EAClB1B,KAAKqxC,sDAqBT7vC,OAAAC,eAAM2vC,EAANrwC,UAAA,sBAAA,WAAkC,MAAOf,MAAK+lD,qBAC5C,SAAmBrkD,GACjB1B,KAAK+lD,gBAAkB19C,EAAAA,sBAAsB3G,oCAMjDF,OAAAC,eAAM2vC,EAANrwC,UAAA,mBAAA,WAA2C,MAAOf,MAAKgmD,kBACrD,SAAgBtkD,GACd1B,KAAKgmD,aAAe39C,EAAAA,sBAAsB3G,oCAW9CF,OAAAC,eAAM2vC,EAANrwC,UAAA,kBAAA,SAAiB2wC,GACTA,GAAWA,EAAQlvC,SACrBxC,KAAK2xC,WAAaD,EAAQxX,MAAM,KAAKtc,OAAO,SAACqB,EAAUknC,GAErD,MADAlnC,GAAIknC,IAAa,EACVlnC,OAGTjf,KAAK0E,YAAY9B,cAAcujD,UAAY,qCAYjD3kD,OAAAC,eAAM2vC,EAANrwC,UAAA,iBAAA,WAA4B,MAAOf,MAAK+oB,gBACtC,SAAc2oB,GAAmB1xC,KAAK+oB,WAAa2oB,mCAkBnDN,EAAFrwC,UAAA+f,SAAE,WACE9gB,KAAKqxC,sBAGPD,EAAFrwC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKC,YAAc,GAAIC,GAAAA,gBAA6BF,KAAK4lD,QAAQQ,WAAWhJ,gBAC5Ep9C,KAAK8lD,iBAAmB9lD,KAAKC,YAAYq9C,OAAOz8C,UAAU,WAAM,MAAAhB,GAAK0lB,OAAOxjB,KAAK,UAGnFqvC,EAAFrwC,UAAAC,YAAE,WACEhB,KAAK8lD,iBAAiB7kD,cACtBjB,KAAKulB,OAAO1Y,YAIdukC,EAAFrwC,UAAAk1C,SAAE,WACE,MAAOj2C,MAAK6lD,aAAaz5C,KACvBqV,EAAAA,UAAUzhB,KAAK4lD,QACfvM,EAAAA,UAAU,SAAA/G,GAAS,MAAA5xC,GAAAA,MAFzBqJ,UAAA,GAEkCuoC,EAAMtoC,IAAI,SAAAq8C,GAAQ,MAAAA,GAAKpQ,gBAKvD7E,EAAFrwC,UAAAuiB,eAAE,SAAexZ,GACb,GAAMyZ,GAAUzZ,EAAMyZ,OAEtB,QAAQA,GACN,IAAK4lB,GAAAA,OACHnpC,KAAKulB,OAAOxjB,KAAK,WACjB+H,EAAMqsB,iBACR,MACA,KAAKwG,GAAAA,WACC38B,KAAKy0C,YAAiC,QAAnBz0C,KAAKgd,WAC1Bhd,KAAKulB,OAAOxjB,KAAK,UAErB,MACA,KAAK86B,GAAAA,YACC78B,KAAKy0C,YAAiC,QAAnBz0C,KAAKgd,WAC1Bhd,KAAKulB,OAAOxjB,KAAK,UAErB,MACA,SACMwhB,IAAYqZ,EAAAA,UAAYrZ,IAAYuZ,EAAAA,YACtC98B,KAAKC,YAAYqmD,eAAe,YAGlCtmD,KAAKC,YAAY6jB,UAAUha,KAQjCsnC,EAAFrwC,UAAA6zC,eAAE,SAAerrC,GAAf,GAAF1J,GAAAG,SAAA,KAAAuJ,IAAiBA,EAAjB,WAEQvJ,KAAKwyC,YACPxyC,KAAK0L,QAAQ0tC,SAAShzB,eACnBha,KAAK0I,EAAAA,KAAK,IACVjU,UAAU,WAAM,MAAAhB,GAAKI,YAAYqmD,eAAe/8C,GAAQka,uBAE3DzjB,KAAKC,YAAYqmD,eAAe/8C,GAAQka,sBAQ5C2tB,EAAFrwC,UAAAwlD,gBAAE,WACEvmD,KAAKC,YAAY4B,eAAe,IAOlCuvC,EAAFrwC,UAAA8zC,aAAE,SAAaC,GAEX,GAAM0R,GAAe,mBAzOO,EAyOqC1R,GAC3D2R,EAAkBjlD,OAAOmc,KAAK3d,KAAK2xC,YAAYllC,KAAK,SAAAi6C,GAAK,MAAAA,GAAEn+B,WAAW,oBAEvEk+B,IAAmBA,IAAoBzmD,KAAK2mD,qBAC3C3mD,KAAK2mD,qBACP3mD,KAAK2xC,WAAW3xC,KAAK2mD,qBAAsB,GAG7C3mD,KAAK2xC,WAAW6U,IAAgB,EAChCxmD,KAAK2mD,mBAAqBH,IAQ9BpV,EAAFrwC,UAAA8jD,QAAE,SAAQwB,IAM6B,IAA/BrmD,KAAK4lD,OAAO7nC,QAAQsoC,KACtBrmD,KAAK4lD,OAAO/wC,KAAKwxC,GACjBrmD,KAAK6lD,aAAaj5C,KAAK5M,KAAK4lD,UAQhCxU,EAAFrwC,UAAA+jD,WAAE,SAAWuB,GACT,GAAMpkD,GAAQjC,KAAK4lD,OAAO7nC,QAAQsoC,EAE9BrmD,MAAK4lD,OAAO7nC,QAAQsoC,IAAS,IAC/BrmD,KAAK4lD,OAAOtmC,OAAOrd,EAAO,GAC1BjC,KAAK6lD,aAAaj5C,KAAK5M,KAAK4lD;sCAWhCxU,EAAFrwC,UAAAswC,mBAAE,SAAmBC,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsBtxC,KAAKwxC,eAAhD,KAAAD,IAA2DA,EAAsBvxC,KAAKyxC,UAClF,IAAMC,GAAU1xC,KAAK2xC,UACrBD,GAAQ,mBAA8B,WAATJ,EAC7BI,EAAQ,kBAA6B,UAATJ,EAC5BI,EAAQ,kBAA6B,UAATH,EAC5BG,EAAQ,kBAA6B,UAATH,GAI9BH,EAAFrwC,UAAA6wC,gBAAE,WAEE5xC,KAAK6xC,qBAAuB,SAI9BT,EAAFrwC,UAAA+wC,gBAAE,WAEE9xC,KAAK6xC,qBAAuB,QAI9BT,EAAFrwC,UAAAgxC,iBAAE,SAAiBjoC,GACf9J,KAAK6rC,eAAej/B,KAAK9C,GACzB9J,KAAKgyC,cAAe,kBA9SxB9sC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,wXACVC,QAAF,2sDACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,UACEgO,YACF84B,GAAAC,cACAD,GAAAE,aAEAv/B,YACAC,QAAAu/B,GAAAt/B,YAAAs+B,gFA7EAlsC,SAAE4J,GAAFzI,aAAAnB,KAAA6J,EAAAA,OAAA3J,MAAAitC,SAuNAjB,EAAA7qC,0EAnGAkrC,YAAAvsC,KAAAuB,EAAAA,QAGAgR,cAAAvS,KAAAsB,EAAAA,UAAApB,MAAAsS,EAAAA,eAWA46B,QAAAptC,KAAAsO,EAAAA,gBAAApO,MAAAmtC,MAWAC,cAAAttC,KAAG8tB,EAAAA,aAAH5tB,MAAAqtC,MAOAC,iBAAAxtC,KAAAuB,EAAAA,QAMA0sB,cAAAjuB,KAAGuB,EAAAA,QAGHsiB,aAAA7jB,KAAAuB,EAAAA,MAAArB,MAAA,WAQAoD,YAAAtD,KAAAuB,EAAAA,QAaA8e,SAAArgB,KAAAyB,EAAAA,SAmBA48B,QAAAr+B,KAAAyB,EAAAA,UAaAyqC,KCxLauB,GACT,GAAIhzB,GAAAA,eAAqC,4BAQhCizB,IACX//B,QAAS8/B,GACT1iB,MAAO7C,EAAAA,SACP8C,WAAY2iB,kBA2EZ,QAAFC,GAAsBlpB,EACAuI,EACA1R,EACkC6mB,EACtByL,EACQC,EACR/vC,EAGZivB,GATAlyB,KAAtB4pB,SAAsBA,EACA5pB,KAAtBmyB,SAAsBA,EACAnyB,KAAtBygB,kBAAsBA,EACkCzgB,KAAxDsnC,gBAAwDA,EACtBtnC,KAAlC+yC,YAAkCA,EACQ/yC,KAA1CgzC,kBAA0CA,EACRhzC,KAAlCiD,KAAkCA,EAGZjD,KAAtBkyB,cAAsBA,EA3DtBlyB,KAAA8kB,YAA2C,KAC3C9kB,KAAAizC,WAA+B,EAC/BjzC,KAAAkzC,mBAA+B1rC,EAAAA,aAAaC,MAC5CzH,KAAAmzC,mBAA+B3rC,EAAAA,aAAaC,MAI5CzH,KAAAozC,gBAAoC,EAsBpCpzC,KAAAqzC,WAAsD,GAAItrC,GAAAA,aAQ1D/H,KAAAszC,WAAsDtzC,KAAKqzC,WAG3DrzC,KAAAuzC,WAAsD,GAAIxrC,GAAAA,aAQ1D/H,KAAAwzC,YAAuDxzC,KAAKuzC,WAapDP,IACFA,EAAkBS,iBAAmBzzC,KAAK0zC,mBA/IhD,MA+FAlyC,QAAAC,eAAMqxC,EAAN/xC,UAAA,+CACI,MAAOf,MAAK2zC,UAGd,SAAiCnwC,GAC/BxD,KAAK2zC,KAAOnwC,mCA+CdsvC,EAAF/xC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAK4zC,aAEL5zC,KAAK2zC,KAAKpQ,MAAM1iC,UAAU,SAAAgzC,GACxBh0C,EAAKi0C,eAGW,UAAXD,GAAiC,QAAXA,IAAqBh0C,EAAKkzC,aACnDlzC,EAAKkzC,YAAYxtB,OAAOxjB,KAAK8xC,KAIjC7zC,KAAK+zC,gBAGPjB,EAAF/xC,UAAAC,YAAE,WACMhB,KAAK8kB,cACP9kB,KAAK8kB,YAAYmB,UACjBjmB,KAAK8kB,YAAc,MAGrB9kB,KAAKg0C,yBAIPxyC,OAAFC,eAAMqxC,EAAN/xC,UAAA,gBAAE,WACE,MAAOf,MAAKizC,2CAIdzxC,OAAFC,eAAMqxC,EAAN/xC,UAAA,WAAE,WACE,MAAOf,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,uCAI1DoxC,EAAF/xC,UAAA2yC,gBAAE,WACE,SAAU1zC,KAAKgzC,oBAAqBhzC,KAAK+yC,cAI3CD,EAAF/xC,UAAAkzC,WAAE,WACE,MAAOj0C,MAAKizC,UAAYjzC,KAAKk0C,YAAcl0C,KAAKm0C,YAIlDrB,EAAF/xC,UAAAozC,SAAE,WAAA,GAAFt0C,GAAAG,IACI,KAAIA,KAAKizC,UAAT,CAImBjzC,KAAK0rB,iBACb5J,OAAO9hB,KAAK+oC,SAEnB/oC,KAAK2zC,KAAKnB,aACZxyC,KAAK2zC,KAAKnB,YAAY1wB,OAAO9hB,KAAKo0C,UAGpCp0C,KAAKkzC,mBAAqBlzC,KAAKq0C,sBAAsBxzC,UAAU,WAAM,MAAAhB,GAAKq0C,cAC1El0C,KAAKs0C,YAEDt0C,KAAK2zC,eAAgBvC,KACvBpxC,KAAK2zC,KAAK/B,oBAKdkB,EAAF/xC,UAAAmzC,UAAE,WACEl0C,KAAK2zC,KAAKpQ,MAAMxhC,QAOlB+wC,EAAF/xC,UAAA0B,MAAE,SAAM8G,OAAR,KAAAA,IAAQA,EAAR,WACQvJ,KAAKkyB,cACPlyB,KAAKkyB,cAAc0E,SAAS52B,KAAKmyB,SAASvvB,cAAe2G,GAEzDvJ,KAAKmyB,SAASvvB,cAAcH,SAKxBqwC,EAAV/xC,UAAA+yC,kCACI,IAAK9zC,KAAK8kB,aAAgB9kB,KAAKu0C,SAA/B,CAIA,GAAMZ,GAAO3zC,KAAK2zC,IAElB3zC,MAAKkzC,mBAAmBjyC,cACxBjB,KAAK8kB,YAAY7C,SAEb0xB,YAAgBvC,KAClBuC,EAAK7B,kBAED6B,EAAKnB,YAEPmB,EAAK9H,eACFz/B,KAAK6E,EAAAA,OAAO,SAAAnH,GAAS,MAAkB,SAAlBA,EAAM4Y,UAAqB5N,EAAAA,KAAK,IACrDjU,UAAU,WACT8yC,EAAgB,YAAE1xB,SAClBpiB,EAAK20C,eAGTx0C,KAAKw0C,eAGPx0C,KAAKw0C,aAEDb,EAAKnB,aACPmB,EAAKnB,YAAYvwB,YASf6wB,EAAV/xC,UAAAuzC,qBACIt0C,KAAK2zC,KAAKc,WAAaz0C,KAAK0zC,kBAAoB1zC,KAAK+yC,gBAAcjkC,GACnE9O,KAAK2zC,KAAK32B,UAAYhd,KAAK6C,IAC3B7C,KAAK00C,oBACL10C,KAAK20C,gBAAe,GACpB30C,KAAK2zC,KAAKiB,eAAe50C,KAAKozC,eAAiB,QAAU,YAInDN,EAAV/xC,UAAA2zC,6BACI,GAAI10C,KAAK2zC,KAAKkB,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRL,EAAaz0C,KAAK2zC,KAAKc,WAEpBA,GACLK,IACAL,EAAaA,EAAWA,UAG1Bz0C,MAAK2zC,KAAKkB,aAAaC,KAQnBhC,EAAV/xC,UAAAyzC,sBACIx0C,KAAK20C,gBAAe,GAKf30C,KAAKozC,eAIEpzC,KAAK0zC,mBACf1zC,KAAKyC,MAAM,SAFXzC,KAAKyC,QAKPzC,KAAKozC,gBAAiB,GAIhBN,EAAV/xC,UAAA4zC,eAAA,SAAyBzQ,GACrBlkC,KAAKizC,UAAY/O,EACjBlkC,KAAKizC,UAAYjzC,KAAKqzC,WAAWtxC,OAAS/B,KAAKuzC,WAAWxxC,OAEtD/B,KAAK0zC,oBACP1zC,KAAKgzC,kBAAkB+B,aAAe7Q,IAQlC4O,EAAV/xC,UAAA6yC,sBACS5zC,KAAK2zC,MACRqB,MAQIlC,EAAV/xC,UAAA2qB,0BACI,IAAK1rB,KAAK8kB,YAAa,CACrB9kB,KAAK+oC,QAAU,GAAIhoB,GAAAA,eAAe/gB,KAAK2zC,KAAKl8B,YAAazX,KAAKygB,kBAC9D,IAAM8J,GAASvqB,KAAKi1C,mBACpBj1C,MAAKk1C,sBAAsB3qB,EAA4D,kBACvFvqB,KAAK8kB,YAAc9kB,KAAK4pB,SAASsD,OAAO3C,GAG1C,MAAOvqB,MAAK8kB,aAONguB,EAAV/xC,UAAAk0C,6BACI,MAAO,IAAIzoB,GAAAA,eACTC,iBAAkBzsB,KAAKm1C,eACvBhiB,YAAsC,MAAzBnzB,KAAK2zC,KAAKxgB,aAAuBnzB,KAAK0zC,kBAAoB1zC,KAAK2zC,KAAKxgB,YACjFiiB,cAAep1C,KAAK2zC,KAAKyB,eAAiB,mCAC1CnL,eAAgBjqC,KAAKsnC,kBACrBtqB,UAAWhd,KAAKiD,QASZ6vC,EAAV/xC,UAAAm0C,sBAAA,SAAgC7rC,aACxBrJ,MAAK2zC,KAAKtC,oBACZhoC,EAASygC,gBAAgBjpC,UAAU,SAAAqL,GACjC,GAAMolC,GAAyD,UAAnCplC,EAAOmpC,eAAerK,SAAuB,QAAU,SAC7EuG,EAAyD,QAAnCrlC,EAAOmpC,eAAepK,SAAqB,QAAU,OAEjFprC,GAAK8zC,KAAuB,mBAAErC,EAAMC,MAUlCuB,EAAV/xC,UAAAo0C,wBACI,GAAJx2B,GAAA,WAAA3e,KAAA2zC,KAAAnC,WAAA,MAAA,UAAA,QAAA,OAAS7G,EAAThsB,EAAA,GAAkB22B,EAAlB32B,EAAA,GAGA42B,EAAA,UAAAv1C,KAAA2zC,KAAAlC,WAAA,SAAA,QAAA,MAAA,UAASxG,EAATsK,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAAxK,EAAAuK,GAAS5K,EAAT6K,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAAhL,EAAA2K,GAAStK,EAAT2K,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAad,OAXI71C,MAAK0zC,mBAGPkC,EAAmBjL,EAAkC,WAAxB3qC,KAAK2zC,KAAKnC,UAAyB,QAAU,MAC1E8D,EAAkBtK,EAAuB,QAAZL,EAAoB,QAAU,MAC3DkL,EAAuB,WAAb5K,EAjVsB,GAAA,GAkVtBjrC,KAAK2zC,KAAKjB,iBACpB9H,EAAuB,QAAbK,EAAqB,SAAW,MAC1CyK,EAAuC,QAArBF,EAA6B,SAAW,OAGrDx1C,KAAK4pB,SAASvgB,WAChBkgC,oBAAoBvpC,KAAKmyB,UACzBqX,sBAAsB,mBACtBc,gBACEK,QAAXA,EAAoBC,QAApBA,EAA6BI,SAA7BA,EAAuCC,SAAvCA,EAAiD4K,QAAjDA,IACWlL,QAAS2K,EAAiB1K,QAArCA,EAA8CI,SAAU4K,EAAkB3K,SAA1EA,EAAoF4K,QAApFA,IAEYlL,QAAZA,EACYC,QAAS8K,EACT1K,SAAZA,EACYC,SAAUuK,EACVK,SAAUA,IAGVlL,QAAS2K,EACT1K,QAAS8K,EACT1K,SAAU4K,EACV3K,SAAUuK,EACVK,SAAUA,MAMZ/C,EAAV/xC,UAAAizC,iCACIh0C,KAAKkzC,mBAAmBjyC,cACxBjB,KAAKmzC,mBAAmBlyC,eAIlB6xC,EAAV/xC,UAAAszC,0CACUyB,EAAW91C,KAAgB,YAAE0kC,gBAC7BxY,EAAclsB,KAAgB,YAAEksB,cAChC6pB,EAAc/1C,KAAK+yC,YAAc/yC,KAAK+yC,YAAYxtB,OAASpZ,EAAAA,KAC3D6pC,EAAQh2C,KAAK+yC,YAAc/yC,KAAK+yC,YAAYkD,WAAW7pC,KAC3D6E,EAAAA,OAAO,SAAAvE,GAAU,MAAAA,KAAW7M,EAAKmzC,oBACjC/hC,EAAAA,OAAO,WAAM,MAAApR,GAAKozC,aAChB9mC,EAAAA,IAEJ,OAAOzL,GAAAA,MAAMo1C,EAAUC,EAAaC,EAAO9pB,IAI7C4mB,EAAF/xC,UAAAm1C,iBAAE,SAAiBpsC,GACVqsC,EAAAA,gCAAgCrsC,KACnC9J,KAAKozC,gBAAiB,EAKlBpzC,KAAK0zC,mBACP5pC,EAAMsE,mBAMZ0kC,EAAF/xC,UAAAuiB,eAAE,SAAexZ,GACb,GAAMyZ,GAAUzZ,EAAMyZ,OAElBvjB,MAAK0zC,oBACAnwB,IAAYsZ,EAAAA,aAA4B,QAAb78B,KAAK6C,KAChC0gB,IAAYoZ,EAAAA,YAA2B,QAAb38B,KAAK6C,MACtC7C,KAAKm0C,YAKTrB,EAAF/xC,UAAAgK,aAAE,SAAajB,GACP9J,KAAK0zC,mBAEP5pC,EAAMqsB,kBACNn2B,KAAKm0C,YAELn0C,KAAKi0C,cAKDnB,EAAV/xC,UAAAgzC,kCAES/zC,MAAK0zC,oBAIV1zC,KAAKmzC,mBAAqBnzC,KAAK+yC,YAAYkD,WAIxC7pC,KACC6E,EAAAA,OAAO,SAAAvE,GAAU,MAAAA,KAAW7M,EAAKmzC,oBAAsBtmC,EAAOtK,WAC9DymC,EAAAA,MAAM,EAAGuN,EAAAA,gBAEVv1C,UAAU,WACThB,EAAKuzC,gBAAiB,EAKlBvzC,EAAK8zC,eAAgBvC,KAAWvxC,EAAK8zC,KAAK3B,aAC5CnyC,EAAK8zC,KAAK9H,eACPz/B,KAAK0I,EAAAA,KAAK,GAAIzI,EAAAA,UAAUxM,EAAKkzC,YAAYkD,aACzCp1C,UAAU,WAAM,MAAAhB,GAAKs0C,aAExBt0C,EAAKs0C,8BAvbfjvC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,8CACVU,MACEswC,gBAAiB,OACjB5jC,uBAAwB,mBACxB6jC,cAAe,2BACftY,YAAa,yBACbpvB,UAAW,wBAEbzD,SAAU,yDA/DZjG,KAAEkoB,EAAAA,UAUFloB,KAAE6N,EAAAA,aASF7N,KAAE8M,EAAAA,mBAqGF9M,SAAA4J,GAAAzI,aAAAnB,KAAe6J,EAAAA,OAAf3J,MAAsButC,QAjGtBztC,KAAQksC,GAAR/qC,aAAAnB,KAkGeoB,EAAAA,aAhGfpB,KAAQqtC,GAARlsC,aAAAnB,KAiGeoB,EAAAA,WAjGfpB,KAiG2BqxC,EAAAA,SA/H3BrxC,KAAmBkB,EAAAA,eAAnBC,aAAAnB,KAgIeoB,EAAAA,aAjIfpB,KAAQuzB,EAAAA,kCAsFR+d,+BAAAtxC,KAAGuB,EAAAA,MAAHrB,MAAS,0BAUTuuC,OAAAzuC,KAAGuB,EAAAA,MAAHrB,MAAS,uBAGTgvC,WAAAlvC,KAAGuB,EAAAA,MAAHrB,MAAS,wBAGTiuC,aAAAnuC,KAAGyB,EAAAA,SAQH2sC,aAAApuC,KAAGyB,EAAAA,SAGH4sC,aAAAruC,KAAGyB,EAAAA,SAQH6sC,cAAAtuC,KAAGyB,EAAAA,UAjIHmsC,iCCAA,sBAqBA5tC,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAC,GACAE,GACA+Z,EAAAA,eAEF7Z,SAAU2hC,GAASmB,GAAaO,GAAgBL,GAAgBpjC,IAChEQ,cAAeuhC,GAASmB,GAAaO,GAAgBL,IACrD7/B,WAAYggC,QA9Bd6D,KC0BaC,IAaXC,eAAgBz/B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ9T,EAAAA,OACZC,UAAW,YACXszC,SAAU,OACV7vB,QAAS,KAEX5P,EAAAA,MAAM,UAAW9T,EAAAA,OACf0jB,QAAS,EACT6vB,SAAU,oBACVtzC,UAAW,eAEb6T,EAAAA,MAAM,mBAAoB9T,EAAAA,OACxB0jB,QAAS,EACT6vB,SAAU,oBACVtzC,UAAW,eAEb+T,EAAAA,WAAW,YAAaw/B,EAAAA,OACtBjnB,EAAAA,MAAM,iBAAkBC,EAAAA,gBACxBvY,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,aACTC,EAAAA,QAAQ,qBAAsBjU,EAAAA,OAAO0jB,QAAS,SASlD+vB,cAAe5/B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAW9T,EAAAA,OAAO0jB,QAAS,KACjC1P,EAAAA,WAAW,mBACThU,EAAAA,OAAO0jB,QAAS,IAChBzP,EAAAA,QAAQ,qDAUDq/B,GAAiBD,GAAoBC,eAMrCG,GAAgBJ,GAAoBI,c1EK7CpiB,GAAe,EAqCNqiB,GACT,GAAIp3B,GAAAA,eAAqC,8BAShC8mB,IACX5zB,QAASkkC,GACT9mB,MAAO7C,EAAAA,SACP8C,WAAY8mB,IAIdC,GAAA,WACE,QAAFA,GAEWjiB,EAEAtzB,GAFA1B,KAAXg1B,OAAWA,EAEAh1B,KAAX0B,MAAWA,EAzJX,MAAAu1C,MA8JAC,GAAA,WACE,QAAFA,GAAqBxyC,EACAyyC,EACAC,EACAC,EACAC,GAJAt3C,KAArB0E,YAAqBA,EACA1E,KAArBm3C,0BAAqBA,EACAn3C,KAArBo3C,YAAqBA,EACAp3C,KAArBq3C,iBAAqBA,EACAr3C,KAArBs3C,UAAqBA,EAnKrB,MAAAJ,MAqKaK,GAAsBtwC,EAC/BmG,EAAcC,EAAcmqC,EAAgBN,mCAtKhD,sBA4KAhyC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yBA7KZmhC,KA+KAH,GAAA,SAAAl/B,GAqRE,QAAFk/B,GACY16B,EACAxK,EACAuK,EACRyrC,EACApyC,EACoB9B,EACRm0C,EACAC,EACQI,EACOH,EACJj1C,EACqBq1C,GAZ9C,GAAF73C,GAaIsH,EAbJC,KAAApH,KAaU+E,EAAYoyC,EAA2BC,EACvCC,EAAkBC,IAd5Bt3C,WACYH,GAAZ8L,eAAYA,EACA9L,EAAZsB,mBAAYA,EACAtB,EAAZ6L,QAAYA,EAGY7L,EAAxBoD,KAAwBA,EAGApD,EAAxB43C,iBAAwBA,EACO53C,EAA/By3C,UAA+BA,EAEiBz3C,EAAhD63C,uBAAgDA,EAnPhD73C,EAAA83C,YAAuB,EAGvB93C,EAAA41B,WAA+B,EAG/B51B,EAAA+3C,WAAuB,EAMvB/3C,EAAAg4C,WAA+B,EAG/Bh4C,EAAAi4C,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtDn4C,EAAAo4C,KAAiB,cAAcvjB,KAG/B70B,EAAAq4C,SAA8B,GAAIrsC,GAAAA,QASlChM,EAAAs4C,iBAAqB,EASrBt4C,EAAAu4C,UAAoC,aAGpCv4C,EAAAw4C,WAAe,aAGfx4C,EAAAy4C,WAAuB,GAGvBz4C,EAAA04C,iBAA6B,MAG7B14C,EAAA24C,qBAAiC,EAGjC34C,EAAA44C,0BAA8B,GAAI5sC,GAAAA,QAGlChM,EAAAynC,gBAAoBznC,EAAK63C,yBAOzB73C,EAAA64C,SAAa,EAQb74C,EAAA84C,aAEMhO,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhBprC,EAAA+4C,yBAA6C,EAG7C/4C,EAAAg5C,SAAqB,EAGrBh5C,EAAAi5C,YAAgB,aAuFhBj5C,EAAAg2B,UAA2C,GAkB3Ch2B,EAAAk5C,uBAA0EC,EAAAA,MAAM,WAC5E,MAAIn5C,GAAKo5C,QACAv4C,EAAAA,MAAbqJ,UAAA,GAAsBlK,EAAKo5C,QAAQjvC,IAAI,SAAAkvC,GAAU,MAAAA,GAAOC,qBAG7Ct5C,EAAK6L,QAAQ0tC,SACjBhzB,eACAha,KAAK0I,EAAAA,KAAK,GAAIukC,EAAAA,UAAU,WAAM,MAAAx5C,GAAKk5C,4BAI1Cl5C,EAAAojC,aAA4D,GAAIl7B,GAAAA,aAIhElI,EAAAykC,cAAMzkC,EAAKojC,aAAa72B,KAAK6E,EAAAA,OAAO,SAAAqoC,GAAK,MAAAA,KAAItvC,EAAAA,IAAI,eAIjDnK,EAAA2kC,cAAM3kC,EAAKojC,aAAa72B,KAAK6E,EAAAA,OAAO,SAAAqoC,GAAK,OAACA,IAAItvC,EAAAA,IAAI,eAIlDnK,EAAAsmC,gBAAM,GAAIp+B,GAAAA,aAOVlI,EAAAumC,YAAsD,GAAIr+B,GAAAA,aAkBlDlI,EAAKy3C,YAGPz3C,EAAKy3C,UAAUiC,cAAgB15C,GAGjCA,EAAKwC,SAAWoL,SAASpL,IAAa,EAGtCxC,EAAKyuB,GAAKzuB,EAAKyuB,KA3BnB,MAzO+BlmB,GAA/Bi+B,EAAAl/B,GA2HA3F,OAAAC,eAAM4kC,EAANtlC,UAAA,mBAAA,WAA8B,MAAOf,MAAKw5C,kBACxC,SAAgB93C,GACd1B,KAAKw5C,aAAe93C,EACpB1B,KAAKy5C,aAAa7sC,wCAKtBpL,OAAAC,eAAM4kC,EAANtlC,UAAA,gBAAA,WAA4B,MAAOf,MAAKy1B,eACtC,SAAa/zB,GACX1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,GACvC1B,KAAKy5C,aAAa7sC,wCAKtBpL,OAAAC,eAAM4kC,EAANtlC,UAAA,gBAAA,WAA4B,MAAOf,MAAK63C,eACtC,SAAan2C,GACX,GAAI1B,KAAK05C,gBACP,KAAMC,KAGR35C,MAAK63C,UAAYxvC,EAAAA,sBAAsB3G,oCAK3CF,OAAAC,eAAM4kC,EAANtlC,UAAA,8BAAA,WAA0C,MAAOf,MAAK44C,6BACpD,SAA2Bl3C,GACzB1B,KAAK44C,wBAA0BvwC,EAAAA,sBAAsB3G,oCASzDF,OAAAC,eAAM4kC,EAANtlC,UAAA,mBAAA,WAAsB,MAAOf,MAAK83C,kBAChC,SAAgBthB,GACd,GAAkB,kBAAPA,GACT,KAAMojB,KAER55C,MAAK83C,aAAethB,EAChBx2B,KAAK05C,iBAEP15C,KAAK65C,wDAMXr4C,OAAAC,eAAM4kC,EAANtlC,UAAA,aAAA,WAAqB,MAAOf,MAAKu5B,YAC/B,SAAUkH,GACJA,IAAazgC,KAAKu5B,SACpBv5B,KAAKs2B,WAAWmK,GAChBzgC,KAAKu5B,OAASkH,oCAgBpBj/B,OAAAC,eAAM4kC,EAANtlC,UAAA,UAAA,WAAqB,MAAOf,MAAK85C,SAC/B,SAAOp4C,GACL1B,KAAK85C,IAAMp4C,GAAS1B,KAAKi4C,KACzBj4C,KAAKy5C,aAAa7sC,wCAiEpBy5B,EAAFtlC,UAAA+f,SAAE,WAAA,GAAFjhB,GAAAG,IACIA,MAAK05C,gBAAkB,GAAIK,GAAAA,eAA0B/5C,KAAKg6C,UAC1Dh6C,KAAKy5C,aAAa7sC,OAKlB5M,KAAKy4C,0BACFrsC,KAAK6tC,EAAAA,uBAAwB5tC,EAAAA,UAAUrM,KAAKk4C,WAC5Cr3C,UAAU,WACLhB,EAAKq6C,WACPr6C,EAAK+3C,WAAa,EAClB/3C,EAAKojC,aAAalhC,MAAK,KAEvBlC,EAAKojC,aAAalhC,MAAK,GACvBlC,EAAK24C,qBAAsB,EAC3B34C,EAAKs6C,WAAWC,QAAU,EAC1Bv6C,EAAKsB,mBAAmBC,mBAKhCilC,EAAFtlC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKq6C,kBAELr6C,KAAK05C,gBAAwB,SAAEttC,KAAKC,EAAAA,UAAUrM,KAAKk4C,WAAWr3C,UAAU,SAAAiJ,GACtEA,EAAMwwC,MAAMlxC,QAAQ,SAAA8vC,GAAU,MAAAA,GAAOqB,WACrCzwC,EAAM0wC,QAAQpxC,QAAQ,SAAA8vC,GAAU,MAAAA,GAAOuB,eAGzCz6C,KAAKi5C,QAAQvvC,QAAQ0C,KAAKqV,EAAAA,UAAU,MAAOpV,EAAAA,UAAUrM,KAAKk4C,WAAWr3C,UAAU,WAC7EhB,EAAK66C,gBACL76C,EAAKg6C,0BAITxT,EAAFtlC,UAAAwkC,UAAE,WACMvlC,KAAKs3C,WACPt3C,KAAK26C,oBAITtU,EAAFtlC,UAAA6f,YAAE,SAAYlX,GAGNA,EAAR,UACM1J,KAAKy5C,aAAa7sC,QAItBy5B,EAAFtlC,UAAAC,YAAE,WACEhB,KAAKk4C,SAAStrC,OACd5M,KAAKk4C,SAASrrC,WACd7M,KAAKy5C,aAAa5sC,YAIpBw5B,EAAFtlC,UAAA81B,OAAE,WACE72B,KAAKk6C,UAAYl6C,KAAKujC,QAAUvjC,KAAK0qB,QAIvC2b,EAAFtlC,UAAA2pB,KAAE,WAAA,GAAF7qB,GAAAG,MACQA,KAAKoC,UAAapC,KAAKi5C,SAAYj5C,KAAKi5C,QAAQz2C,SAAUxC,KAAK23C,aAInE33C,KAAK46C,aAAe56C,KAAKkX,QAAQtU,cAAci7B,wBAG/C79B,KAAKm4C,iBAAmB1qC,SAASotC,iBAAiB76C,KAAKkX,QAAQtU,eAAe,cAE9E5C,KAAK23C,YAAa,EAClB33C,KAAKC,YAAYG,0BAA0B,MAC3CJ,KAAK86C,4BACL96C,KAAK+6C,0BACL/6C,KAAKmB,mBAAmBC,eAGxBpB,KAAK0L,QAAQ0tC,SAAShzB,eAAeha,KAAK0I,EAAAA,KAAK,IAAIjU,UAAU,WACvDhB,EAAKs4C,kBAAoBt4C,EAAKs6C,WAAWpvB,YACzClrB,EAAKs6C,WAAWpvB,WAAWqB,iBAC7BvsB,EAAKs6C,WAAWpvB,WAAWqB,eAAe/oB,MAAM23C,SAAcn7C,EAAKs4C,iBAA3E,UAME9R,EAAFtlC,UAAAwiC,MAAE,WACMvjC,KAAK23C,aACP33C,KAAK23C,YAAa,EAClB33C,KAAKC,YAAYG,0BAA0BJ,KAAKi7C,SAAW,MAAQ,OACnEj7C,KAAKmB,mBAAmBC,eACxBpB,KAAKq4C,eAUThS,EAAFtlC,UAAAu1B,WAAE,SAAW50B,GACL1B,KAAKi5C,SACPj5C,KAAKk7C,qBAAqBx5C,IAW9B2kC,EAAFtlC,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAKo4C,UAAY5hB,GAUnB6P,EAAFtlC,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKq4C,WAAa7hB,GASpB6P,EAAFtlC,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,EAChB32B,KAAKmB,mBAAmBC,eACxBpB,KAAKy5C,aAAa7sC,QAIpBpL,OAAFC,eAAM4kC,EAANtlC,UAAA,iBAAE,WACE,MAAOf,MAAK23C,4CAIdn2C,OAAFC,eAAM4kC,EAANtlC,UAAA,gBAAE,WACE,MAAOf,MAAKg6C,SAAWh6C,KAAK05C,gBAAgB5iC,SAAW9W,KAAK05C,gBAAgB5iC,SAAS,oCAIvFtV,OAAFC,eAAM4kC,EAANtlC,UAAA,oBAAE,WACE,GAAIf,KAAKm7C,MACP,MAAO,EAGT,IAAIn7C,KAAK63C,UAAW,CAClB,GAAMuD,GAAkBp7C,KAAK05C,gBAAgB5iC,SAAS9M,IAAI,SAAAkvC,GAAU,MAAAA,GAAOmC,WAO3E,OALIr7C,MAAKi7C,UACPG,EAAgBE,UAIXF,EAAgBG,KAAK,MAG9B,MAAOv7C,MAAK05C,gBAAgB5iC,SAAS,GAAGukC,2CAI1ChV,EAAFtlC,UAAAk6C,OAAE,WACE,QAAOj7C,KAAKiD,MAA2B,QAApBjD,KAAKiD,KAAKvB,OAI/B2kC,EAAFtlC,UAAAuiB,eAAE,SAAexZ,GACR9J,KAAKoC,WACRpC,KAAKk6C,UAAYl6C,KAAKw7C,mBAAmB1xC,GAAS9J,KAAKy7C,qBAAqB3xC,KAKxEu8B,EAAVtlC,UAAA06C,qBAAA,SAA+B3xC,GAC3B,GAAMyZ,GAAUzZ,EAAMyZ,QAChBm4B,EAAan4B,IAAYuZ,EAAAA,YAAcvZ,IAAYqZ,EAAAA,UACrDrZ,IAAYoZ,EAAAA,YAAcpZ,IAAYsZ,EAAAA,WACxBtZ,KAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAGhC7jB,KAAKg6C,UAAYlwC,EAAM6xC,SAAWD,GACnD5xC,EAAMsE,iBACNpO,KAAK0qB,QACK1qB,KAAKg6C,UACfh6C,KAAKC,YAAY6jB,UAAUha,IAKvBu8B,EAAVtlC,UAAAy6C,mBAAA,SAA6B1xC,GACzB,GAAMyZ,GAAUzZ,EAAMyZ,QAChBm4B,EAAan4B,IAAYuZ,EAAAA,YAAcvZ,IAAYqZ,EAAAA,SACnDgf,EAAU57C,KAAKC,WAErB,IAAIsjB,IAAYC,EAAAA,MAAQD,IAAYG,EAAAA,IAClC5Z,EAAMsE,iBACNmV,IAAYC,EAAAA,KAAOo4B,EAAQn4B,qBAAuBm4B,EAAQj4B,wBACrD,IAAI+3B,GAAc5xC,EAAM6xC,OAE7B7xC,EAAMsE,iBACNpO,KAAKujC,YACA,IAAKhgB,IAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAAU+3B,EAAQC,WAGxD,CACL,GAAMC,GAAyBF,EAAQG,eAEvCH,GAAQ93B,UAAUha,GAEd9J,KAAK63C,WAAa6D,GAAc5xC,EAAMkyC,UAAYJ,EAAQC,YAC1DD,EAAQG,kBAAoBD,GAC9BF,EAAQC,WAAWI,4BATrBnyC,GAAMsE,iBACNwtC,EAAQC,WAAWI,yBAiBvB5V,EAAFtlC,UAAAm7C,cAAE,WACEl8C,KAAKw4C,oBAAsBx4C,KAAKk6C,UAChCl6C,KAAKmB,mBAAmBC,gBAG1BilC,EAAFtlC,UAAAs7B,SAAE,WACOr8B,KAAKoC,WACRpC,KAAK64C,SAAU,EACf74C,KAAKy5C,aAAa7sC,SAQtBy5B,EAAFtlC,UAAAu7B,QAAE,WACEt8B,KAAK64C,SAAU,EAEV74C,KAAKoC,UAAapC,KAAKk6C,YAC1Bl6C,KAAKq4C,aACLr4C,KAAKmB,mBAAmBC,eACxBpB,KAAKy5C,aAAa7sC,SAOtBy5B,EAAFtlC,UAAAo7C,YAAE,WAAA,GAAFt8C,GAAAG,IACIA,MAAKm6C,WAAWiC,eAAehwC,KAAK0I,EAAAA,KAAK,IAAIjU,UAAU,WACrDhB,EAAKsB,mBAAmBynB,gBACxB/oB,EAAKw8C,2BACLx8C,EAAKy8C,MAAM15C,cAAc25C,UAAY18C,EAAK+3C,cAK9CvR,EAAFtlC,UAAAy7C,eAAE,WACE,MAAOx8C,MAAKy3C,iBAAmB,OAAOz3C,KAAKy3C,iBAAiBgF,MAAU,IAIxEj7C,OAAFC,eAAM4kC,EAANtlC,UAAA,aAAE,WACE,OAAQf,KAAK05C,iBAAmB15C,KAAK05C,gBAAgBgD,2CAG/CrW,EAAVtlC,UAAA84C,0CAGI5wC,SAAQC,UAAUC,KAAK,WACrBtJ,EAAKq7C,qBAAqBr7C,EAAKy3C,UAAYz3C,EAAKy3C,UAAU51C,MAAQ7B,EAAK05B,WAQnE8M,EAAVtlC,UAAAm6C,qBAAA,SAA+Bx5C,aAC3B,IAAI1B,KAAKg6C,UAAYt4C,EAAO,CAC1B,IAAKsnB,MAAMC,QAAQvnB,GACjB,KAAMi7C,KAGR38C,MAAK05C,gBAAgB9Q,QACrBlnC,EAAM0H,QAAQ,SAACwzC,GAAsB,MAAA/8C,GAAKg9C,aAAaD,KACvD58C,KAAK88C,kBACA,CACL98C,KAAK05C,gBAAgB9Q,OACrB,IAAMmU,GAAsB/8C,KAAK68C,aAAan7C,EAI1Cq7C,IACF/8C,KAAKC,YAAY4B,cAAck7C,GAInC/8C,KAAKmB,mBAAmBC,gBAOlBilC,EAAVtlC,UAAA87C,aAAA,SAAuBn7C,cACbq7C,EAAsB/8C,KAAKi5C,QAAQxsC,KAAK,SAACysC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOx3C,OAAiB7B,EAAKi4C,aAAaoB,EAAOx3C,MAAQA,GAChE,MAAOs7C,GAKP,MAJIrsC,GAAAA,aAEFssC,QAAQC,KAAKF,IAER,IAQX,OAJID,IACF/8C,KAAK05C,gBAAgBa,OAAOwC,GAGvBA,GAID1W,EAAVtlC,UAAAs5C,qCACIr6C,MAAKC,YAAc,GAAIk9C,GAAAA,2BAAsCn9C,KAAKi5C,SAC/DmE,gBACAC,0BACAj9C,0BAA0BJ,KAAKi7C,SAAW,MAAQ,OAErDj7C,KAAKC,YAAYq9C,OAAOlxC,KAAKC,EAAAA,UAAUrM,KAAKk4C,WAAWr3C,UAAU,WAG/DhB,EAAK4C,QACL5C,EAAK0jC,UAGPvjC,KAAKC,YAAYiM,OAAOE,KAAKC,EAAAA,UAAUrM,KAAKk4C,WAAWr3C,UAAU,WAC3DhB,EAAK83C,YAAc93C,EAAKy8C,MAC1Bz8C,EAAK09C,8BACK19C,EAAK83C,YAAe93C,EAAKm6C,WAAYn6C,EAAKI,YAAY47C,YAChEh8C,EAAKI,YAAY47C,WAAWI,2BAM1B5V,EAAVtlC,UAAA25C,oCACU8C,EAAqB98C,EAAAA,MAAMV,KAAKi5C,QAAQvvC,QAAS1J,KAAKk4C,SAE5Dl4C,MAAK+4C,uBAAuB3sC,KAAKC,EAAAA,UAAUmxC,IAAqB38C,UAAU,SAAAiJ,GACxEjK,EAAK49C,UAAU3zC,EAAMkrB,OAAQlrB,EAAM4zC,aAE/B5zC,EAAM4zC,cAAgB79C,EAAKm6C,UAAYn6C,EAAK83C,aAC9C93C,EAAK0jC,QACL1jC,EAAK4C,WAMT/B,EAAAA,MAAJqJ,UAAA,GAAa/J,KAAKi5C,QAAQjvC,IAAI,SAAAkvC,GAAU,MAAAA,GAAOprB,iBACxC1hB,KAAKC,EAAAA,UAAUmxC,IACf38C,UAAU,WACThB,EAAKsB,mBAAmBC,eACxBvB,EAAK45C,aAAa7sC,SAGtB5M,KAAK29C,iBAICtX,EAAVtlC,UAAA08C,UAAA,SAAoBvE,EAAmBwE,GACnC,GAAME,GAAc59C,KAAK05C,gBAAgBmE,WAAW3E,EAEhC,OAAhBA,EAAOx3C,OACT1B,KAAK05C,gBAAgB9Q,QACrB5oC,KAAK89C,kBAAkB5E,EAAOx3C,SAE9Bw3C,EAAOpiC,SAAW9W,KAAK05C,gBAAgBa,OAAOrB,GAAUl5C,KAAK05C,gBAAgBe,SAASvB,GAGlFl5C,KAAKg6C,WACPh6C,KAAK88C,cAEDY,IACF19C,KAAKC,YAAY4B,cAAcq3C,GAK/Bl5C,KAAKyC,WAKPm7C,IAAgB59C,KAAK05C,gBAAgBmE,WAAW3E,IAClDl5C,KAAK89C,oBAGP99C,KAAKy5C,aAAa7sC,QAIZy5B,EAAVtlC,UAAA+7C,uBACI,GAAI98C,KAAKg6C,SAAU,CACjB,GAAM+D,GAAU/9C,KAAKi5C,QAAQ92C,SAC7BnC,MAAK05C,gBAAgB38B,KAAK,SAACE,EAAGC,GAAM,MAAA6gC,GAAQhgC,QAAQd,GAAK8gC,EAAQhgC,QAAQb,KACzEld,KAAKy5C,aAAa7sC,SAKdy5B,EAAVtlC,UAAA+8C,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADEj+C,KAAKg6C,SACQh6C,KAA4B,SAAEgK,IAAI,SAAAkvC,GAAU,MAAAA,GAAOx3C,QAEpD1B,KAAK8W,SAAY9W,KAA0B,SAAE0B,MAAQs8C,EAGrEh+C,KAAKu5B,OAAS0kB,EACdj+C,KAAKomC,YAAYrkC,KAAKk8C,GACtBj+C,KAAKo4C,UAAU6F,GACfj+C,KAAKmmC,gBAAgBpkC,KAAK,GAAIk1C,IAAgBj3C,KAAMi+C,IACpDj+C,KAAKmB,mBAAmBC,gBAIlBilC,EAAVtlC,UAAA48C,yBACI39C,KAAKs4C,WAAat4C,KAAKi5C,QAAQjvC,IAAI,SAAAkvC,GAAU,MAAAA,GAAO5qB,KAAIitB,KAAK,MAOvDlV,EAAVtlC,UAAAg6C,mCACQ/6C,KAAKC,cACHD,KAAKm7C,MACPn7C,KAAKC,YAAYwjB,qBAEjBzjB,KAAKC,YAAY4B,cAAc7B,KAAK05C,gBAAgB5iC,SAAS,MAM3DuvB,EAAVtlC,UAAAw8C,uCACI,GAAMW,GAAoBl+C,KAAKC,YAAY87C,iBAAmB,EACxDoC,EAAaC,EAA8BF,EAAmBl+C,KAAKi5C,QACrEj5C,KAAKq+C,aAETr+C,MAAKs8C,MAAM15C,cAAc25C,UAAY+B,EACnCJ,EAAoBC,EACpBn+C,KAAKu+C,iBACLv+C,KAAKs8C,MAAM15C,cAAc25C,UAn1BQ,MAy1BrClW,EAAFtlC,UAAA0B,MAAE,WACEzC,KAAK0E,YAAY9B,cAAcH,SAIzB4jC,EAAVtlC,UAAAy9C,gBAAA,SAA0BtF,GACtB,MAAOl5C,MAAKi5C,QAAQr7B,OAAO,SAAC6gC,EAAgBC,EAAoBz8C,GAC9D,WAAkB6M,KAAX2vC,EAAwBvF,IAAWwF,EAAUz8C,MAAQ6M,GAAa2vC,OACxE3vC,KAIGu3B,EAAVtlC,UAAA+5C,qCACI,GAAM6D,GAAa3+C,KAAKu+C,iBAClBjM,EAAQtyC,KAAK4+C,gBACbC,EAAcp7C,KAAKE,IAAI2uC,EAAQqM,EAx2BF,KAy2B7BG,EAAwBxM,EAAQqM,EAGhCI,EAAYD,EAAwBD,EAGtCG,EACAh/C,KAAKm7C,MAAQ,EAAIn7C,KAAKw+C,gBAAgBx+C,KAAK05C,gBAAgB5iC,SAAS,GAExEkoC,IAAwBZ,EAA8BY,EAAsBh/C,KAAKi5C,QAC7Ej5C,KAAKq+C,aAIT,IAAMY,GAAeJ,EAAc,CACnC7+C,MAAK43C,WAAa53C,KAAKk/C,wBAAwBF,EAAsBC,EAAcF,GACnF/+C,KAAK04C,SAAW14C,KAAKm/C,yBAAyBH,EAAsBC,EAAcF,GAElF/+C,KAAKo/C,4BAA4BL,IAUnC1Y,EAAFtlC,UAAAm+C,wBAAE,SAAwBp6C,EAAuBm6C,EACvBF,GACtB,GAAMJ,GAAa3+C,KAAKu+C,iBAClBc,EAA4BV,EAAa75C,EACzCw6C,EAAmBX,EAAa,EAMhCY,EAAwBF,EAA4BJ,EAAeK,CACzE,OAAO77C,MAAKE,IAAIF,KAAKC,IAAI,EAAG67C,GAAwBR,IAItDv9C,OAAFC,eAAM4kC,EAANtlC,UAAA,kBAAE,WAGE,MAAOf,MAAK81B,eAAiB,KAAO91B,KAAK61B,WAAa71B,KAAKw/C,6CAI7DnZ,EAAFtlC,UAAA0+C,yBAAE,WACE,MAAIz/C,MAAKk6C,WAAal6C,KAAKC,aAAeD,KAAKC,YAAY47C,WAClD77C,KAAKC,YAAY47C,WAAWvtB,GAG9B,MAUD+X,EAAVtlC,UAAAs7C,oCACI,GAKIjC,GALEsF,EAAc1/C,KAAKm6C,WAAWpvB,WAAWqB,eAAeyR,wBACxD8hB,EAAe3/C,KAAK2L,eAAei0C,kBACnCjzB,EAAQ3sB,KAAKi7C,SACb4E,EAAe7/C,KAAKg6C,SAAW8F,GACAlgD,EAIrC,IAAII,KAAKg6C,SACPI,EAj6ByCx6C,OAk6BpC,CACL,GAAIkX,GAAW9W,KAAK05C,gBAAgB5iC,SAAS,IAAM9W,KAAKi5C,QAAQ8G,KAChE3F,GAAUtjC,GAAYA,EAAS+/B,MAj7BQj3C,GAHP,GAw7B7B+sB,IACHytB,IAAY,EAId,IAAM4F,GAAe,GAAKN,EAAYv/B,KAAOi6B,GAAWztB,EAAQkzB,EAAe,IACzEI,EAAgBP,EAAY5yB,MAAQstB,EAAUuF,EAAav/B,OACxCuM,EAAQ,EAAIkzB,EAGjCG,GAAe,EACjB5F,GAAW4F,EA76B4B,EA86B9BC,EAAgB,IACzB7F,GAAW6F,EA/6B4B,GAq7BzCjgD,KAAKm6C,WAAWC,QAAU32C,KAAK+5B,MAAM4c,GACrCp6C,KAAKm6C,WAAWpvB,WAAWqd,kBAQrB/B,EAAVtlC,UAAAo+C,yBAAA,SAAmCr6C,EAAuBm6C,EACxBF,GAC9B,GAGImB,GAHEvB,EAAa3+C,KAAKu+C,iBAClB4B,GAA0BxB,EAAa3+C,KAAK46C,aAAajwC,QAAU,EACnEy1C,EAAsB38C,KAAK2qC,MA39BE,IA29B8BuQ,EAIjE,IAAI3+C,KAAK44C,wBACP,MAAO,EAGT,IAAwB,IAApB54C,KAAK43C,WACPsI,EAA2Bp7C,EAAgB65C,MACtC,IAAI3+C,KAAK43C,aAAemH,EAAW,CACxC,GAAMsB,GAAsBrgD,KAAK4+C,gBAAkBwB,EAC7CE,EAAuBx7C,EAAgBu7C,EAIzCE,EACA5B,GAAc3+C,KAAK4+C,gBAAkBD,EA5+BR,KA4+BgDA,CAMjFuB,GAA2BI,EAAuB3B,EAAa4B,MAK/DL,GAA2BjB,EAAeN,EAAa,CAMzD,OAAOl7C,MAAK+5B,OAAkC,EAA5B0iB,EAAgCC,IAS5C9Z,EAAVtlC,UAAAq+C,4BAAA,SAAsCL,GAClC,GAAMJ,GAAa3+C,KAAKu+C,iBAClBoB,EAAe3/C,KAAK2L,eAAei0C,kBAEnCY,EAAoBxgD,KAAK46C,aAAa5tB,IAj/BH,EAk/BnCyzB,EACFd,EAAah1C,OAAS3K,KAAK46C,aAAa3tB,OAn/BH,EAq/BnCyzB,EAAiBj9C,KAAKk9C,IAAI3gD,KAAK04C,UAC/BkI,EACFn9C,KAAKE,IAAI3D,KAAK4+C,gBAAkBD,EAhhCD,KAihC7BkC,EAAoBD,EAAmBF,EAAiB1gD,KAAK46C,aAAajwC,MAE5Ek2C,GAAoBJ,EACtBzgD,KAAK8gD,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BxgD,KAAK+gD,iBAAiBL,EAAgBF,EAAmBzB,GAExD/+C,KAAKu4C,iBAAmBv4C,KAAKghD,2BAKzB3a,EAAVtlC,UAAA+/C,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMQ,GAAwBx9C,KAAK+5B,MAAMqjB,EAAoBJ,EAI7DzgD,MAAK43C,YAAcqJ,EACnBjhD,KAAK04C,UAAYuI,EACjBjhD,KAAKu4C,iBAAmBv4C,KAAKghD,0BAKzBhhD,KAAK43C,YAAc,IACrB53C,KAAK43C,WAAa,EAClB53C,KAAK04C,SAAW,EAChB14C,KAAKu4C,iBAAmB,mBAKpBlS,EAAVtlC,UAAAggD,iBAAA,SAA2BL,EAAwBF,EACxBzB,GAEvB,GAAMmC,GAAwBz9C,KAAK+5B,MAAMkjB,EAAiBF,EAW1D,IAPAxgD,KAAK43C,YAAcsJ,EACnBlhD,KAAK04C,UAAYwI,EACjBlhD,KAAKu4C,iBAAmBv4C,KAAKghD,0BAKzBhhD,KAAK43C,YAAcmH,EAIrB,MAHA/+C,MAAK43C,WAAamH,EAClB/+C,KAAK04C,SAAW,OAChB14C,KAAKu4C,iBAAmB,gBAMpBlS,EAAVtlC,UAAAigD,mCACI,GAAMrC,GAAa3+C,KAAKu+C,iBAClB4B,GAA0BxB,EAAa3+C,KAAK46C,aAAajwC,QAAU,CAEzE,OAAO,QADSlH,KAAKk9C,IAAI3gD,KAAK04C,UAAYyH,EAAyBxB,EAAa,GACpF,UAIUtY,EAAVtlC,UAAA69C,yBACI,MAAO5+C,MAAKi5C,QAAQz2C,OAASxC,KAAKq+C,aAAa77C,QAIzC6jC,EAAVtlC,UAAAw9C,0BACI,MA9kCiC,GA8kC1Bv+C,KAAKm4C,kBAOd9R,EAAFtlC,UAAAogD,kBAAE,SAAkBC,GAChBphD,KAAKqhD,iBAAmBD,EAAI7F,KAAK,MAOnClV,EAAFtlC,UAAAugD,iBAAE,WACEthD,KAAKyC,QACLzC,KAAK0qB,QAOPlpB,OAAFC,eAAM4kC,EAANtlC,UAAA,wBAAE,WACE,MAAOf,MAAK23C,aAAe33C,KAAKm7C,sDAriCpCj2C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACE8F,SAAU,YACV7F,SAAU,6lDACVC,QAAF,w0DACEC,QAAF,WAAA,gBAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MACFwM,KAAA,UACM2vB,YAAN,KACIqf,kBAAJ,WACIC,oBAAJ,aACIC,yBAAJ,iBACIC,uBAAJ,sBACIlzC,uBAAwB,sBACxBmzC,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/Bl8C,MAAJ,aACIg4B,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEA5kB,YACAu9B,GAAAC,eACAD,GAAAI,eAEAlkC,YACAC,QAAAsvC,GAAArvC,YAAAuzB,IACAxzB,QAAAuvC,GAAAtvC,YAAAuzB,8FAzLAnhC,KAAE8H,EAAAA,SAMF9H,KAAEoT,KAYFpT,KAAE6N,EAAAA,aAmBF7N,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAzBApB,KAAEm9C,EAAAA,OAAFh8C,aAAAnB,KAAAoB,EAAAA,aA9BApB,KAAQo9C,EAAAA,mBAARj8C,aAAAnB,KAAAoB,EAAAA,aAgDApB,KAA6Dq9C,GAA7Dl8C,aAkZKnB,KAlZLoB,EAAAA,aAAApB,KAA8Bs9C,EAAAA,UAA9Bn8C,aAAAnB,KAAAqxC,EAAAA,OAAArxC,KAAAoB,EAAAA,aAkBApB,SAAQ4J,GAARzI,aAAAnB,KAAA+J,EAAAA,UAkYa7J,MAlYb,gBAlBAF,SAAkD4J,GAAlDzI,aAAAnB,KAqZK6J,EAAAA,OArZL3J,MAAA2xC,SAuZA1Q,EAAA9/B,wGAlJA4zC,aAAAj1C,KAAAsB,EAAAA,UAAApB,MAAAq9C,EAAAA,uBAGAxJ,UAAA/zC,KAAAsO,EAAAA,gBAAApO,MAAAs9C,IAAAxhB,aAAA,MAGAmd,eAAAn5C,KAAAsO,EAAAA,gBAAApO,MAAAu9C,MAGA55B,aAAA7jB,KAAAuB,EAAAA,QAGAm8C,gBAAA19C,KAAA8tB,EAAAA,aAAkB5tB,MAAlBohC,MAGAgZ,cAAAt6C,KAAAuB,EAAAA,QAGAiyB,WAAAxzB,KAAAuB,EAAAA,QAGAuzC,WAAA90C,KAAAuB,EAAAA,QAQAo8C,yBAAA39C,KAAAuB,EAAAA,QAQAq8C;cAAA59C,KAAAuB,EAAAA,QAWA/E,QAAAwD,KAAAuB,EAAAA,QAWAovB,YAAA3wB,KAAAuB,EAAAA,MAAQrB,MAAR,gBAcA0wB,iBAAA5wB,KAAAuB,EAAAA,MAAArB,MAAA,qBAWA8gC,oBAAAhhC,KAAAuB,EAAAA,QAGA6nB,KAAAppB,KAAAuB,EAAAA,QAGAw8B,eAAA/9B,KAAAyB,EAAAA,SAGA29B,gBAAQp/B,KAARyB,EAAAA,OAAAvB,MAAA,YAoBAo/B,gBAAAt/B,KAAAyB,EAAAA,OAAAvB,MAAA,YAGA+gC,kBAAAjhC,KAAAyB,EAAAA,SAIAy/B,cAAAlhC,KAAAyB,EAAAA,UAYA0/B,mC+DlcA,sBAgBAnhC,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAka,EAAAA,cACAgd,GACAj3B,IAEFI,SAAU82B,GAAoBF,GAAWG,GAAkBF,GAAiBj3B,IAC5EQ,cAAew2B,GAAWG,IAC1B5zB,WAAY6zB,QAzBdC,KCiBaC,IAIXC,aAAc1vB,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyB9T,EAAAA,OAAOC,UAAW,cACjD6T,EAAAA,MAAM,UAAW9T,EAAAA,OAAOC,UAAW,cACnC+T,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,yCACnCD,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,0C/DwBzBuvB,GAAqB,GAWrBC,GACT,GAAInnB,GAAAA,eAAqC,+BAQhConB,IACXl0B,QAASi0B,GACT7W,MAAO7C,EAAAA,SACP8C,WAAY8W,IAWDC,GACT,GAAItnB,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAASqnB,mBA0Gb,QAAFC,GACYvd,EACAllB,EACA0iC,EACA3mB,EACA/U,EACA6E,EACA82B,EACAnV,EACqCoV,EACzBrkC,EAEVskC,GAZZ,GAAF1nC,GAAAG,IACYA,MAAZ4pB,SAAYA,EACA5pB,KAAZ0E,YAAYA,EACA1E,KAAZonC,kBAAYA,EACApnC,KAAZygB,kBAAYA,EACAzgB,KAAZ0L,QAAYA,EACA1L,KAAZuQ,UAAYA,EACAvQ,KAAZqnC,eAAYA,EACArnC,KAAZkyB,cAAYA,EACqClyB,KAAjDsnC,gBAAiDA,EACzBtnC,KAAxBiD,KAAwBA,EAEVjD,KAAdunC,gBAAcA,EAvFdvnC,KAAA2hB,UAAuC,QACvC3hB,KAAAsgC,WAA+B,EAmC/BtgC,KAAAwnC,UAA4CxnC,KAAKunC,gBAAgBC,UAGjExnC,KAAAynC,UAA4CznC,KAAKunC,gBAAgBE,UAEjEznC,KAAA0nC,SAAqB,GA6BrB1nC,KAAA2nC,iBAA6B,GAAI9Z,KAGjC7tB,KAAA+Y,WAAgC,GAAIlN,GAAAA,OAgBhC,IAAME,GAAuBrH,EAAY9B,aAIpC2N,GAAUq3B,IAMiB,UAArB77B,EAAQ87B,UAA6C,aAArB97B,EAAQ87B,WAMjD97B,EAAQ1I,MAAMykC,iBAAmB/7B,EAAQ1I,MAAM0kC,WAAa,KAX5D/nC,KAAK2nC,iBAAiBjZ,IAAI,aAAc,WAAM,MAAA7uB,GAAKiN,SACnD9M,KAAK2nC,iBAAiBjZ,IAAI,aAAc,WAAM,MAAA7uB,GAAKkN,SAEnD/M,KAAK2nC,iBACFv+B,QAAQ,SAAC4+B,EAAUl+B,GAAU,MAAApF,GAAY9B,cAAcqlC,iBAAiBn+B,EAAOk+B,MAUpF9V,EAAcE,QAAQrmB,GAASK,KAAKC,EAAAA,UAAUrM,KAAK+Y,aAAalY,UAAU,SAAA0I,GAEnEA,EAEiB,aAAXA,GACTmC,EAAQgd,IAAI,WAAM,MAAA7oB,GAAKiN,SAFvBpB,EAAQgd,IAAI,WAAM,MAAA7oB,GAAKkN,KAAK,OApOpC,MA2HAvL,QAAAC,eAAM0lC,EAANpmC,UAAA,gBAAA,WAAoC,MAAOf,MAAK2hB,eAC9C,SAAajgB,GACPA,IAAU1B,KAAK2hB,YACjB3hB,KAAK2hB,UAAYjgB,EAEb1B,KAAK8kB,cACP9kB,KAAKkoC,kBAEDloC,KAAKmoC,kBACPnoC,KAAqB,iBAAE8M,KAAK,GAG9B9M,KAAK8kB,YAAYsjB,oDAOzB5mC,OAAAC,eAAM0lC,EAANpmC,UAAA,gBAAA,WAA4B,MAAOf,MAAKsgC,eACtC,SAAa5+B,GACX1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,GAGnC1B,KAAKsgC,WACPtgC,KAAK+M,KAAK,oCAchBvL,OAAAC,eAAM0lC,EAANpmC,UAAA,eAAA,WAAkB,MAAOf,MAAK0nC,cAC5B,SAAYhmC,GACV1B,KAAKqnC,eAAegB,kBAAkBroC,KAAK0E,YAAY9B,cAAe5C,KAAK0nC,UAG3E1nC,KAAK0nC,SAAoB,MAAThmC,GAAgB,GAAGA,GAAQ8P,OAAS,IAE/CxR,KAAK0nC,UAAY1nC,KAAKsoC,oBACzBtoC,KAAK+M,KAAK,IAEV/M,KAAKuoC,wBACLvoC,KAAKqnC,eAAemB,SAASxoC,KAAK0E,YAAY9B,cAAe5C,KAAK2qB,2CAMxEnpB,OAAAC,eAAM0lC,EAANpmC,UAAA,oBAAA,WAAuB,MAAOf,MAAKyoC,mBACjC,SAAiB/mC,GACf1B,KAAKyoC,cAAgB/mC,EACjB1B,KAAKmoC,kBACPnoC,KAAK0oC,iBAAiB1oC,KAAKyoC,gDAuD/BtB,EAAFpmC,UAAAC,YAAE,WAAA,GAAFnB,GAAAG,IACQA,MAAK8kB,cACP9kB,KAAK8kB,YAAYmB,UACjBjmB,KAAKmoC,iBAAmB,MAIrBnoC,KAAKuQ,UAAUq3B,MAClB5nC,KAAK2nC,iBAAiBv+B,QAAQ,SAAC4+B,EAAUl+B,GACvC,MAAAjK,GAAK6E,YAAY9B,cAAc+lC,oBAAoB7+B,EAAOk+B,KAE5DhoC,KAAK2nC,iBAAiBiB,SAGxB5oC,KAAK+Y,WAAWnM,OAChB5M,KAAK+Y,WAAWlM,WAEhB7M,KAAKqnC,eAAegB,kBAAkBroC,KAAK0E,YAAY9B,cAAe5C,KAAK2qB,SAC3E3qB,KAAKkyB,cAAcI,eAAetyB,KAAK0E,YAAY9B,gBAIrDukC,EAAFpmC,UAAA+L,KAAE,SAAK+7B,GAAL,GAAFhpC,GAAAG,IACI,QADJ,KAAA6oC,IAAOA,EAAgB7oC,KAAKwnC,YACpBxnC,KAAKoC,UAAapC,KAAK2qB,QAA3B,CAEA,GAAMI,GAAa/qB,KAAK0rB,gBAExB1rB,MAAK8oC,UACL9oC,KAAK+oC,QAAU/oC,KAAK+oC,SAAW,GAAI1d,GAAAA,gBAAgB2d,GAAkBhpC,KAAKygB,mBAC1EzgB,KAAKmoC,iBAAmBpd,EAAWjJ,OAAO9hB,KAAK+oC,SAASxd,SACxDvrB,KAAKmoC,iBAAiBc,cACnB78B,KAAKC,EAAAA,UAAUrM,KAAK+Y,aACpBlY,UAAU,WAAM,MAAAhB,GAAKipC,YACxB9oC,KAAK0oC,iBAAiB1oC,KAAKyoC,eAC3BzoC,KAAKuoC,wBACLvoC,KAAqB,iBAAE8M,KAAK+7B,KAI9B1B,EAAFpmC,UAAAgM,KAAE,SAAK87B,OAAP,KAAAA,IAAOA,EAAgB7oC,KAAKynC,WACpBznC,KAAKmoC,kBACPnoC,KAAKmoC,iBAAiBp7B,KAAK87B,IAK/B1B,EAAFpmC,UAAA81B,OAAE,WACE72B,KAAKsoC,oBAAsBtoC,KAAK+M,OAAS/M,KAAK8M,QAIhDq6B,EAAFpmC,UAAAunC,kBAAE,WACE,QAAStoC,KAAKmoC,kBAAoBnoC,KAAKmoC,iBAAiBe,aAI1D/B,EAAFpmC,UAAAuiB,eAAE,SAAeb,GACTziB,KAAKsoC,qBAAuB7lB,EAAEc,UAAY4lB,EAAAA,SAC5C1mB,EAAE0T,kBACFn2B,KAAK+M,KAAK,KAKdo6B,EAAFpmC,UAAAqoC,gBAAE,WACEppC,KAAK+M,KAAK/M,KAAKunC,gBAAgB8B,oBAIzBlC,EAAVpmC,UAAA2qB,oCACI,IAAI1rB,KAAK8kB,YACP,MAAO9kB,MAAK8kB,WAId,IAAMwkB,GAAWtpC,KAAK4pB,SAASvgB,WAC5BkgC,oBAAoBvpC,KAAK0E,aACzB8kC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsB3pC,KAAKonC,kBAC9BwC,4BAA4B5pC,KAAK0E,YA2BpC,OAzBA4kC,GAASO,yBAAyBF,GAElCL,EAASQ,gBAAgB19B,KAAKC,EAAAA,UAAUrM,KAAK+Y,aAAalY,UAAU,SAAAqL,GAC9DrM,EAAKsoC,kBACHj8B,EAAO69B,yBAAyBC,kBAAoBnqC,EAAKsoC,iBAAiBe,aAG5ErpC,EAAK6L,QAAQgd,IAAI,WAAM,MAAA7oB,GAAKkN,KAAK,OAKvC/M,KAAK8kB,YAAc9kB,KAAK4pB,SAASsD,QAC/BlQ,UAAWhd,KAAKiD,KAChBwpB,iBAAkB6c,EAClBvgB,WA7R6B,oBA8R7BkhB,eAAgBjqC,KAAKsnC,oBAGvBtnC,KAAKkoC,kBAELloC,KAAK8kB,YAAYoH,cACd9f,KAAKC,EAAAA,UAAUrM,KAAK+Y,aACpBlY,UAAU,WAAM,MAAAhB,GAAKipC,YAEjB9oC,KAAK8kB,aAINqiB,EAAVpmC,UAAA+nC,mBACQ9oC,KAAK8kB,aAAe9kB,KAAK8kB,YAAYjD,eACvC7hB,KAAK8kB,YAAY7C,SAGnBjiB,KAAKmoC,iBAAmB,MAIlBhB,EAAVpmC,UAAAmnC,2BACI,GAAM7+B,GACFrJ,KAAgB,YAAEkqC,YAA4B,iBAC5C3gC,EAASvJ,KAAKmqC,aACdC,EAAUpqC,KAAKqqC,qBAErBhhC,GAASihC,eACbzf,MAAUthB,EAAOghC,KAASH,EAAQG,MAClC1f,MAAUthB,EAAOihC,SAAaJ,EAAQI,aAQpCrD,EAAFpmC,UAAAopC,WAAE,WACE,GAEIM,GAFEC,GAAS1qC,KAAKiD,MAA2B,OAAnBjD,KAAKiD,KAAKvB,MAChC2H,EAAWrJ,KAAKqJ,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBohC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZvhC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsBqhC,GACV,SAAZrhC,IAAwBqhC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZvhC,GACa,SAAZA,GAAuBqhC,GACX,QAAZrhC,IAAuBqhC,GAGxB,KAAMG,IAAkCxhC,EAFxCohC,IAAkBE,QAAS,MAAOC,QAAS,UAK7C,GAAJjsB,GAAA3e,KAAA8qC,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBhsB,EAAAgd,EAI6BiP,QAJ7BjsB,EAAAkd,KASEsL,EAAFpmC,UAAAspC,oBAAE,WACE,GAEIU,GAFEL,GAAS1qC,KAAKiD,MAA2B,OAAnBjD,KAAKiD,KAAKvB,MAChC2H,EAAWrJ,KAAKqJ,QAGtB,IAAgB,SAAZA,EACF0hC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZ5hC,EACT0hC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZ5hC,GACa,QAAZA,GAAsBqhC,GACV,SAAZrhC,IAAwBqhC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZ5hC,GACa,SAAZA,GAAuBqhC,GACX,QAAZrhC,IAAuBqhC,GAGxB,KAAMG,IAAkCxhC,EAFxC0hC,IAAmBC,SAAU,QAASC,SAAU,UAKlD,GAAJtsB,GAAA3e,KAAA8qC,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjBrsB,EAAAgd,EAI8BsP,SAJ9BtsB,EAAAkd,KASUsL,EAAVpmC,UAAAwnC,2CAGQvoC,MAAKmoC,mBACPnoC,KAAKmoC,iBAAiBxd,QAAU3qB,KAAK2qB,QACrC3qB,KAAKmoC,iBAAiBnH,gBAEtBhhC,KAAK0L,QAAQmd,iBAAiBzC,eAAeha,KAC3C0I,EAAAA,KAAK,GACLzI,EAAAA,UAAUrM,KAAK+Y,aACflY,UAAU,WACNhB,EAAKsoC,kBACPtoC,EAAgB,YAAEuoC,qBAOlBjB,EAAVpmC,UAAA2nC,iBAAA,SAA2BwC,GACnBlrC,KAAKmoC,mBACPnoC,KAAKmoC,iBAAiB+C,aAAeA,EACrClrC,KAAKmoC,iBAAiBnH,kBAKlBmG,EAAVpmC,UAAA+pC,gBAAA,SAA0BnP,EAA4BE,GAelD,MAdsB,UAAlB77B,KAAKqJ,UAA0C,UAAlBrJ,KAAKqJ,SAC1B,QAANwyB,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBAzXA32B,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,eACV8F,SAAU,aACVpF,MACE4rB,cAAe,SACfqM,YAAa,yBACbmN,aAAc,6DA5FlBjmC,KAAEkoB,EAAAA,UAeFloB,KAAE6N,EAAAA,aAZF7N,KAAEkmC,EAAAA,mBAmBFlmC,KAAE8M,EAAAA,mBAHF9M,KAAE8H,EAAAA,SAZF9H,KAAQ2J,EAAAA,WAhBR3J,KAAQmmC,EAAAA,gBAARnmC,KAAuBuzB,EAAAA,eAiMvBvzB,SAAA4J,GAAAzI,aAAAnB,KAAK6J,EAAAA,OAAL3J,MAAY0hC,QAhMZ5hC,KAAQkB,EAAAA,eAARC,aAAAnB,KAiMKoB,EAAAA,aACLpB,SAAA4J,GAAAzI,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiB6J,EAAAA,OAAjB3J,MAAwB6hC,2BAjFxB59B,WAAAnE,KAAGuB,EAAAA,MAAHrB,MAAS,wBAmBThD,WAAA8C,KAAGuB,EAAAA,MAAHrB,MAAS,wBAYToiC,YAAAtiC,KAAGuB,EAAAA,MAAHrB,MAAS,yBAGTqiC,YAAAviC,KAAGuB,EAAAA,MAAHrB,MAAS,yBAKTulB,UAAAzlB,KAAGuB,EAAAA,MAAHrB,MAAS,gBAiBT8lC,eAAAhmC,KAAGuB,EAAAA,MAAHrB,MAAS,sBAlLT+hC,mBAmhBE,QAAF6B,GACY7nC,EACA4oB,GADA/pB,KAAZmB,mBAAYA,EACAnB,KAAZ+pB,oBAAYA,EAbZ/pB,KAAAsrC,YAAmC,UAGnCtrC,KAAAurC,qBAAyC,EAGzCvrC,KAAAwrC,QAA2C,GAAI3/B,GAAAA,QAG/C7L,KAAAyrC,WAA4CzrC,KAAK+pB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SArgBzF,MA+gBE+c,GAAFjoC,UAAA+L,KAAE,SAAK+7B,GAAL,GAAFhpC,GAAAG,IAEQA,MAAK0rC,gBACPjmB,aAAazlB,KAAK0rC,gBAIpB1rC,KAAKurC,qBAAsB,EAC3BvrC,KAAK2rC,eAAiB5lB,WAAW,WAC/BlmB,EAAKyrC,YAAc,UAInBzrC,EAAKmhC,iBACJ6H,IAOLG,EAAFjoC,UAAAgM,KAAE,SAAK87B,GAAL,GAAFhpC,GAAAG,IAEQA,MAAK2rC,gBACPlmB,aAAazlB,KAAK2rC,gBAGpB3rC,KAAK0rC,eAAiB3lB,WAAW,WAC/BlmB,EAAKyrC,YAAc,SAInBzrC,EAAKmhC,iBACJ6H,IAILG,EAAFjoC,UAAAkoC,YAAE,WACE,MAAOjpC,MAAKwrC,QAAQplB,gBAItB4iB,EAAFjoC,UAAAmoC,UAAE,WACE,MAA4B,YAArBlpC,KAAKsrC,aAGdtC,EAAFjoC,UAAA6qC,gBAAE,WACE5rC,KAAKurC,qBAAsB,GAG7BvC,EAAFjoC,UAAA8qC,eAAE,SAAe/hC,GACb,GAAM4Y,GAAU5Y,EAAkC,OAElC,YAAZ4Y,GAAyB1iB,KAAKkpC,aAChClpC,KAAKwrC,QAAQ5+B,OAGC,YAAZ8V,GAAqC,WAAZA,IAC3B1iB,KAAKurC,qBAAsB,IAS/BvC,EAAFjoC,UAAA+qC,uBAAE,WACM9rC,KAAKurC,qBACPvrC,KAAK+M,KAAK,IASdi8B,EAAFjoC,UAAAigC,cAAE,WACEhhC,KAAKmB,mBAAmBC,+BAhI5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEC,SAAU,mOACVC,QAAF,wVACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEqT,YAAawtB,GAAfC,cACE7gC,2GAKEgmC,cAAJ,wGAzeA/C,iCgEZA,sBAmBA9jC,KAACgK,EAAAA,SAAD9J,OACE+J,SACE68B,EAAAA,WACA58B,EAAAA,aACAka,EAAAA,cACAja,IAEFI,SAAU03B,GAAY6B,GAAkB35B,IACxCQ,cAAes3B,GAAY6B,IAC3Bzf,iBAAkByf,IAClBp2B,WAAYm0B,QA7BdkF,gCCsBAjsC,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAAksC,kBAA8B,kBAG9BlsC,KAAAmsC,cAA0B,YAG1BnsC,KAAAosC,kBAA8B,gBAG9BpsC,KAAAqsC,eAA2B,aAG3BrsC,KAAAssC,cAA0B,YAG1BtsC,KAAAusC,cAAkB,SAAChuB,EAAcc,EAAkB7c,GAC/C,GAAc,GAAVA,GAA2B,GAAZ6c,EAAiB,MAAO,QAAQ7c,CAEnDA,GAASiB,KAAKC,IAAIlB,EAAQ,EAE1B,IAAM2c,GAAaZ,EAAOc,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAa3c,EAC1BiB,KAAKE,IAAIwb,EAAaE,EAAU7c,GAChC2c,EAAaE,GAErB,OAAiD7c,GApDjD,sBAgBA0C,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY,8GAhBzB4sB,KA8DaC,IAEX55B,QAAS25B,GACTvc,OAAQ,GAAI3pB,GAAAA,SAAY,GAAIknB,GAAAA,SAAYgf,KACxCtc,WAAYwc,ICnCdC,GAAA,yBA/BA,MAAAA,MAkDAC,GAAA,yBAlDA,MAAAA,MAmDaC,GAAoBlf,EAAiBif,mBAkFhD,QAAFE,GAAqBvc,EACCpvB,GADpB,GAAFtB,GAEIsH,EAFJC,KAAApH,OAAAA,WAAqBH,GAArB0wB,MAAqBA,EACC1wB,EAAtBsB,mBAAsBA,EArDtBtB,EAAAktC,WAAuB,EASvBltC,EAAAmtC,QAAoB,EAkBpBntC,EAAAotC,oBAQAptC,EAAAqtC,eAA0B,EAS1BrtC,EAAAstC,uBAAkC,EAGlCttC,EAAA0e,KAAqD,GAAIxW,GAAAA,aAQrDlI,EAAKutC,aAAe7c,EAAM7mB,QAAQ7I,UAAU,WAAM,MAAAhB,GAAKsB,mBAAmBC,mBAR9E,MA1DkCgH,GAAlC0kC,EAAA3lC,GAMA3F,OAAAC,eAAMqrC,EAAN/rC,UAAA,iBAAA,WAA4B,MAAOf,MAAK+sC,gBACtC,SAAcrrC,GACZ1B,KAAK+sC,WAAatpC,KAAKC,IAAI4E,EAAAA,qBAAqB5G,GAAQ,GACxD1B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMqrC,EAAN/rC,UAAA,cAAA,WAAyB,MAAOf,MAAKgtC,aACnC,SAAWtrC,GACT1B,KAAKgtC,QAAU1kC,EAAAA,qBAAqB5G,GACpC1B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMqrC,EAAN/rC,UAAA,gBAAA,WAA2B,MAAOf,MAAKqtC,eACrC,SAAa3rC,GACX1B,KAAKqtC,UAAY5pC,KAAKC,IAAI4E,EAAAA,qBAAqB5G,GAAQ,GACvD1B,KAAKstC,mEAMT9rC,OAAAC,eAAMqrC,EAAN/rC,UAAA,uBAAA,WAAoC,MAAOf,MAAKitC,sBAC9C,SAAoBvrC,GAClB1B,KAAKitC,kBAAoBvrC,OAAasI,IAAI,SAAAujC,GAAK,MAAAjlC,GAAAA,qBAAqBilC,KACpEvtC,KAAKstC,mEAMT9rC,OAAAC,eAAMqrC,EAAN/rC,UAAA,oBAAA,WAAgC,MAAOf,MAAKktC,mBAC1C,SAAiBxrC,GACf1B,KAAKktC,cAAgB7kC,EAAAA,sBAAsB3G,oCAO/CF,OAAAC,eAAMqrC,EAAN/rC,UAAA,4BAAA,WAAwC,MAAOf,MAAKmtC,2BAClD,SAAyBzrC,GACvB1B,KAAKmtC,sBAAwB9kC,EAAAA,sBAAsB3G,oCAgBrDorC,EAAF/rC,UAAA+f,SAAE,WACE9gB,KAAKwtC,cAAe,EACpBxtC,KAAKstC,kCACLttC,KAAKkvB,oBAGP4d,EAAF/rC,UAAAC,YAAE,WACEhB,KAAKotC,aAAansC,eAIpB6rC,EAAF/rC,UAAA0sC,SAAE,WACE,GAAKztC,KAAK0tC,cAAV,CAEA,GAAMC,GAAoB3tC,KAAKof,SAC/Bpf,MAAKof,YACLpf,KAAK4tC,eAAeD,KAItBb,EAAF/rC,UAAA8sC,aAAE,WACE,GAAK7tC,KAAK8tC,kBAAV,CAEA,GAAMH,GAAoB3tC,KAAKof,SAC/Bpf,MAAKof,YACLpf,KAAK4tC,eAAeD,KAItBb,EAAF/rC,UAAAgtC,UAAE,WAEE,GAAK/tC,KAAK8tC,kBAAV,CAEA,GAAMH,GAAoB3tC,KAAKof,SAC/Bpf,MAAKof,UAAY,EACjBpf,KAAK4tC,eAAeD,KAItBb,EAAF/rC,UAAAitC,SAAE,WAEE,GAAKhuC,KAAK0tC,cAAV,CAEA,GAAMC,GAAoB3tC,KAAKof,SAC/Bpf,MAAKof,UAAYpf,KAAKiuC,mBACtBjuC,KAAK4tC,eAAeD,KAItBb,EAAF/rC,UAAA+sC,gBAAE,WACE,MAAO9tC,MAAKof,WAAa,GAAsB,GAAjBpf,KAAKqf,UAIrCytB,EAAF/rC,UAAA2sC,YAAE,WACE,GAAMQ,GAAgBluC,KAAKiuC,kBAC3B,OAAOjuC,MAAKof,UAAY8uB,GAAkC,GAAjBluC,KAAKqf,UAIhDytB,EAAF/rC,UAAAktC,iBAAE,WACE,MAAOxqC,MAAKgc,KAAKzf,KAAKwC,OAASxC,KAAKqf,UAAY,GAYlDytB,EAAF/rC,UAAAotC,gBAAE,SAAgB9uB,GAGd,GAAMF,GAAanf,KAAKof,UAAYpf,KAAKqf,SACnCsuB,EAAoB3tC,KAAKof,SAE/Bpf,MAAKof,UAAY3b,KAAK2qC,MAAMjvB,EAAaE,IAAa,EACtDrf,KAAKqf,SAAWA,EAChBrf,KAAK4tC,eAAeD,IAOdb,EAAV/rC,UAAAusC,2CACSttC,KAAKwtC,eAGLxtC,KAAKqf,WACRrf,KAAKqtC,UAA2C,GAA/BrtC,KAAKquC,gBAAgB7rC,OAClCxC,KAAKquC,gBAAgB,GAhNL,IAoNtBruC,KAAKsuC,0BAA4BtuC,KAAKquC,gBAAgBt9B,SAES,IAA3D/Q,KAAKsuC,0BAA0BvwB,QAAQ/d,KAAKqf,WAC9Crf,KAAKsuC,0BAA0Bz5B,KAAK7U,KAAKqf,UAI3Crf,KAAKsuC,0BAA0BvxB,KAAK,SAACE,EAAGC,GAAM,MAAAD,GAAIC,IAClDld,KAAKmB,mBAAmBC,iBAIlB0rC,EAAV/rC,UAAA6sC,eAAA,SAAyBD,GACrB3tC,KAAKue,KAAKxc,MACR4rC,kBAANA,EACMvuB,UAAWpf,KAAKof,UAChBC,SAAUrf,KAAKqf,SACf7c,OAAQxC,KAAKwC,yBApMnB0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,eACV7F,SAAU,u1EACVC,QAAF,uoBACEQ,MACFC,MAAA,iBAEAJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAvDAmnC,EAAAvmC,mEAgEA8Y,WAAAna,KAAAuB,EAAAA,QASA4nC,kBAAAnpC,KAAAuB,EAAAA,QASA8nC,eAAArpC,KAAAuB,EAAAA,QASA+nC,uBAAAtpC,KAAQuB,EAAAA,QASR8X,OAAArZ,KAAAyB,EAAAA,UAiBAmmC,mCChIA,sBAiBA5nC,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAwK,GACA8sB,GACAuF,IAEFx8B,SAAUq9B,IACVj9B,cAAei9B,IACfl6B,WAAY65B,QA1BdgC,KCwBAC,GAAA,WACE,QAAFA,GAAqBhqC,GAAA1E,KAArB0E,YAAqBA,EAzBrB,MAAAgqC,MA4BaC,GAA2B3nC,EAAW0nC,GAAoB,WAGnEE,GAAgB,iBA2BlB,QAAFC,GAAqBnqC,EAC2C0wB,GAD9D,GAAFv1B,GAEIsH,EAFJC,KAAApH,KAEU0E,IAFV1E,WAAqBH,GAArB6E,YAAqBA,EAC2C7E,EAAhEu1B,eAAgEA,EAQhEv1B,EAAA05B,OAA2B,EAM3B15B,EAAAivC,aAAiC,EASjCjvC,EAAAw/B,KAAwE,cAGxEx/B,EAAA+uC,cAAkB,oBAAoBA,OAHtC,MA3BoCxmC,GAApCymC,EAAA1nC,GAUA3F,OAAAC,eAAMotC,EAAN9tC,UAAA,aAAA,WAAwB,MAAOf,MAAKu5B,YAClC,SAAU/1B,GAAaxD,KAAKu5B,OAASwV,GAAMvrC,GAAK,oCAKlDhC,OAAAC,eAAMotC,EAAN9tC,UAAA,mBAAA,WAA8B,MAAOf,MAAK8uC,kBACxC,SAAgBtrC,GAAaxD,KAAK8uC,aAAeC,GAAMvrC,GAAK,oCAgB5DqrC,EAAF9tC,UAAAiuC,kBAAE,WAEE,OAAQ1rC,UAAW,UADLtD,KAAK0B,MAAQ,IAC/B,MAOEmtC,EAAF9tC,UAAAkuC,iBAAE,WACE,GAAkB,WAAdjvC,KAAKq/B,KAAmB,CAE1B,OAAQ/7B,UAAW,UADLtD,KAAKkvC,YAAc,IACvC,sBAhEAhqC,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACE8F,SAAU,iBACVpF,MACFwM,KAAA,cACM48B,gBAAN,IACIC,gBAAJ,MACI5Q,uBAAJ,QACI6Q,cAAe,OACfrpC,MAAJ,mBACIwyB,kCAAJ,uCAEAhzB,QAAA,SACAF,SAAA,0pBACEC,QAAS,+mLACTK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,8JAQAkpC,EAAAtoC,oEAKA84B,OAAAn6B,KAAAuB,EAAAA,SAkBAooC,mCClFA,sBAcA3pC,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUC,EAAAA,aAAcC,IACxBI,SAAUo/B,GAAgBx/B,IAC1BQ,cAAeg/B,QAjBjBS,KZ+BMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqB9qC,GAAA1E,KAArB0E,YAAqBA,EA1CrB,MAAA8qC,MA4CaC,GAA+BzoC,EAAWwoC,GAAwB,WAWlErQ,GACT,GAAIxf,GAAAA,eAAiD,wCACnDC,WAAY,OACZC,QAAS6vB,KAYTC,GAAmC,27CAgGvC,QAAFvQ,GAAqB16B,EACPkrC,EACsCn/B,EAEY2kB,EAE9CmK,GANhB,GAAF1/B,GAQIsH,EARJC,KAAApH,KAQU0E,IARV1E,IAAqBH,GAArB6E,YAAqBA,EAE+B7E,EAApD4Q,UAAoDA,EAEY5Q,EAAhEu1B,eAAgEA,EAlDhEv1B,EAAA05B,OAAmB,EAEnB15B,EAAAgwC,oBAA+B,EAqB/BhwC,EAAAiwC,UAAsBP,GAYtB1vC,EAAAw/B,KAAuC,cAoBnCx/B,EAAKgwC,mBAAqBD,EAASG,MAAQH,EAASI,QAEhDzQ,IACEA,EAAS0Q,WACXpwC,EAAKowC,SAAW1Q,EAAS0Q,UAGvB1Q,EAAS2Q,cACXrwC,EAAKqwC,YAAc3Q,EAAS2Q,aAMhC,IAAMC,GACJ,sCAAqCtwC,EAAKgwC,mBAAqB,YAAc,IADnF,mBAGInrC,GAAY9B,cAAc4F,UAAUG,IAAIwnC,KAlC5C,MAxCwC/nC,GAAxCg3B,EAAAj4B,GAiBA3F,OAAAC,eAAM29B,EAANr+B,UAAA,gBAAA,WAA2B,MAAOf,MAAK8vC,eACrC,SAAa3S,GACXn9B,KAAK8vC,UAAYxnC,EAAAA,qBAAqB60B,GAEjCn9B,KAAK6vC,oBAAuBzQ,EAAmBgR,UAAU5hB,IAAIxuB,KAAK8vC,YACrE9vC,KAAKqwC,oDAOX7uC,OAAAC,eAAM29B,EAANr+B,UAAA,8BACI,MAAOf,MAAKswC,cAAgBtwC,KAAKiwC,SAAW,QAE9C,SAAgBvuC,GACd1B,KAAKswC,aAAehoC,EAAAA,qBAAqB5G,oCAQ7CF,OAAAC,eAAM29B,EAANr+B,UAAA,wBACI,MAAqB,gBAAdf,KAAKq/B,KAAyBr/B,KAAKu5B,OAAS,OAErD,SAAUkH,GACRzgC,KAAKu5B,OAAS91B,KAAKC,IAAI,EAAGD,KAAKE,IAAI,IAAK2E,EAAAA,qBAAqBm4B,sCAiC/Dj/B,OAAFC,eAAM29B,EAANr+B,UAAA,qBAAE,WACE,OAAQf,KAAKiwC,SAhKS,IAgKuB,mCAI/CzuC,OAAFC,eAAM29B,EAANr+B,UAAA,gBAAE,WACE,GAAMwvC,GAA+B,EAArBvwC,KAAKwwC,cAAoBxwC,KAAKkwC,WAC9C,OAAO,OAAOK,EAAlB,IAA6BA,mCAI3B/uC,OAAFC,eAAM29B,EAANr+B,UAAA,4BAAE,WACE,MAAO,GAAI0C,KAAKgtC,GAAKzwC,KAAKwwC,+CAI5BhvC,OAAFC,eAAM29B,EAANr+B,UAAA,yBAAE,WACE,MAAkB,gBAAdf,KAAKq/B,KACAr/B,KAAK0wC,sBAAwB,IAAM1wC,KAAKu5B,QAAU,IAIvDv5B,KAAK6vC,oBAAoC,kBAAd7vC,KAAKq/B,KACC,GAA5Br/B,KAAK0wC,qBAGP,sCAITlvC,OAAFC,eAAM29B,EAANr+B,UAAA,0BAAE,WACE,MAAOf,MAAKkwC,YAAclwC,KAAKiwC,SAAW,qCAIpC7Q,EAAVr+B,UAAAsvC,4BACI,GAAIM,GAAWvR,EAAmBuR,QAE7BA,KACHA,EAAW3wC,KAAKyQ,UAAUmgC,cAAc,SACxC5wC,KAAKyQ,UAAUogC,KAAKC,YAAYH,GAChCvR,EAAmBuR,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAWhxC,KAAKixC,oBAAqB,GAGzE7R,EAAmBgR,UAAUznC,IAAI3I,KAAKiwC,WAIhC7Q,EAAVr+B,UAAAkwC,6BACI,MAAOtB,IAEFuB,QAAQ,eAAgB,GAAG,IAAOlxC,KAAK0wC,sBACvCQ,QAAQ,aAAc,GAAG,GAAMlxC,KAAK0wC,sBACpCQ,QAAQ,YAAa,GAAGlxC,KAAKiwC,WAhItC7Q,EAAAgR,UAA6B,GAAIe,MAAa5B,KAM9CnQ,EAAAuR,SAAmD,oBAlCnDzrC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACE8F,SAAU,qBACVpF,MACFwM,KAAA,cACMvM,MAAN,uBACIwyB,kCAAJ,sCACIgH,mBAAJ,WACIC,oBAAJ,WACIlB,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxB6Q,cAAJ,QAEA7pC,QAAA,SACAF,SAAA,+aACEC,QAAS;2kGACTK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFArGAT,SAAE4J,GAAFzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAwM,EAAAA,cAOA1M,SAAQ4J,GAARzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA2e,EAAAA,2BAoJA7e,SAAA4J,GAAAzI,aAAAnB,KAAe6J,EAAAA,OAAQ3J,MAAvB+5B,SAGAC,EAAA74B,uEArCA84B,OAAAn6B,KAAAuB,EAAAA,QAYA/E,QAAAwD,KAAAuB,EAAAA,SAYA24B,uCA4HEE,EAAFC,qCAAE,OAGF1/B,GAAAw/B,KAAA,gBAHAx/B,EACA,6BAOAqF,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBA1BAkN,KAAA,cACA8sB,KAAA,gBACAr5B,MAAA,mCACMwyB,kCAAN,sCACIgH,mBAAJ,WACIC,oBAAJ,YAEAj6B,QAAA,SACAF,SAAA,+aACAC,QAAA,mkGACAK,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+5B,EAAArmB,eAAA,WAAA,QACAnU,KAAA6N,EAAAA,0MA3QA7N,SAAE4J,GAAFzI,aAAAnB,KAAA6J,EAAAA,OAAA3J,MAAA+5B,SA8QAO,GAEAN,ICtRAO,GAAA,yBAPA,sBAYAz6B,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,IACVI,SACE2vB,GACAM,GACArwB,IAEFQ,cACEuvB,GACAM,QArBJC,KCiDIjL,GAAe,EAONkL,IACX/sB,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAA0d,MAC9B/K,OAAO,GAITgL,GAAA,WACE,QAAFA,GAEW9K,EAEAtzB,GAFA1B,KAAXg1B,OAAWA,EAEAh1B,KAAX0B,MAAWA,EApEX,MAAAo+B,MA0EAC,GAAA,yBA1EA,MAAAA,MA2EaC,GAA0B3yB,EAAc0yB,mBA6HnD,QAAFF,GAAsBI,GAApB,GAAFpgC,GACIsH,EADJC,KAAApH,OAAAA,WAAsBH,GAAtBogC,gBAAsBA,EAtGtBpgC,EAAA05B,OAAwB,KAGxB15B,EAAAqgC,MAA0B,mBAAmBxL,KAG7C70B,EAAAsgC,UAA6C,KAG7CtgC,EAAAugC,gBAAoC,EAGpCvgC,EAAAwgC,eAA+C,QAG/CxgC,EAAAygC,WAA+B,EAG/BzgC,EAAA41B,WAA+B,EAG/B51B,EAAAg6B,8BAAwD,aAMxDh6B,EAAA01B,UAAyB,aAOzB11B,EAAAqM,OAA4D,GAAInE,GAAAA,eApIhE,MA0FmCK,GAAnCy3B,EAAA14B,GAkDA3F,OAAAC,eAAMo+B,EAAN9+B,UAAA,YAAA,WAAuB,MAAOf,MAAKkgC,WACjC,SAASx+B,GACP1B,KAAKkgC,MAAQx+B,EACb1B,KAAKugC,2DAKT/+B,OAAAC,eAAMo+B,EAAN9+B,UAAA,gCACI,MAAOf,MAAKqgC,oBAEd,SAAkB78B,GAChBxD,KAAKqgC,eAAuB,WAAN78B,EAAiB,SAAW,QAClDxD,KAAKwgC,uDAKTh/B,OAAAC,eAAMo+B,EAAN9+B,UAAA,aAAA,WAAqB,MAAOf,MAAKu5B,YAC/B,SAAUkH,GACJzgC,KAAKu5B,SAAWkH,IAElBzgC,KAAKu5B,OAASkH,EAEdzgC,KAAK0gC,gCACL1gC,KAAK2gC,8DAITd,EAAF9+B,UAAA4/B,0BAAE,WACM3gC,KAAKmgC,YAAcngC,KAAKmgC,UAAUlL,UACpCj1B,KAAKmgC,UAAUlL,SAAU,IAM/BzzB,OAAAC,eAAMo+B,EAAN9+B,UAAA,gBAAA,WAAmB,MAAOf,MAAKmgC,eAC7B,SAAarpB,GACX9W,KAAKmgC,UAAYrpB,EACjB9W,KAAK0B,MAAQoV,EAAWA,EAASpV,MAAQ,KACzC1B,KAAK2gC,6DAKTn/B,OAAAC,eAAMo+B,EAAN9+B,UAAA,gBAAA,WAA4B,MAAOf,MAAKsgC,eACtC,SAAa5+B,GACX1B,KAAKsgC,UAAYj4B,EAAAA,sBAAsB3G,GACvC1B,KAAKwgC,uDAKTh/B,OAAAC,eAAMo+B,EAAN9+B,UAAA,gBAAA,WAA4B,MAAOf,MAAKy1B,eACtC,SAAa/zB,GACX1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,GACvC1B,KAAKwgC,uDAWPX,EAAF9+B,UAAAyI,mBAAE,WAIExJ,KAAKogC,gBAAiB,GAOxBP,EAAF9+B,UAAA6/B,OAAE,WACM5gC,KAAKu1B,WACPv1B,KAAKu1B,aAIDsK,EAAV9+B,UAAAw/B,6CACQvgC,MAAK6gC,SACP7gC,KAAK6gC,QAAQz3B,QAAQ,SAAA03B,GACnBA,EAAMnpB,KAAO9X,EAAK8X,QAMhBkoB,EAAV9+B,UAAA2/B,oDAEUK,EAAuC,OAAnB/gC,KAAKmgC,WAAsBngC,KAAKmgC,UAAUz+B,QAAU1B,KAAKu5B,MAE/Ev5B,MAAK6gC,UAAYE,IACnB/gC,KAAKmgC,UAAY,KACjBngC,KAAK6gC,QAAQz3B,QAAQ,SAAA03B,GACnBA,EAAM7L,QAAUp1B,EAAK6B,QAAUo/B,EAAMp/B,MACjCo/B,EAAM7L,UACRp1B,EAAKsgC,UAAYW,OAOzBjB,EAAF9+B,UAAAq1B,iBAAE,WACMp2B,KAAKogC,gBACPpgC,KAAKkM,OAAOnK,KAAK,GAAI+9B,IAAe9/B,KAAc,UAAGA,KAAKu5B,UAI9DsG,EAAF9+B,UAAAy/B,oBAAE,WACMxgC,KAAK6gC,SACP7gC,KAAK6gC,QAAQz3B,QAAQ,SAAA03B,GAAS,MAAAA,GAAME,mBAQxCnB,EAAF9+B,UAAAu1B,WAAE,SAAW50B,GACT1B,KAAK0B,MAAQA,EACb1B,KAAKigC,gBAAgB7+B,gBAQvBy+B,EAAF9+B,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAK65B,8BAAgCrD,GAQvCqJ,EAAF9+B,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKu1B,UAAYiB,GAOnBqJ,EAAF9+B,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,EAChB32B,KAAKigC,gBAAgB7+B,+BAvNzB8D,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,kBACV8F,SAAU,gBACVyH,WAAYgtB,IACZ75B,MACEwM,KAAQ,aACRvM,MAAS,mBAEXR,QAAS,oDAzEXN,KAAE+H,EAAAA,uCAqHFf,SAAAhH,KAAGyB,EAAAA,SAGHk6B,UAAA37B,KAAGsO,EAAAA,gBAAHpO,MAAmB+c,EAAAA,WAAW,WAAM,MAAA8e,OAAmBC,aAAa,MAIpEvpB,OAAAzS,KAAGuB,EAAAA,QAQHmvB,gBAAA1wB,KAAGuB,EAAAA,QAUH/E,QAAAwD,KAAGuB,EAAAA,QAmBHqQ,WAAA5R,KAAGuB,EAAAA,QASHrE,WAAA8C,KAAGuB,EAAAA,QAQHiyB,WAAAxzB,KAAGuB,EAAAA,SAjMHo5B,GA0FmCG,IAmNnCmB,GAAA,WAME,QAAFA,GAAqBz8B,GAAA1E,KAArB0E,YAAqBA,EAnTrB,MAAAy8B,MAuTaC,GACTp6B,EAAWC,EAAmBmG,EAAc+zB,KAAsB,yBA6JpE,QAAFF,GAA0BI,EACZt8B,EACQk7B,EACA/N,EACAoP,EAC0ClM,GAL9D,GAAFv1B,GAMIsH,EANJC,KAAApH,KAMU+E,IANV/E,WAEsBH,GAAtBogC,gBAAsBA,EACApgC,EAAtBqyB,cAAsBA,EACAryB,EAAtByhC,iBAAsBA,EAC0CzhC,EAAhEu1B,eAAgEA,EArIhEv1B,EAAA21B,UAA8B,gBAAed,GAG7C70B,EAAAyuB,GAAwBzuB,EAAK21B,UA6F7B31B,EAAAqM,OAA4D,GAAInE,GAAAA,aAShElI,EAAA61B,UAA8B,EAS9B71B,EAAA05B,OAAwB,KASxB15B,EAAA0hC,+BAAuD,aAenD1hC,EAAKwhC,WAAaA,EAElBxhC,EAAK0hC,+BACHD,EAAiBE,OAAO,SAAClT,EAAY3W,GAC/B2W,IAAOzuB,EAAKyuB,IAAM3W,IAAS9X,EAAK8X,OAClC9X,EAAKo1B,SAAU,OAjBzB,MAjIoC7sB,GAApC64B,EAAA95B,GAsBA3F,OAAAC,eAAMw/B,EAANlgC,UAAA,eAAA,WAA2B,MAAOf,MAAK01B,cACrC,SAAYh0B,GACV,GAAM+/B,GAAkBp5B,EAAAA,sBAAsB3G,EAC1C1B,MAAK01B,WAAa+L,IACpBzhC,KAAK01B,SAAW+L,EACZA,GAAmBzhC,KAAKqhC,YAAcrhC,KAAKqhC,WAAW3/B,QAAU1B,KAAK0B,MACvE1B,KAAKqhC,WAAWvqB,SAAW9W,MACjByhC,GAAmBzhC,KAAKqhC,YAAcrhC,KAAKqhC,WAAW3/B,QAAU1B,KAAK0B,QAI/E1B,KAAKqhC,WAAWvqB,SAAW,MAGzB2qB,GAEFzhC,KAAKshC,iBAAiBI,OAAO1hC,KAAKsuB,GAAItuB,KAAK2X,MAE7C3X,KAAKigC,gBAAgB7+B,iDAM3BI,OAAAC,eAAMw/B,EAANlgC,UAAA,aAAA,WAAqB,MAAOf,MAAKu5B,YAC/B,SAAU73B,GACJ1B,KAAKu5B,SAAW73B,IAClB1B,KAAKu5B,OAAS73B,EACU,OAApB1B,KAAKqhC,aACFrhC,KAAKi1B,UAERj1B,KAAKi1B,QAAUj1B,KAAKqhC,WAAW3/B,QAAUA,GAEvC1B,KAAKi1B,UACPj1B,KAAKqhC,WAAWvqB,SAAW9W,yCAQrCwB,OAAAC,eAAMw/B,EAANlgC,UAAA,gCACI,MAAOf,MAAKqgC,gBAAmBrgC,KAAKqhC,YAAcrhC,KAAKqhC,WAAWzL,eAAkB,aAEtF,SAAkBl0B,GAChB1B,KAAKqgC,eAAiB3+B,mCAM1BF,OAAAC,eAAMw/B,EAANlgC,UAAA,2BACI,MAAOf,MAAKsgC,WAAkC,OAApBtgC,KAAKqhC,YAAuBrhC,KAAKqhC,WAAWj/B,cAExE,SAAaV,GACX,GAAMigC,GAAmBt5B,EAAAA,sBAAsB3G,EAC3C1B,MAAKsgC,YAAcqB,IACrB3hC,KAAKsgC,UAAYqB,EACjB3hC,KAAKigC,gBAAgB7+B,iDAM3BI,OAAAC,eAAMw/B,EAANlgC,UAAA,2BACI,MAAOf,MAAKy1B,WAAcz1B,KAAKqhC,YAAcrhC,KAAKqhC,WAAW3I,cAE/D,SAAah3B,GACX1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,oCAczCF,OAAFC,eAAMw/B,EAANlgC,UAAA,eAAE,WAAwB,OAAUf,KAAKsuB,IAAMtuB,KAAKw1B,WAApD,0CA+CEyL,EAAFlgC,UAAA0B,MAAE,WACEzC,KAAKkyB,cAAc0E,SAAS52B,KAAK+1B,cAAcnzB,cAAe,aAQhEq+B,EAAFlgC,UAAAigC,cAAE,WAGEhhC,KAAKigC,gBAAgB7+B,gBAGvB6/B,EAAFlgC,UAAA+f,SAAE,WACM9gB,KAAKqhC,aAEPrhC,KAAKi1B,QAAUj1B,KAAKqhC,WAAW3/B,QAAU1B,KAAKu5B,OAE9Cv5B,KAAK2X,KAAO3X,KAAKqhC,WAAW1pB,OAIhCspB,EAAFlgC,UAAA2P,gBAAE,WAAA,GAAF7Q,GAAAG,IACIA,MAAKkyB,cACFE,QAAQpyB,KAAK+1B,cAAcnzB,eAC3B/B,UAAU,SAAAm1B,GAAe,MAAAn2B,GAAKo2B,oBAAoBD,MAGvDiL,EAAFlgC,UAAAC,YAAE,WACEhB,KAAKkyB,cAAcI,eAAetyB,KAAK+1B,cAAcnzB,eACrD5C,KAAKuhC,kCAICN,EAAVlgC,UAAAq1B,4BACIp2B,KAAKkM,OAAOnK,KAAK,GAAI+9B,IAAe9/B,KAAMA,KAAKu5B,UAGjD0H,EAAFlgC,UAAA6gC,kBAAE,WACE,MAAO5hC,MAAK6hC,eAAiB7hC,KAAKoC,UAGpC6+B,EAAFlgC,UAAAs1B,cAAE,SAAcvsB,GAQZA,EAAMqsB,mBAOR8K,EAAFlgC,UAAA+gC,eAAE,SAAeh4B,GAIbA,EAAMqsB,iBAEN,IAAM4L,GAAoB/hC,KAAKqhC,YAAcrhC,KAAK0B,QAAU1B,KAAKqhC,WAAW3/B,KAC5E1B,MAAKi1B,SAAU,EACfj1B,KAAKo2B,mBAEDp2B,KAAKqhC,aACPrhC,KAAKqhC,WAAWxH,8BAA8B75B,KAAK0B,OACnD1B,KAAKqhC,WAAWT,SACZmB,GACF/hC,KAAKqhC,WAAWjL,qBAMd6K,EAAVlgC,UAAAk1B,oBAAA,SAA8BD,GAErBh2B,KAAK82B,cAAgC,aAAhBd,EAEdA,IACNh2B,KAAKqhC,YACPrhC,KAAKqhC,WAAWT,SAGd5gC,KAAK82B,eACP92B,KAAK82B,aAAaC,UAClB/2B,KAAK82B,aAAe,OARtB92B,KAAK82B,aAAe92B,KAAKg3B,QAAQC,OAAO,EAAG,GAAIC,YAAY,oBA/PjEhyB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,66BACVC,QAAF,2hDACEC,QAAF,QAAA,gBAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,iBACEpF,MACFC,MAAA,mBACMg8B,4BAAN,UACIC,6BAAJ,WACIzJ,kCAAJ,sCACI0J,YAAJ,sDAMAt8B,gBAAAC,EAAAA,wBAAAC,4GApPAZ,KAAa+H,EAAAA,oBAvEb/H,KAAEuzB,EAAAA,eAJFvzB,KAAEi9B,EAAAA,4BAPFj9B,SAAQ4J,GAARzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA2e,EAAAA,4BAkdAkd,EAAA16B,0DAlIAsvB,YAAA3wB,KAAAuB,EAAAA,MAAArB,MAAA,gBAGA0wB,iBAAA5wB,KAAAuB,EAAAA,MAAArB,MAAA,qBAGAg9B,kBAAGl9B,KAAHuB,EAAAA,MAAArB,MAAA,sBAGA6vB,UAAA/vB,KAAAuB,EAAAA,QAGA/E,QAAAwD,KAAAuB,EAAAA,QAGAmvB,gBAAG1wB,KAAHuB,EAAAA,QAwBArE,WAAA8C,KAAAuB,EAAAA,QAkBAiyB,WAAAxzB,KAAAuB,EAAAA,QAUAyF,SAAAhH,KAAAyB,EAAAA,SAaAqwB,UAAA9xB,KAAAsB,EAAAA,UAAApB,MAAAuzB,MAaA5C,gBAAA7wB,KAAAsB,EAAAA,UAAApB,MAAA,YA8BA67B,mCCndA,sBAcA/7B,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCI,SAAUowB,GAAeoB,GAAgB5xB,IACzCQ,cAAegwB,GAAeoB,QAjBhCoB,KCiBa5O,IAIXC,gBAAiBxc,EAAAA,QAAQ,aACvBC,EAAAA,MAAM,qBAAsB9T,EAAAA,OAC1BC,UAAa,uBACb8T,WAAc,aAEhBD,EAAAA,MAAM,OAAQ9T,EAAAA,OAEZi/B,aAAc,OACdlrB,WAAc,YAEhBC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CTqBHirB,GACT,GAAI5iB,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAAS2iB,mBAqBb,QAAFvP,GACc9xB,EAC6CshC,GAD7CziC,KAAdmB,mBAAcA,EAC6CnB,KAA3DyiC,WAA2DA,EAgU3D,MA7TExP,GAAFlyB,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKyiC,WAAWC,sBAAsB7hC,UAAU,WAC9ChB,EAAKsB,mBAAmBC,iCApB9B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,qBACEC,SAAU,4BACVS,MACFC,MAAA,qBACMqtB,yBAAN,kCACIC,0BAAJ,oCAEA1tB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JAuUAstB,qDAxLAjzB,MAAA0E,YAAAA,EAAE1E,KAAF2iC,kBAAAA,EAAsB3iC,KAAtBkyB,cAAAA,EACsBlyB,KAAtBuQ,UAAAA,EACsBvQ,KAAtB0L,QAAAA,EACsB1L,KAAtB4iC,KAAAA,EACsB5iC,KAAtB6iC,qCAAA,sDAnGA7iC,KAAA8iC,MAAA,OAaA9iC,KAAA+iC,eAAA,EASA/iC,KAAAgjC,YAAA,2MAkEAhjC,KAAAijC,aAAApiC,UAAA,SAAAqiC,GA6GAA,GA/FArjC,EAAsB+iC,OACtB/iC,EAAAgjC,qCAAAhjC,EAAA+iC,KAAA,eAEU/iC,EAAKsjC,qBAAftjC,EAAAujC,YACAvjC,EAAAwjC,cAKAxjC,EAAAyjC,+MAUA,MAAAzjC,GAAA6L,QAAAgd,IAAA,WACA7oB,EAAA0jC,QAEAz5B,EAAAqsB,wBApDA,MAwDA30B,QAAOC,eAAPsxB,EAAAhyB,UAAA,YACAiN,uDA5HAtM,EAAA,QAAAA,EAAA,MAAA,2BAEA1B,KAAA2hB,UAAAjgB,EACQ1B,KAAKwjC,kBAAkBzhC,SAG/BmM,YAAA,EACAC,cAAA,6GAMAnO,KAAAyjC,aAAA72B,QAEAsB,YAAA,EACAC,cAAA,6KAMEA,cAAF,oKAMEA,cAAF,0JAoBAD,YAAA,kOAMAA,YAAA,0KASAA,YAAA,uNAMAA,YAAA,4FAgBA,MAAAlO,MAAAkjC,QAAA,SAAAljC,KAAAq/B,MAEAnxB,YAAA,EACAC,cAAA,iEAyCAnO,KAAAojC,WAAAM,+BAAAv6B,KAAA,SAAAw6B,2JAkBA,GAAAC,GAAA5jC,KAAA4iC,MAAA5iC,KAAA4iC,KAAAiB,aACAD,IAAA5jC,KAAA0E,YAAA9B,cAAAuO,SAAAyyB,KAEA5jC,KAAA6iC,+CAAAiB,aAEA9jC,KAAAkyB,cAAA0E,SAAA52B,KAAA6iC,qCAAA7iC,KAAA+jC,YAGA/jC,KAAA0E,YAAA9B,cAAA23B,QAEAv6B,KAAO6iC,qCAAP,KACA7iC,KAAA+jC,WAAA,+HAMA/jC,KAAAojC,WAAAY,QAAAhkC,KAAAmjC,6KAeAnjC,KAAAojC,WAAAa,WAGAziC,OAAAC,eAAAsxB,EAAAhyB,UAAA,UACAiN,2GAQEG,cAAF,2JAqCA,YAdA,KAAA+1B,IAAAA,GAAAlkC,KAAAkjC,YAAA,KAAAiB,IAAAA,EAAA,WAASnkC,KAATokC,QAAAF,EAAAA,GAGQlkC,KAAR+nB,gBAAA/nB,KAAAqkC,kBAAA,OAAA,eAEQrkC,KAAR+jC,WAAAI,IAGAnkC,KAAA+nB,gBAAA,OAAU/nB,KAAVsjC,iBAEMtjC,KAAKojC,aACXpjC,KAAAojC,WAAAY,QAAAhkC,KAAAmjC,qBAGA,GAAAl6B,SAAqB,SAArBC,GACArJ,EAAAojC,aAAA72B,KAAA0I,EAAAA,KAAA,IAAAjU,UAAA,SAAA6pB,GAAA,MAAAxhB,GAAAwhB,EAAA,OAAA,+JAWA,IAAAhI,EAAA3E,QAAA,SAAA,SAAA6E,GACA,SAAAF,GAAuC,IAAvCE,EAAA7E,QAAA,UAEQ/d,KAARijC,aAAAlhC,KAA+B/B,KAA/BokC,UAGA5iC,OAAAC,eAAAsxB,EAAAhyB,UAAA,UACAiN,sGAGAE,YAAA,EACAC,cAAA,mBAAAjJ,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCA3RAC,SAAA,4BACE6T,YAAFsa,GAAAC,iBACE3tB,MACFC,MAAA,aACA2tB,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI5xB,SAAJ,MAEAuD,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAotB,EAAA1Z,eAAA,WAAA,QACAnU,KAAA6N,EAAAA,+EA3FA7N,KAAE8H,EAAAA,SAhBF9H,SAA8C4J,GAA9CzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAAwM,EAAAA,eAIAmhB,EAAAxsB,gBAkBA8C,WAAAnE,KAAAuB,EAAAA,QA+LA44B,OAAAn6B,KAAAuB,EAAAA,iEAjGAw8B,eAAA/9B,KAAAyB,EAAAA,SAaA29B,gBAAAp/B,KAAAyB,EAAAA,OAAAvB,MAAA,YASAm/B,cAAAr/B,KAAAyB,EAAAA,SAMA69B,gBAAAt/B,KAAAyB,EAAAA,OAAAvB,MAAA,YAeAq/B,cAAAv/B,KAAAyB,EAAAA,SAKA68B,oBAAAt+B,KAAAyB,EAAAA,OAAAvB,MAAA,qBAMA89B,SAAAh+B,KAAAuB,EAAAA,SAeAssB,qFA0RA/yB,KAAAmyB,SAAAA,iBAAEnyB,KAAFmB,mBAAAA,EAAkCnB,KAAlCo1B,eAAAA,EAKiEp1B,KAAjE0kC,cAAA,GAAA38B,GAAAA,aAtCA/H,KAAA+Y,WAAA,GAAAlN,GAAAA,QAgBA7L,KAAA2kC,gBAAA,GAAA94B,GAAAA,6FAUA5I,GAEAA,EAAAiJ,OAAAE,KAAAC,EAAAA,UAAArM,KAAA+Y,aAAAlY,UAAA,4DAgBAb,KAAA4kC,UAAAC,EApFA,MAsFArjC,QAAAC,eAAAoxB,EAAA9xB,UAAA,SAGIiN,mEAtFJxM,OAAAC,eAAAoxB,EAAA9xB,UAAA,wEAGAS,OAAAC,eAAAoxB,EAAA9xB,UAAA,6IAYAS,OAAAC,eAAAoxB,EAAA9xB,UAAA,uKAWA2tB,8FAKEvgB,cAAF,8CA0DA,GAAAtO,GAAAG,6FAAAH,EAAAizB,SAAA1pB,QAAA,SAAA07B,GAAAjlC,EAAAklC,mBAAAD,GACAjlC,EAAkBmlC,qBAAlBF,GACAjlC,EAAAolC,iBAAAH,OAGAjlC,EAAAizB,SAAAtwB,QACQ3C,EAAKqlC,cAAbrlC,EAAiCslC,SACzBtlC,EAAKqlC,cAAbrlC,EAAAulC,QACAvlC,EAAAwlC,wBAGAxlC,EAAAsB,mBAAAC,iBAEApB,KAAA2kC,gBAAAv4B,KAAAk5B,EAAAA,aAAA,IAGAj5B,EAAAA,UAAWrM,KAAX+Y,aAA6BlY,UAA7B,WAAA,MAAAhB,GAAAwlC,2BAOAxS,EAAA9xB,UAAAC,uBAEAhB,KAAA2kC,gBAAA93B,+EAOE,kFAKA,iEAEFgmB,EAAA9xB,UAAAwkC,qBAEA,GAAA1lC,GAAAG,uCAAAA,KAAA0L,QAMGO,kBANH,WAAA,MAAApM,GAAA8kC,gBAAA/3B,yMAcA,iBAAA9C,EAAA4Y,SAAA,mBACoB7iB,EADpBu1B,gBAIAv1B,EAAcsyB,SAAdvvB,cAAA4F,UAAAG,IAAA,mDAGM9I,EAANsB,mBAAAC,iBAEA,SAAA0jC,EAAAzF,MAEMyF,EAAN7B,aAAA72B,KAAAC,EAAAA,UAAArM,KAAA8yB,SAAAppB,UAAA7I,UAAA,WACA,MAAAhB,GAAA2lC,mBAAAV,EAAA5B,sEAeA4B,EAAAtB,kBAAAp3B,KAAAC,EAAAA,UAAArM,KAAA8yB,SAAAppB,UAAA7I,UAAA,WACAhB,EAAA6L,QAAAmd,iBAAAzC,eAAAha,KAAA0I,EAAAA,KAAA,IAAAjU,UAAA,6KAWAA,UAAA,qCACAhB,EAAAsB,mBAAAC,8HAWQpB,KAAKmyB,SAAbvvB,cAAA4F,UAAAC,OAAA,mDAQU,sGACoB,MAA9B5I,EAAsBulC,gBAIZvlC,EAAMulC,KAAhBN,IAGA,MAAAjlC,EAAAslC,QACAM,GAAA,SACY5lC,EAAZslC,OAAAL,KAGA9kC,KAAA0lC,OAAA1lC,KAAA2lC,MAAA,KAEA3lC,KAAAiD,MAAA,QAAAjD,KAAAiD,KAAAvB,OACA1B,KAAA2lC,MAAA3lC,KAAAolC,KAEQplC,KAAR0lC,OAAsB1lC,KAAtBmlC,SAIMnlC,KAAK2lC,MAAQ3lC,KAAKmlC,OAClBnlC,KAAK0lC,OAAS1lC,KAAKolC,6BAQf,8KAKVplC,KAAA0kC,cAAA3iC,iCAGA8wB,EAAA9xB,UAAA6kC,6BAEA,GAAA/lC,GAAAG,6BAAAiR,OAAA,SAAA6zB,GAAA,MAAAA,KAAAA,EAAAe,cAAAhmC,EAAAimC,iBAAAhB,KAAA17B,QAAA,SAAA07B,GAAA,MAAA,GAAAvB,WAKA1Q,EAAA9xB,UAAAglC,8BAEA,MAAA/lC,MAAAklC,cAAAllC,KAAAmlC,SAAoBnlC,KAApB8lC,iBAAA9lC,KAAAmlC,uGAKU,SAAVL,8EAIU,SAAVA,yJAgBA3kB,GAAAngB,KAAQ2lC,MAARK,WAGa,IAAb,QAAAhmC,KAAsB2lC,MAAtBtG,KAAA,CACU,GAAVjf,GAAApgB,KAAA2lC,MAAAK,MACQ7lB,IAAQC,EAChB0M,GAAA1M,EAEA,GAAApgB,KAAA0lC,QAAA1lC,KAAA0lC,OAAAxC,OACA,GAAA,QAAQljC,KAAK0lC,OAAbrG,KACAvS,GAAA9sB,KAAA0lC,OAAAM,WAGa,IAAb,QAAAhmC,KAAA0lC,OAAArG,KAAA,CACU,GAAVjf,GAAuCpgB,KAAvC0lC,OAAAM,MACQlZ,IAAS1M,EACjBD,GAAAC,EAEAD,IAAangB,KAAbimC,gBAAA9lB,MAAA2M,IAAA9sB,KAAAimC,gBAAAnZ,QACA9sB,KAAAimC,iBAAA9lB,KAAAA,EAAA2M,MAAAA,GAIQ9sB,KAAR0L,QAAqBgd,IAArB,WAAA,MAA8C7oB,GAA9C6iC,sBAAA91B,KAAA/M,EAAqFomC,oCAKrF/gC,KAAUC,EAAAA,UAAVC,OAAAC,SAAA,uBACA8F,SAAA;s5DAnUApF,MACAC,MAAA,uBACA4sB,iDAAA,qBAEEhtB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAktB,EAAAxZ,eAAA,WAAA,QACAnU,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,aACApB,KAAA6N,EAAAA,aACA7N,KAAA8H,EAAAA,sLAvXA6lB,EAAAtsB,gBAMAusB,WAAA5tB,KAAAsO,EAAAA,gBAAApO,MAAA2tB,MAXAhR,WAAA7c,KAAA8tB,EAAAA,aAAA5tB,MAAA6tB,MA4cAC,WAAAhuB,KAAAuB,EAAAA,QACA0sB,cAAAjuB,KAAAuB,EAAAA,gGA9EAosB,oBC5WE,QAAFO,GACM5C,EAC+C7E,GACrD,MAAIxkB,GAAJC,KAAApH,KAAUwwB,EAAmB7E,IAA7B3rB,KAsEA,MA1EuCoI,GAAvCgrB,EAAAjsB,kBAZAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,4BACVS,MACFC,MAAA,yCACMqtB,yBAAN,kCACIC,0BAAJ,oCAEA1tB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JA8EAytB,OA/GAG,GAAA,SAAApsB,gBAuEA,GAAAtH,GAAA,OAAAsH,GAAAA,EAAA4C,MAAA/J,KAAAwY,YAAAxY,IAcA,+CATAH,EAAA2zB,gBAAA,EASA3zB,EAZA,gMAEEsO,cAAF,yKASEA,cAAF,kLASEA,cAAF,wFA/CA7I,SAAA,4BACE6T,YAAFsa,GAAAC,iBACE3tB,MACFC,MAAA,yBACA3D,SAAA,KACAsxB,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIC,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEAxuB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIA4tB,EAAAhtB,gBACA8tB,kBAAAnvB,KAAAuB,EAAAA,sEAGA8sB,GASAR,IASAuB,GAAA,SAAAntB,6EAoByCmtB,EAAzCjuB,y1EAbAN,MACAC,MAAA,6CACA4sB,iDAAA,qBAEEhtB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA2uB,EAAA/tB,gBACAusB,WAAA5tB,KAAAsO,EAAAA,gBAAApO,MAAAmuB,MACAxR,WAAA7c,KAAA8tB,EAAAA,aAAA5tB,MAAAguB,cCtGAmB,GAAA,yBAPA,sBAgBArvB,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAC,GACAmlB,EAAAA,qBACAC,EAAAA,gBAEFhlB,SACEJ,GACA0jB,GACAF,GACAI,GACAM,GACAe,GACAlB,IAEFvjB,cACEkjB,GACAF,GACAI,GACAM,GACAe,GACAlB,QAtCJmB,KC8CIG,GAAe,EAENC,IACX9hB,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAA0S,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEWC,EAEAC,GAFAj1B,KAAXg1B,OAAWA,EAEAh1B,KAAXi1B,QAAWA,EA5DX,MAAAF,MAiEAG,GAAA,WACE,QAAFA,GAAqBxwB,GAAA1E,KAArB0E,YAAqBA,EAlErB,MAAAwwB,MAoEaC,GACX/nB,EAAcpG,EAAWC,EAAmBoG,EAAc6nB,KAAsB,0BA+FhF,QAAFL,GAAc9vB,EAKAwL,EACQ2hB,EACA/wB,EACekB,EACfqJ,EAC0C0pB,GAV9D,GAAFv1B,GAYIsH,EAZJC,KAAApH,KAYU+E,IAZV/E,WAMsBH,GAAtBqyB,cAAsBA,EACAryB,EAAtBsB,mBAAsBA,EAEAtB,EAAtB6L,QAAsBA,EAC0C7L,EAAhEu1B,eAAgEA,EAhFhEv1B,EAAAw1B,SAAqB,SAACC,KACtBz1B,EAAA01B,UAAsB,aAEtB11B,EAAA21B,UAA8B,uBAAsBd,GACpD70B,EAAA41B,WAA+B,EAC/B51B,EAAA61B,UAA8B,EAM9B71B,EAAA81B,WAAsB,EAkBtB91B,EAAA8X,KAAiC,KAGjC9X,EAAAyuB,GAAwBzuB,EAAK21B,UAG7B31B,EAAA+1B,cAA+C,QAK/C/1B,EAAAg2B,UAAkD,KAGlDh2B,EAAAi2B,eAA4D,KAgB5Dj2B,EAAAqM,OAAM,GAAInE,GAAAA,aAwBNlI,EAAKwC,SAAWoL,SAASpL,IAAa,IAf1C,MAvEoC+F,GAApCysB,EAAA1tB,GAkDA3F,OAAAC,eAAMozB,EAAN9zB,UAAA,gBAAA,WAA4B,MAAOf,MAAKy1B,eACtC,SAAa/zB,GAAS1B,KAAKy1B,UAAYptB,EAAAA,sBAAsB3G,oCAI/DF,OAAAC,eAAMozB,EAAN9zB,UAAA,eAAA,WAA2B,MAAOf,MAAK01B,cACrC,SAAYh0B,GACV1B,KAAK01B,SAAWrtB,EAAAA,sBAAsB3G,GACtC1B,KAAKmB,mBAAmBC,gDAO1BI,OAAFC,eAAMozB,EAAN9zB,UAAA,eAAE,WAAwB,OAAUf,KAAKsuB,IAAMtuB,KAAKw1B,WAApD,0CAwBEX,EAAF9zB,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKkyB,cACFE,QAAQpyB,KAAK+1B,cAAcnzB,eAC3B/B,UAAU,SAAAm1B,GAAe,MAAAn2B,GAAKo2B,oBAAoBD,MAGvDnB,EAAF9zB,UAAAC,YAAE,WACEhB,KAAKkyB,cAAcI,eAAetyB,KAAK+1B,cAAcnzB,gBAIvDiyB,EAAF9zB,UAAAm1B,eAAE,SAAepsB,GASb,GALAA,EAAMqsB,kBAKFn2B,KAAK21B,UAEP,YADA31B,KAAK+1B,cAAcnzB,cAAcqyB,QAAUj1B,KAAKi1B,QAKlDj1B,MAAKi1B,QAAUj1B,KAAK+1B,cAAcnzB,cAAcqyB,QAIhDj1B,KAAKo2B,oBAIPvB,EAAF9zB,UAAAs1B,cAAE,SAAcvsB,GAQZA,EAAMqsB,mBAIRtB,EAAF9zB,UAAAu1B,WAAE,SAAW50B,GACT1B,KAAKi1B,UAAYvzB,GAInBmzB,EAAF9zB,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAKq1B,SAAWmB,GAIlB3B,EAAF9zB,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKu1B,UAAYiB,GAInB3B,EAAF9zB,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,EAChB32B,KAAKmB,mBAAmBC,gBAI1ByzB,EAAF9zB,UAAA0B,MAAE,WACEzC,KAAKkyB,cAAc0E,SAAS52B,KAAK+1B,cAAcnzB,cAAe,aAIhEiyB,EAAF9zB,UAAA81B,OAAE,WACE72B,KAAKi1B,SAAWj1B,KAAKi1B,SAIfJ,EAAV9zB,UAAAk1B,oBAAA,SAA8BD,GAErBh2B,KAAK82B,cAAgC,aAAhBd,EAGdA,IACVh2B,KAAKu1B,YAGDv1B,KAAK82B,eACP92B,KAAK82B,aAAaC,UAClB/2B,KAAK82B,aAAe,OAPtB92B,KAAK82B,aAAe92B,KAAKg3B,QAAQC,OAAO,EAAG,GAAIC,YAAY,KAevDrC,EAAV9zB,UAAAq1B,4BACIp2B,KAAKq1B,SAASr1B,KAAKi1B,SACnBj1B,KAAKkM,OAAOnK,KAAK,GAAIgzB,IAAqB/0B,KAAMA,KAAKi1B,WAI/CJ,EAAV9zB,UAAAo2B,mBAAA,SAA6BC,GACzB,GAAIC,GAAcD,EAAWp3B,KAAKs3B,eAAkB,GAOpD,OAJIt3B,MAAKu3B,mBACPF,GAAc,KAGT5zB,KAAKC,IAAI,EAAGD,KAAKE,IAAI0zB,EAAY,OAG1CxC,EAAF9zB,UAAAy2B,aAAE,WACE,IAAKx3B,KAAKoC,WAAapC,KAAK21B,UAAW,CACrC,GAAM8B,GAAUz3B,KAAK03B,SAAS90B,aAC9B5C,MAAKs3B,eAAiBt3B,KAAK23B,YAAY/0B,cAAcg1B,YAAcH,EAAQG,YAC3EH,EAAQjvB,UAAUG,IAAI,gBAEtB3I,KAAKu3B,iBAAmBv3B,KAAKi1B,QAC7Bj1B,KAAK21B,WAAY,IAIrBd,EAAF9zB,UAAA82B,QAAE,SAAQ/tB,GACN,GAAI9J,KAAK21B,UAAW,CAClB31B,KAAK83B,gBAAkB93B,KAAKm3B,mBAAmBrtB,EAAMiuB,OAErD,IAAMC,GAASh4B,KAAK83B,gBAAkB,IAAO93B,KAAKs3B,cAClDt3B,MAAK03B,SAAS90B,cAAcS,MAAMC,UAAY,eAAe00B,EAAnE,cAIEnD,EAAF9zB,UAAAk3B,WAAE,WAAA,GAAFp4B,GAAAG,IACI,IAAIA,KAAK21B,UAAW,CAClB,GAAMuC,GAAkBl4B,KAAK83B,gBAAkB,EAE3CI,KAAoBl4B,KAAKi1B,UAC3Bj1B,KAAKi1B,QAAUiD,EACfl4B,KAAKo2B,oBAKPp2B,KAAK0L,QAAQO,kBAAkB,WAAM,MAAA8Z,YAAW,WAC1ClmB,EAAK81B,YACP91B,EAAK81B,WAAY,EACjB91B,EAAK63B,SAAS90B,cAAc4F,UAAUC,OAAO,gBAI7C5I,EAAK63B,SAAS90B,cAAcS,MAAMC,UAAY,UAOtDuxB,EAAF9zB,UAAAo3B,mBAAE,WAIEn4B,KAAKmB,mBAAmBC,+BA9Q5B8D,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACE8F,SAAU,iBACVpF,MACFC,MAAA,mBACMoyB,OAAN,KACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,4BACIC,kCAAJ,uCAEAlzB,SAAA,ukCACAC,QAAA,k0EACEqN,WAAF+hB,IACEnvB,QAAS,WAAX,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAtEAZ,KAAEuzB,EAAAA,eAPFvzB,KAAQ+H,EAAAA,oBAFR/H,SAAQ4J,GAARzI,aAAAnB,KAAA+J,EAAAA,UAAA7J,MAAA,gBAOAF,KAAE8H,EAAAA,SA6JF9H,SAAA4J,GAAAzI,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAAA6J,EAAAA,OAAmC3J,MAAnC2e,EAAAA,4BAEA8Q,EAAAtuB,0HAzDAoR,OAAAzS,KAAAuB,EAAAA,QAGA6nB,KAAAppB,KAAAuB,EAAAA,QAGAmvB,gBAAA1wB,KAAAuB,EAAAA,QAGAovB,YAAA3wB,KAAAuB,EAAAA,MAAArB,MAAA,gBAGA0wB,iBAAA5wB,KAAAuB,EAAAA,MAAArB,MAAA,qBAKAszB,WAAAxzB,KAAAuB,EAAAA,QAGAwuB,UAAA/vB,KAAAuB,EAAAA,QAGAyF,SAAAhH,KAAAyB,EAAAA,SAKAovB,gBAAG7wB,KAAHsB,EAAAA,UAAApB,MAAA,WAOA4xB,UAAA9xB,KAAAsB,EAAAA,UAAApB,MAAAuzB,OAUA9D,mCClKA,sBAeA3vB,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CC,SAAUolB,GAAgBxlB,IAC1BQ,cAAeglB,IACfjiB,YACGC,QAAS2R,EAAAA,sBAAuBC,SAAUC,SApB/CkU,KpBsEaC,IACXhmB,QAAS+hB,EAAAA,kBACT9hB,YAAaqP,EAAAA,WAAW,WAAM,MAAA6B,MAC9B8Q,OAAO,GAITgE,GAAA,yBA7EA,MAAAA,MAwFAC,GAAA,WACE,QAAFA,GAAqBr0B,GAAA1E,KAArB0E,YAAqBA,EAzFrB,MAAAq0B,MA2FaC,GACX5rB,EAAcpG,EAAWqG,EAAc0rB,IAAgB,0BA4VvD,QAAF/U,GAAcjf,EACQmtB,EACA/wB,EACY8B,EACGZ,EAE2B+yB,GAN9D,GAAFv1B,GAOIsH,EAPJC,KAAApH,KAOU+E,IAPV/E,WACsBH,GAAtBqyB,cAAsBA,EACAryB,EAAtBsB,mBAAsBA,EACYtB,EAAlCoD,KAAkCA,EAG8BpD,EAAhEu1B,eAAgEA,EA5ShEv1B,EAAAo5B,SAAoB,EAYpBp5B,EAAAq5B,KAAyB,IAiBzBr5B,EAAAs5B,KAAyB,EAezBt5B,EAAAu5B,MAA0B,EAM1Bv5B,EAAAw5B,aAAiC,EAiBjCx5B,EAAAy5B,cAA2C,EA4B3Cz5B,EAAA05B,OAAkC,KAelC15B,EAAA25B,WAAsB,EAGtB35B,EAAAqM,OAA6D,GAAInE,GAAAA,aAGjElI,EAAAykB,MAA4D,GAAIvc,GAAAA,aA6BhElI,EAAA01B,UAAyB,aAIzB11B,EAAA45B,SAA6B,EAM7B55B,EAAA65B,YAAwB,EAMxB75B,EAAAoO,WAAuB,EAqGvBpO,EAAA85B,qBAAyC,EAGzC95B,EAAA+5B,kBAAiD,KAEjD/5B,EAAAg6B,8BAAgE,aAMhEh6B,EAAAi6B,uBAAmCtyB,EAAAA,aAAaC,MA8B5C5H,EAAKwC,SAAWoL,SAASpL,IAAa,IAxB1C,MA/R+B+F,GAA/B4b,EAAA7c,GAIA3F,OAAAC,eAAMuiB,EAANjjB,UAAA,cAAA,WAA0B,MAAOf,MAAKi5B,aACpC,SAAWv3B,GACT1B,KAAKi5B,QAAU5wB,EAAAA,sBAAsB3G,oCAMzCF,OAAAC,eAAMuiB,EAANjjB,UAAA,WAAA,WAAsB,MAAOf,MAAKk5B,UAChC,SAAQ11B,GACNxD,KAAKk5B,KAAO5wB,EAAAA,qBAAqB9E,EAAGxD,KAAKk5B,MACzCl5B,KAAKy5B,SAAWz5B,KAAK+5B,qBAAqB/5B,KAAKu5B,QAG/Cv5B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMuiB,EAANjjB,UAAA,WAAA,WAAsB,MAAOf,MAAKm5B,UAChC,SAAQ31B,GACNxD,KAAKm5B,KAAO7wB,EAAAA,qBAAqB9E,EAAGxD,KAAKm5B,MAGrB,OAAhBn5B,KAAKu5B,SACPv5B,KAAK0B,MAAQ1B,KAAKm5B,MAEpBn5B,KAAKy5B,SAAWz5B,KAAK+5B,qBAAqB/5B,KAAKu5B,QAG/Cv5B,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMuiB,EAANjjB,UAAA,YAAA,WAAuB,MAAOf,MAAKo5B,WACjC,SAAS51B,GACPxD,KAAKo5B,MAAQ9wB,EAAAA,qBAAqB9E,EAAGxD,KAAKo5B,OAEtCp5B,KAAKo5B,MAAQ,GAAM,IACrBp5B,KAAKg6B,gBAAkBh6B,KAAKo5B,MAAMa,WAAWC,MAAM,KAAKC,MAAO33B,QAIjExC,KAAKmB,mBAAmBC,gDAM5BI,OAAAC,eAAMuiB,EAANjjB,UAAA,kBAAA,WAA8B,MAAOf,MAAKq5B,iBACxC,SAAe33B,GAAkB1B,KAAKq5B,YAAchxB,EAAAA,sBAAsB3G,oCAQ5EF,OAAAC,eAAMuiB,EAANjjB,UAAA,oBAAA,WAAuB,MAAOf,MAAKs5B,mBACjC,SAAiB53B,GAEb1B,KAAKs5B,cADO,SAAV53B,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB4G,EAAAA,qBAAqB5G,EAAO1B,KAA4B,eAExD,mCAO3BwB,OAAAC,eAAMuiB,EAANjjB,UAAA,wBAKI,MAHoB,QAAhBf,KAAKu5B,SACPv5B,KAAK0B,MAAQ1B,KAAKm5B,MAEbn5B,KAAKu5B,YAEd,SAAU/1B,GACR,GAAIA,IAAMxD,KAAKu5B,OAAQ,CACrB,GAAI73B,GAAQ4G,EAAAA,qBAAqB9E,EAI7BxD,MAAKg6B,kBACPt4B,EAAQ04B,WAAW14B,EAAM24B,QAAQr6B,KAAKg6B,mBAGxCh6B,KAAKu5B,OAAS73B,EACd1B,KAAKy5B,SAAWz5B,KAAK+5B,qBAAqB/5B,KAAKu5B,QAG/Cv5B,KAAKmB,mBAAmBC,iDAc9BI,OAAAC,eAAMuiB,EAANjjB,UAAA,gBAAA,WAA4B,MAAOf,MAAKw5B,eACtC,SAAa93B,GACX1B,KAAKw5B,UAAYnxB,EAAAA,sBAAsB3G,oCAWzCF,OAAFC,eAAMuiB,EAANjjB,UAAA,oBAAE,WACE,MAAIf,MAAKokB,YACApkB,KAAKokB,YAAYpkB,KAAK0B,OAM3B1B,KAAKg6B,iBAAmBh6B,KAAK0B,OAAS1B,KAAK0B,MAAQ,GAAM,EACpD1B,KAAK0B,MAAM24B,QAAQr6B,KAAKg6B,iBAG1Bh6B,KAAK0B,OAAS,mCAIvBsiB,EAAFjjB,UAAA0B,MAAE,WACEzC,KAAKs6B,qBAIPtW,EAAFjjB,UAAAw5B,KAAE,WACEv6B,KAAKw6B,oBAOPh5B,OAAFC,eAAMuiB,EAANjjB,UAAA,eAAE,WAAwB,MAAOf,MAAKy6B,OAAOz6B,KAAKy5B,2CAmBhDj4B,OAAFC,eAAMuiB,EAANjjB,UAAA,mBAAE,WAGE,MAAOf,MAAKqkB,UAAYrkB,KAAK06B,OAAS16B,KAAK06B,wCAK7Cl5B,OAAFC,eAAMuiB,EAANjjB,UAAA,mBAAE,WACE,MAAwB,KAAjBf,KAAK26B,yCAOdn5B,OAAFC,eAAMuiB,EAANjjB,UAAA,iBAAE,WACE,MAAIf,MAAKoC,SAhRc,EAmRnBpC,KAAK46B,cAAgB56B,KAAKkkB,WACrBlkB,KAAKiO,UA9QiB,GAHG,EAmR3B,mCAITzM,OAAFC,eAAMuiB,EAANjjB,UAAA,8BAAE,WACE,GAAI85B,GAAO76B,KAAKqkB,SAAW,IAAM,GAEjC,QACE/gB,UAAa,YAAYu3B,EAA/B,KAFe76B,KAAK86B,mBAAqB,IAAM,IAED96B,KAAK+6B,UAAnD,YAAwEF,EAAxE,KAAgF,EAAI76B,KAAK26B,SAAzF,sCAKEn5B,OAAFC,eAAMuiB,EAANjjB,UAAA,wBAAE,WACE,GAAI85B,GAAO76B,KAAKqkB,SAAW,IAAM,GAEjC,QACE/gB,UAAa,YAAYu3B,EAA/B,KAFe76B,KAAK86B,mBAAqB,GAAK,KAEA96B,KAAK+6B,UAAnD,YAAwEF,EAAxE,IAAgF76B,KAAK26B,QAArF,sCAKEn5B,OAAFC,eAAMuiB,EAANjjB,UAAA,6BAAE,WAME,OACEuC,UAAa,aANJtD,KAAKqkB,SAAW,IAAM,KAMrC,KAHgBrkB,KAAKqkB,UAA+B,OAAnBrkB,KAAKguB,WAA2B,IAAL,IAC3ChuB,KAAK25B,qBAAuB,EAAI,IAEjD,uCAKEn4B,OAAFC,eAAMuiB,EAANjjB,UAAA,oBAAE,WACE,GAAIi6B,GAAuC,IAA5Bh7B,KAAK25B,qBAChBsB,EAAiBj7B,KAAKqkB,SAAW,OAAO2W,EAAhD,IAAiEA,EAAjE,QACQH,EAAO76B,KAAKqkB,SAAW,IAAM,IAI7B6W,EAAQl7B,KAAKqkB,UAA+B,OAAnBrkB,KAAKguB,WAA4B,GAAN,IACpDmN,EAAUn7B,KAAKqkB,UAA+B,OAAnBrkB,KAAKguB,WAA0C,GAApB,kBACtDzoB,GACF01B,eAAkBA,EAElB33B,UAAa,0BAA0Bu3B,EAA7C,IAAqDK,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAIn7B,KAAK46B,aAAe56B,KAAK+6B,UAAW,CAItCx1B,EAAO,WAHIvF,KAAKqkB,SACXrkB,KAAKo7B,YAAc,SAAW,MAC9Bp7B,KAAKo7B,YAAc,QAAU,SACJp7B,KAAK+6B,UAAzC,KAGI,MAAOx1B,oCAGT/D,OAAFC,eAAMuiB,EAANjjB,UAAA,6BAAE,WAOE,OACEuC,UAAa,aAPJtD,KAAKqkB,SAAW,IAAM,KAOrC,KAFoE,MADxC,OAAnBrkB,KAAKguB,YAAwBhuB,KAAKqkB,SAAgCrkB,KAAKo7B,aAAxBp7B,KAAKo7B,aAC5Bp7B,KAAK26B,QAAU,EAAI36B,KAAK26B,SAEzD,uCA4BAn5B,OAAAC,eAAcuiB,EAAdjjB,UAAA,qCACI,MAA2B,OAAnBf,KAAKguB,YAAwBhuB,KAAKqkB,SAAgCrkB,KAAKo7B,aAAxBp7B,KAAKo7B,6CAIhE55B,OAAAC,eAAcuiB,EAAdjjB,UAAA,6BACI,MAAQf,MAAKiD,MAA2B,OAAnBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,uCAe3DsiB,EAAFjjB,UAAA+f,SAAE,WAAA,GAAFjhB,GAAAG,IACIA,MAAKkyB,cACAE,QAAQpyB,KAAK0E,YAAY9B,eAAe,GACxC/B,UAAU,SAAC0I,GACV1J,EAAKoO,YAAc1E,GAAqB,aAAXA,EAC7B1J,EAAKsB,mBAAmBynB,kBAE1B5oB,KAAKiD,OACPjD,KAAK85B,uBAAyB95B,KAAKiD,KAAKiJ,OAAOrL,UAAU,WACvDhB,EAAKsB,mBAAmBC,mBAK9B4iB,EAAFjjB,UAAAC,YAAE,WACEhB,KAAKkyB,cAAcI,eAAetyB,KAAK0E,YAAY9B,eACnD5C,KAAK85B,uBAAuB74B,eAG9B+iB,EAAFjjB,UAAAs6B,cAAE,WACMr7B,KAAKoC,WAMTpC,KAAK45B,kBAAoB55B,KAAKs7B,uBAC9Bt7B,KAAKu7B,+BAGPvX,EAAFjjB,UAAAy6B,SAAE,SAAS1xB,GACP,IAAI9J,KAAKoC,SAAT,CAIA,GAAIq5B,GAAWz7B,KAAK0B,KACpB1B,MAAK05B,YAAa,EAClB15B,KAAKs6B,oBACLt6B,KAAK07B,0BAA0BC,EAAG7xB,EAAM8xB,QAASC,EAAG/xB,EAAMgyB,UAGtDL,GAAYz7B,KAAK0B,QACnB1B,KAAK+7B,kBACL/7B,KAAKo2B,sBAITpS,EAAFjjB,UAAAi7B,SAAE,SAASlyB,GACP,IAAI9J,KAAKoC,SAAT,CAMKpC,KAAK05B,YACR15B,KAAKi8B,cAAc,MAIrBnyB,EAAMsE,gBAEN,IAAIqtB,GAAWz7B,KAAK0B,KACpB1B,MAAK07B,0BAA0BC,EAAG7xB,EAAMoyB,OAAOP,EAAGE,EAAG/xB,EAAMoyB,OAAOL,IAG9DJ,GAAYz7B,KAAK0B,OACnB1B,KAAK+7B,oBAIT/X,EAAFjjB,UAAAk7B,cAAE,SAAcnyB,GACR9J,KAAKoC,UAAYpC,KAAK05B,aAK1B15B,KAAKq7B,gBAELr7B,KAAK05B,YAAa,EAClB15B,KAAKs6B,oBACLt6B,KAAKm8B,mBAAqBn8B,KAAK0B,MAE3BoI,IACF9J,KAAK07B,0BAA0BC,EAAG7xB,EAAMoyB,OAAOP,EAAGE,EAAG/xB,EAAMoyB,OAAOL,IAClE/xB,EAAMsE,oBAIV4V,EAAFjjB,UAAAq7B,YAAE,WACEp8B,KAAK05B,YAAa,EAEd15B,KAAKm8B,oBAAsBn8B,KAAK0B,OAAU1B,KAAKoC,UACjDpC,KAAKo2B,mBAEPp2B,KAAKm8B,mBAAqB,MAG5BnY,EAAFjjB,UAAAs7B,SAAE,WAGEr8B,KAAK45B,kBAAoB55B,KAAKs7B,uBAC9Bt7B,KAAKu7B,8BAGPvX,EAAFjjB,UAAAu7B,QAAE,WACEt8B,KAAKu1B,aAGPvR,EAAFjjB,UAAAw7B,WAAE,SAAWzyB,GACT,IAAI9J,KAAKoC,SAAT,CAEA,GAAIq5B,GAAWz7B,KAAK0B,KAEpB,QAAQoI,EAAMyZ,SACZ,IAAKiZ,GAAAA,QACHx8B,KAAKy8B,WAAW,GAChB,MACF,KAAKC,GAAAA,UACH18B,KAAKy8B,YAAY,GACjB,MACF,KAAK/Y,GAAAA,IACH1jB,KAAK0B,MAAQ1B,KAAK0D,GAClB,MACF,KAAK8f,GAAAA,KACHxjB,KAAK0B,MAAQ1B,KAAK2D,GAClB,MACF,KAAKg5B,GAAAA,WAQH38B,KAAKy8B,WAA8B,OAAnBz8B,KAAKguB,WAAsB,GAAK,EAChD,MACF,KAAK4O,GAAAA,SACH58B,KAAKy8B,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEH78B,KAAKy8B,WAA8B,OAAnBz8B,KAAKguB,YAAuB,EAAI,EAChD,MACF,KAAK8O,GAAAA,WACH98B,KAAKy8B,YAAY,EACjB,MACF,SAGE,OAGAhB,GAAYz7B,KAAK0B,QACnB1B,KAAK+7B,kBACL/7B,KAAKo2B,oBAGPp2B,KAAK05B,YAAa,EAClB5vB,EAAMsE,mBAGR4V,EAAFjjB,UAAAg8B,SAAE,WACE/8B,KAAK05B,YAAa,GAIZ1V,EAAVjjB,UAAA07B,WAAA,SAAqBO,GACjBh9B,KAAK0B,MAAQ1B,KAAKy6B,QAAQz6B,KAAK0B,OAAS,GAAK1B,KAAKikB,KAAO+Y,EAAUh9B,KAAK2D,IAAK3D,KAAK0D,MAI5EsgB,EAAVjjB,UAAA26B,yBAAA,SAAmCuB,GAC/B,GAAKj9B,KAAK45B,kBAAV,CAIA,GAAIsD,GAASl9B,KAAKqkB,SAAWrkB,KAAK45B,kBAAkB5M,IAAMhtB,KAAK45B,kBAAkBzZ,KAC7Egd,EAAOn9B,KAAKqkB,SAAWrkB,KAAK45B,kBAAkBjvB,OAAS3K,KAAK45B,kBAAkBxZ,MAC9Egd,EAAep9B,KAAKqkB,SAAW4Y,EAAIpB,EAAIoB,EAAItB,EAG3ChB,EAAU36B,KAAKy6B,QAAQ2C,EAAeF,GAAUC,EAUpD,IARIn9B,KAAK86B,qBACPH,EAAU,EAAIA,GAOA,IAAZA,EACF36B,KAAK0B,MAAQ1B,KAAK2D,QACb,IAAgB,IAAZg3B,EACT36B,KAAK0B,MAAQ1B,KAAK0D,QACb,CACL,GAAM25B,GAAar9B,KAAKs9B,gBAAgB3C,GAIlC4C,EAAe95B,KAAK+5B,OAAOH,EAAar9B,KAAK2D,KAAO3D,KAAKikB,MAAQjkB,KAAKikB,KAAOjkB,KAAK2D,GAGxF3D,MAAK0B,MAAQ1B,KAAKy6B,OAAO8C,EAAcv9B,KAAK2D,IAAK3D,KAAK0D,QAKlDsgB,EAAVjjB,UAAAq1B,4BACIp2B,KAAK65B,8BAA8B75B,KAAK0B,OACxC1B,KAAKkM,OAAOnK,KAAK/B,KAAKgJ,uBAIhBgb,EAAVjjB,UAAAg7B,2BACI/7B,KAAKskB,MAAMviB,KAAK/B,KAAKgJ,uBAIfgb,EAAVjjB,UAAAw6B,sCACI,GAAKv7B,KAAKmkB,cAAiBnkB,KAAK45B,kBAIhC,GAAyB,QAArB55B,KAAKmkB,aAAwB,CAC/B,GAAIsZ,GAAYz9B,KAAKqkB,SAAWrkB,KAAK45B,kBAAkBjvB,OAAS3K,KAAK45B,kBAAkBxZ,MACnFsd,EAAgBD,EAAYz9B,KAAKikB,MAAQjkB,KAAK0D,IAAM1D,KAAK2D,KACzDg6B,EAAel6B,KAAKgc,KAhnBG,GAgnB6Bie,GACpDE,EAAgBD,EAAe39B,KAAKikB,IACxCjkB,MAAK25B,qBAAuBiE,EAAgBH,MAE5Cz9B,MAAK25B,qBAAuB35B,KAAKmkB,aAAenkB,KAAKikB,MAAQjkB,KAAK0D,IAAM1D,KAAK2D,MAKzEqgB,EAAVjjB,UAAAiI,mBAAA,SAA6BtH,OAA7B,KAAAA,IAA6BA,EAAQ1B,KAAK0B,MACtC,IAAIoI,GAAQ,GAAIgvB,GAKhB,OAHAhvB,GAAMkrB,OAASh1B,KACf8J,EAAMpI,MAAQA,EAEPoI,GAIDka,EAAVjjB,UAAAg5B,qBAAA,SAA+Br4B,GAC3B,QAASA,GAAS,GAAK1B,KAAK2D,MAAQ3D,KAAK0D,IAAM1D,KAAK2D,MAI9CqgB,EAAVjjB,UAAAu8B,gBAAA,SAA0BjG,GACtB,MAAOr3B,MAAK2D,IAAM0zB,GAAcr3B,KAAK0D,IAAM1D,KAAK2D,MAI1CqgB,EAAVjjB,UAAA05B,OAAA,SAAiB/4B,EAAeiC,EAASD,GACrC,WADJ,KAAAC,IAAgCA,EAAhC,OAAA,KAAAD,IAAyCA,EAAzC,GACWD,KAAKC,IAAIC,EAAKF,KAAKE,IAAIjC,EAAOgC,KAQ/BsgB,EAAVjjB,UAAAu6B,gCACI,MAAOt7B,MAAKukB,eAAiBvkB,KAAKukB,eAAe3hB,cAAci7B,wBAA0B,MAOnF7Z,EAAVjjB,UAAAu5B,6BACIt6B,KAAK0E,YAAY9B,cAAcH,SAIzBuhB,EAAVjjB,UAAAy5B,4BACIx6B,KAAK0E,YAAY9B,cAAc23B,QAOjCvW,EAAFjjB,UAAAu1B,WAAE,SAAW50B,GACT1B,KAAK0B,MAAQA,GAQfsiB,EAAFjjB,UAAAw1B,iBAAE,SAAiBC,GACfx2B,KAAK65B,8BAAgCrD,GAQvCxS,EAAFjjB,UAAA01B,kBAAE,SAAkBD,GAChBx2B,KAAKu1B,UAAYiB,GAQnBxS,EAAFjjB,UAAA21B,iBAAE,SAAiBC,GACf32B,KAAKoC,SAAWu0B,kBA5pBpBzxB,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACE8F,SAAU,YACVyH,WAAFimB,IACE9yB,MACF+3B,UAAA,aACMC,SAAN,YACInvB,UAAW,mBACXovB,YAAJ,qBACIC,UAAW,aACXvM,eAAJ,kBACIwM,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACIp4B,MAAJ,aACIuM,KAAJ,SACI8rB,aAAJ,WACI7vB,uBAAJ,WACI8vB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACI1G,kCAAJ,uCAEAlzB,SAAA,ipBACAC,QAAA;o+OACEC,QAAF,WAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFA5G3CZ,KAAE+H,EAAAA,oBAlBF/H,KAAQkB,EAAAA,eAARC,aAAAnB,KAAAoB,EAAAA,aAgBApB,SAAE4J,GAAFzI,aAAAnB,KAAA+J,EAAAA,UAAA7J,MAAA,gBAfAF,SAAQ4J,GAARzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA2e,EAAAA,4BAqbAC,EAAAzd,6DAjTA5C,MAAAuB,KAAAuB,EAAAA,QAQAwd,OAAA/e,KAAAuB,EAAAA,QAYAyd,aAAAhf,KAAAuB,EAAAA,QAiBA0d,eAAAjf,KAAAuB,EAAAA,QAeA/E,QAAAwD,KAAAuB,EAAAA,QASA2d,cAAAlf,KAAAuB,EAAAA,QAcA4d,WAAAnf,KAAAuB,EAAAA,QAgCAyF,SAAAhH,KAAAyB,EAAAA,SAGA2d,QAAApf,KAAAyB,EAAAA,SAQA4d,iBAAArf,KAAAsB,EAAAA,UAAApB,MAAA,oBAsKA4e,mCCzaA,sBAeA9e,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUC,EAAAA,aAAcC,IACxBI,SAAUuU,GAAW3U,IACrBQ,cAAemU,IACfpR,YAAaC,QAAS2R,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFjlB,GAAAG,IACsBA,MAAtB8kB,YAAsBA,EAlBtB9kB,KAAA+kB,gBAAqC,GAAIlZ,GAAAA,QAGzC7L,KAAAglB,aAAkC,GAAInZ,GAAAA,QAGtC7L,KAAAilB,UAA+B,GAAIpZ,GAAAA,QASnC7L,KAAAklB,oBAA+B,EAI3BllB,KAAK6kB,kBAAoBA,EAEzB7kB,KAAKmlB,WAAWtkB,UAAU,WAAM,MAAAhB,GAAKulB,YACrCP,EAAkBQ,QAAQxkB,UAAU,WAAM,MAAAhB,GAAKylB,mBAvDnD,MA2DEV,GAAF7jB,UAAAqkB,QAAE,WACOplB,KAAK+kB,gBAAgBQ,QACxBvlB,KAAK6kB,kBAAkBW,OAEzBC,aAAazlB,KAAK0lB,qBAIpBd,EAAF7jB,UAAA4kB,kBAAE,WACO3lB,KAAKilB,UAAUM,SAClBvlB,KAAKklB,oBAAqB,EAC1BllB,KAAKilB,UAAUrY,OACf5M,KAAKilB,UAAUpY,aAUnB+X,EAAF7jB,UAAA6kB,gBAAE,WACE5lB,KAAK2lB,qBAIPf,EAAF7jB,UAAA8kB,cAAE,SAAcC,GAAd,GAAFjmB,GAAAG,IACIA,MAAK0lB,mBAAqBK,WAAW,WAAM,MAAAlmB,GAAKulB,WAAWU,IAI7DlB,EAAF7jB,UAAAilB,MAAE,WACOhmB,KAAKglB,aAAaO,SACrBvlB,KAAKglB,aAAapY,OAClB5M,KAAKglB,aAAanY,aAKd+X,EAAV7jB,UAAAukB,0BACItlB,KAAK8kB,YAAYmB,UAEZjmB,KAAKilB,UAAUM,QAClBvlB,KAAKilB,UAAUpY,WAGjB7M,KAAK+kB,gBAAgBnY,MAAMsZ,kBAAmBlmB,KAAKklB,qBACnDllB,KAAK+kB,gBAAgBlY,WACrB7M,KAAKklB,oBAAqB,GAI5BN,EAAF7jB,UAAAolB,eAAE,WACE,MAAOnmB,MAAK+kB,gBAAgBqB,gBAI9BxB,EAAF7jB,UAAAslB,YAAE,WACE,MAAOrmB,MAAK6kB,kBAAkByB,UAIhC1B,EAAF7jB,UAAAokB,SAAE,WACE,MAAOnlB,MAAKilB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAI5G,GAAAA,eAAoB,mBAW1D6G,GAAA,wBAEAxmB,KAAAymB,WAAoC,YAGpCzmB,KAAA0mB,oBAAiC,GAMjC1mB,KAAA8lB,SAAsB,EAStB9lB,KAAAmT,KAAoB,KAGpBnT,KAAA2mB,mBAAuD,SAGvD3mB,KAAA4mB,iBAAmD,SAlDnD,MAAAJ,MCkBaK,IAKXC,YAAa5P,EAAAA,QAAQ,eACnBG,EAAAA,WAAW,UACThU,EAAAA,OAAO0jB,QAAS,MAChBzP,EAAAA,QAAW0P,GAAmBC,QAApC,IAA+CC,GAAgBC,oBAK7DC,cAAelQ,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,8BAA+B9T,EAAAA,OAAOC,UAAW,oBACvD+T,EAAAA,WAAW,6DACTC,EAAAA,QAAW0P,GAAmBK,QADpC,IAC+CH,GAAgBI,qBAC3DjQ,EAAAA,WAAW,8CACTC,EAAAA,QAAW0P,GAAmBO,SADpC,IACgDL,GAAgBM,sCCD9D,QAAFC,GACWC,EACqBvU,GADrBnT,KAAX0nB,YAAWA,EAEP1nB,KAAKmT,KAAOA,EADhB,MAKEsU,GAAF1mB,UAAA4mB,OAAE,WACE3nB,KAAK0nB,YAAY/B,qBAInBnkB,OAAFC,eAAMgmB,EAAN1mB,UAAA,iBAAE,WACE,QAASf,KAAKmT,KAAKwU,uDA9BvBziB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iJACVC,QAAF,+VACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEqT,YAAa0N,GAAfC,aACE/gB,MACF6hB,iBAAA,GACM5hB,MAAN,+HAWAyhB,oBC+BE,QAAFI,GACYnc,EACAhH,EACAvD,EAED2mB,GALT,GAAFjoB,GAOIsH,EAPJC,KAAApH,OAAAA,WACYH,GAAZ6L,QAAYA,EACA7L,EAAZ6E,YAAYA,EACA7E,EAAZsB,mBAAYA,EAEDtB,EAAXioB,eAAWA,EAnBXjoB,EAAAkZ,YAAuB,EAMvBlZ,EAAAwlB,QAAmC,GAAIxZ,GAAAA,QAGvChM,EAAAymB,SAAoC,GAAIza,GAAAA,QAGxChM,EAAAkoB,gBAAoB,SATpB,MAL0C3f,GAA1Cyf,EAAA1gB,GA2BE0gB,EAAF9mB,UAAAinB,sBAAE,SAAyBC,GAGvB,MAFAjoB,MAAKkoB,qBACLloB,KAAKmoB,wBACEnoB,KAAKooB,cAAcJ,sBAAsBC,IAIlDJ,EAAF9mB,UAAAsnB,qBAAE,SAAwBJ,GAGtB,MAFAjoB,MAAKkoB,qBACLloB,KAAKmoB,wBACEnoB,KAAKooB,cAAcC,qBAAqBJ,IAIjDJ,EAAF9mB,UAAAunB,eAAE,SAAexe,GACN,GAAA8Y,GAAX9Y,EAAA8Y,UAAsBF,EAAtB5Y,EAAA4Y,OAMI,KAJiB,SAAZA,GAAoC,SAAdE,GAAyBF,EAAQ6F,WAAW,YACrEvoB,KAAKwoB,gBAGH9F,EAAQ6F,WAAW,WAAY,CAGjC,GAAME,GAAUzoB,KAAKsmB,QAErBtmB,MAAK0L,QAAQgd,IAAI,WACfD,EAAQ7b,OACR6b,EAAQ5b,eAMdgb,EAAF9mB,UAAA4nB,MAAE,WACO3oB,KAAK+Y,aACR/Y,KAAK+nB,gBAAkB,WAAW/nB,KAAK8nB,eAAelB,iBACtD5mB,KAAKmB,mBAAmBynB,kBAK5Bf,EAAF9mB,UAAAykB,KAAE,WAEE,MADAxlB,MAAK+nB,gBAAkB,UAAU/nB,KAAK8nB,eAAelB,iBAC9C5mB,KAAKqlB,SAIdwC,EAAF9mB,UAAAC,YAAE,WACEhB,KAAK+Y,YAAa,EAClB/Y,KAAKwoB,iBAOCX,EAAV9mB,UAAAynB,mCACIxoB,MAAK0L,QAAQmd,iBAAiBzC,eAAeha,KAAK0I,EAAAA,KAAK,IAAIjU,UAAU,WACnEhB,EAAKwlB,QAAQzY,OACb/M,EAAKwlB,QAAQxY,cAKTgb,EAAV9mB,UAAAonB,iCACI,GAAMpc,GAAuB/L,KAAK0E,YAAY9B,cACxCkmB,EAAe9oB,KAAK8nB,eAAeiB,UAErCD,KACEE,MAAMC,QAAQH,GAEhBA,EAAa1f,QAAQ,SAAA8f,GAAY,MAAAnd,GAAQvD,UAAUG,IAAIugB,KAEvDnd,EAAQvD,UAAUG,IAAImgB,IAIqB,WAA3C9oB,KAAK8nB,eAAenB,oBACtB5a,EAAQvD,UAAUG,IAAI,wBAGqB,QAAzC3I,KAAK8nB,eAAelB,kBACtB7a,EAAQvD,UAAUG,IAAI,sBAKlBkf,EAAV9mB,UAAAmnB,8BACI,GAAIloB,KAAKooB,cAAcvG,cACrB,KAAMsH,OAAM,4FApIlBjkB,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,8CACVC,QAAF,opBACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwT,YAAF0N,GAAAO,eACErhB,MACFwM,KAAc,QACRvM,MAAN,0BACIojB,WAAJ,kBACIC,gBAAJ,sGAzBAnkB,KAAE+H,EAAAA,oBAFF/H,KAAEshB,MAUFqB,EAAAthB,6EA2BAshB,mDCzDA,sBAkBA3iB,KAACgK,EAAAA,SAAD9J,OACE+J,SACEma,EAAAA,cACAha,EAAAA,aACAF,EAAAA,aACAwK,GACAvK,IAEFI,SAAUoY,GAAsBxY,IAChCQ,cAAegY,GAAsBJ,IACrC8B,iBAAkB1B,GAAsBJ,QA5B1C+B,KCgCaC,GACT,GAAI9J,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAAS6J,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCjqB,KAAd4pB,SAAcA,EACA5pB,KAAd6pB,MAAcA,EACA7pB,KAAd8pB,UAAcA,EACA9pB,KAAd+pB,oBAAcA,EACwB/pB,KAAtCgqB,gBAAsCA,EACehqB,KAArDiqB,eAAqDA,EAtBrDjqB,KAAAkqB,wBAAgE,KArDhE,MAwDE1oB,QAAFC,eAAMkoB,EAAN5oB,UAAA,0BAAE,WACE,GAAMopB,GAASnqB,KAAKgqB,eACpB,OAAOG,GAASA,EAAOC,mBAAqBpqB,KAAKkqB,6BAGnD,SAAuBxoB,GACjB1B,KAAKgqB,gBACPhqB,KAAKgqB,gBAAgBI,mBAAqB1oB,EAE1C1B,KAAKkqB,wBAA0BxoB,mCAmBnCioB,EAAF5oB,UAAAspB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAOvqB,MAAKwqB,QAAQF,EAAWC,IAUjCZ,EAAF5oB,UAAA0pB,iBAAE,SAAiBnlB,EAA4BilB,GAE3C,MAAOvqB,MAAKwqB,QAAQllB,EAAUilB,IAShCZ,EAAF5oB,UAAA2pB,KAAE,SAAKC,EAAiBhD,EAAqB4C,OAA7C,KAAA5C,IAAwBA,EAAxB,GAEI,IAAMiD,GAAVC,MAAwB7qB,KAAKiqB,eAAmBM,EAO5C,OAHAK,GAAQzX,MAAQwX,QAApBA,EAA6BhD,OAA7BA,GACIiD,EAAQlE,oBAAsBiE,EAEvB3qB,KAAKqqB,kBAAkB5C,GAAgBmD,IAMhDjB,EAAF5oB,UAAAqkB,QAAE,WACMplB,KAAKoqB,oBACPpqB,KAAKoqB,mBAAmBhF,WAOpBuE,EAAV5oB,UAAA+pB,yBAAA,SAAmCC,EACAR,GAE/B,GAAMS,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBhrB,KAAK8pB,UAAW,GAAIqB,WACrE3E,GAAmB+D,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBxD,GAAsB0C,EAAOlK,iBAAkB4K,GACjEK,EAAmDP,EAAWjJ,OAAOsJ,EAE3E,OADAE,GAAaC,SAASzD,eAAiByC,EAChCe,EAAaC,UAMd5B,EAAV5oB,UAAAypB,QAAA,SAAqBgB,EAA4CC,GAG7D,GAAMlB,GAAVM,MAAuB,GAAIrE,IAAwBxmB,KAAKiqB,eAAmBwB,GACjEV,EAAa/qB,KAAK0rB,eAAenB,GACjCoB,EAAY3rB,KAAK8qB,yBAAyBC,EAAYR,GACtD7C,EAAc,GAAI9C,IAAyC+G,EAAWZ,EAE5E,IAAIS,YAAmB9T,GAAAA,YAAa,CAClC,GAAMuQ,GAAS,GAAIlH,GAAAA,eAAeyK,EAAO,MACvCI,UAAWrB,EAAOpX,KAClBuU,YAARA,GAGMA,GAAY6D,SAAWI,EAAUtD,qBAAqBJ,OACjD,CACL,GAAMgD,GAAWjrB,KAAK6rB,gBAAgBtB,EAAQ7C,GACxCO,EAAS,GAAIoD,GAAAA,gBAAgBG,MAAS1c,GAAWmc,GACjDa,EAAaH,EAAU3D,sBAAyBC,EAGtDP,GAAY6D,SAAWO,EAAWP,SAkBpC,MAZAvrB,MAAK+pB,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAAS7f,KACpDC,EAAAA,UAAU0e,EAAWmB,cAAc9f,KAAK0I,EAAAA,KAAK,MAC7CjU,UAAU,SAAAsW,GACNA,EAAMgV,QACRpB,EAAWqB,eAAe5jB,UAAUG,IAAI,yBAExCoiB,EAAWqB,eAAe5jB,UAAUC,OAAO,2BAI/CzI,KAAKqsB,iBAAiB3E,EAAa6C,GACnCvqB,KAAKoqB,mBAAqB1C,EACnB1nB,KAAKoqB,oBAINT,EAAV5oB,UAAAsrB,iBAAA,SAA2B3E,EAAkC6C,aAEzD7C,GAAYvB,iBAAiBtlB,UAAU,WAEjChB,EAAKuqB,oBAAsB1C,IAC7B7nB,EAAKuqB,mBAAqB,QAI1BpqB,KAAKoqB,oBAGPpqB,KAAKoqB,mBAAmBjE,iBAAiBtlB,UAAU,WACjD6mB,EAAY7C,kBAAkB8D,UAEhC3oB,KAAKoqB,mBAAmBhF,WAGxBsC,EAAY7C,kBAAkB8D,QAI5B4B,EAAOzE,UAAYyE,EAAOzE,SAAW,GACvC4B,EAAYrB,cAAcxlB,UAAU,WAAM,MAAA6mB,GAAY7B,cAAc0E,EAAe,YAGjFA,EAAO7D,qBACT1mB,KAAK6pB,MAAMyC,SAAS/B,EAAO7D,oBAAqB6D,EAAO9D,aAQnDkD,EAAV5oB,UAAA2qB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,aAC1BD,GAAcvP,UAAYuN,EAAOvN,SAEjC,IAAIyP,GAAmBzsB,KAAK4pB,SAASvgB,WAAWqjB,SAE1CC,EAA6B,QAArBpC,EAAOvN,UACf4P,EAC0B,SAA9BrC,EAAO5D,oBACwB,UAA9B4D,EAAO5D,qBAAmCgG,GACZ,QAA9BpC,EAAO5D,oBAAgCgG,EACpCE,GAAWD,GAAwC,WAA9BrC,EAAO5D,kBAgBlC,OAfIiG,GACFH,EAAiBtM,KAAK,KACb0M,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BxC,EAAO3D,iBACT6F,EAAiBO,IAAI,KAErBP,EAAiBQ,OAAO,KAG1BV,EAAcE,iBAAmBA,EAC1BzsB,KAAK4pB,SAASsD,OAAOX,IAQtB5C,EAAV5oB,UAAA8qB,gBACA,SAAMtB,EACA7C,GAEF,GAAMsD,GAAeT,GAAUA,EAAOlK,kBAAoBkK,EAAOlK,iBAAiB4K,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBhrB,KAAK8pB,UAAW,GAAIqB,WAC3DvG,GAAgB8C,IAChBnB,GAAoBgE,EAAOpX,yBAhOlCjO,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY4J,2CApCzBtkB,KAAQkoB,EAAAA,UAFRloB,KAAQmoB,EAAAA,gBAURnoB,KAAEooB,EAAAA,WATFpoB,KAAQqoB,EAAAA,qBAsCRroB,KAAaykB,EAAbtjB,aAAAnB,KA2BOoB,EAAAA,WA3BPpB,KA2BmBsoB,EAAAA,aAjDnBtoB,KAA4BshB,GAA5BngB,aAAAnB,KAkDO6J,EAAAA,OAlDP3J,MAkDcqkB,uOA3EdE,KCmDA8D,GAAA,yBAnDA,MAAAA,MAoDaC,GAAoBC,EAAiBtgB,EAAcogB,qFAWhE5tB,GAAA+tB,UAAc,GAAIC,KAGlBhuB,EAAAiuB,cAA2B,GAAIjiB,GAAAA,QAS/BhM,EAAAkuB,MAAiD,MAWjDluB,EAAAmuB,WAAsC,GAYtCnuB,EAAAue,WAAqE,GAAIrW,GAAAA,eAlGzE,MA4D6BK,GAA7B6lB,EAAA9mB,GAmBA3F,OAAAC,eAAMwsB,EAANltB,UAAA,iBAAA,WAAmC,MAAOf,MAAKguB,gBAC7C,SAAchR,GACZ,GAAIrM,EAAAA,aAAeqM,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMkR,IAA6BlR,EAErChd,MAAKguB,WAAahR,mCAStBxb,OAAAC,eAAMwsB,EAANltB,UAAA,oBAAA,WAAgC,MAAOf,MAAKmuB,mBAC1C,SAAiB3qB,GAAcxD,KAAKmuB,cAAgB9lB,EAAAA,sBAAsB7E,oCAU1EyqB,EAAFltB,UAAAqtB,SAAE,SAASC,GACP,IAAKA,EAASC,GACZ,KAAMC,KAGR,IAAIvuB,KAAK4tB,UAAUY,IAAIH,EAASC,IAC9B,KAAMG,IAAgCJ,EAASC,GAEjDtuB,MAAK4tB,UAAUc,IAAIL,EAASC,GAAID,IAOlCJ,EAAFltB,UAAA4tB,WAAE,SAAWN,GACTruB,KAAK4tB,UAAUgB,OAAOP,EAASC,KAIjCL,EAAFltB,UAAAgc,KAAE,SAAKsR,GACCruB,KAAK0M,QAAU2hB,EAASC,IAC1BtuB,KAAK0M,OAAS2hB,EAASC,GACvBtuB,KAAKgd,UAAYqR,EAASN,MAAQM,EAASN,MAAQ/tB,KAAK+tB,OAExD/tB,KAAKgd,UAAYhd,KAAK6uB,qBAAqBR,GAG7CruB,KAAKoe,WAAWrc,MAAM2K,OAAQ1M,KAAK0M,OAAQsQ,UAAWhd,KAAKgd,aAI7DiR,EAAFltB,UAAA8tB,qBAAE,SAAqBR,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMS,GAAwC,MAAzBT,EAASS,aAAuBT,EAASS,aAAe9uB,KAAK8uB,aAC9EC,EAAqBC,GAAsBX,EAASN,OAAS/tB,KAAK+tB,MAAOe,GAGzEG,EAAqBF,EAAmBhR,QAAQ/d,KAAKgd,WAAa,CAEtE,OADIiS,IAAsBF,EAAmBvsB,SAAUysB,EAAqB,GACrEF,EAAmBE,IAG5BhB,EAAFltB,UAAA+f,SAAE,WACE9gB,KAAKkvB,oBAGPjB,EAAFltB,UAAA6f,YAAE,WACE5gB,KAAK8tB,cAAclhB,QAGrBqhB,EAAFltB,UAAAC,YAAE,WACEhB,KAAK8tB,cAAcjhB,2BAvGvB3H,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,YACV8F,SAAU,UACV3F,QAAS,mDAWXkH,SAAAxH,KAAGuB,EAAAA,MAAHrB,MAAS,mBAMT2oB,QAAA7oB,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGT4X,YAAA9X,KAAGuB,EAAAA,MAAHrB,MAAS,sBAcT0pB,eAAA5pB,KAAGuB,EAAAA,MAAHrB,MAAS,yBAMTgZ,aAAAlZ,KAAGyB,EAAAA,OAAHvB,MAAU,oBAlGV6oB,GA4D6BP,IC1CvByB,GAA4BnI,GAAmBO,SAAW,IAC9BL,GAAgBC,eAGrCiI,IASXC,UAAWnY,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmB9T,EAAAA,OAAOC,UAAW,qBAE3C6T,EAAAA,MAAM,oBAAqB9T,EAAAA,OAAOC,UAAW,sBAC7C+T,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ6X,OAInDG,YAAapY,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmB9T,EAAAA,OAAOC,UAAW,oBAC3C6T,EAAAA,MAAM,oBAAqB9T,EAAAA,OAAOC,UAAW,mBAC7C+T,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ6X,OAInDI,aAAcrY,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmB9T,EAAAA,OAAOC,UAAW,mBAC3C6T,EAAAA,MAAM,oBAAqB9T,EAAAA,OAAOC,UAAW,oBAC7C+T,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ6X,OAInDK,aAActY,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyC9T,EAAAA,OAAO0jB,QAAS,KAC/D5P,EAAAA,MAAM,kCAAmC9T,EAAAA,OAAO0jB,QAAS,OACzD5P,EAAAA,MAAM,sEACF9T,EAAAA,OAAO0jB,QAAS,KAEpB1P,EAAAA,WAAW,8CAA+CC,EAAAA,QAAQ,QAClED,EAAAA,WAAW,UAAWC,EAAAA,QAAQ6X,OAUhCM,cAAevY,EAAAA,QAAQ,iBAErBG,EAAAA,WAAW,yCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCrsB,EAAAA,OAAOC,UAAW,qBAClBD,EAAAA,OAAOC,UAAW,sBAGxB+T,EAAAA,WAAW,yCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCrsB,EAAAA,OAAOC,UAAW,kBAClBD,EAAAA,OAAOC,UAAW,wBAGxB+T,EAAAA,WAAW,uCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCrsB,EAAAA,OAAOC,UAAW,oBAClBD,EAAAA,OAAOC,UAAW,sBAGxB+T,EAAAA,WAAW,uCACPC,EAAAA,QAAQ6X,GAA2BO,EAAAA,WACjCrsB,EAAAA,OAAOC,UAAW,kBAClBD,EAAAA,OAAOC,UAAW,yBAExB6T,EAAAA,MAAM,yEACF9T,EAAAA,OAAOC,UAAW,mBACtB6T,EAAAA,MAAM,qCACF9T,EAAAA,OAAOC,UAAW,sBACtB6T,EAAAA,MAAM,kCACF9T,EAAAA,OAAOC,UAAW,uBAIxBqsB,cAAezY,EAAAA,QAAQ,iBACrBG,EAAAA,WAAW,WACTuY,EAAAA,MAAM,KAAMC,EAAAA,gBAAiB9Y,UAAU,oCCrF7C/W,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAA8vB,gBAAoB,SAACxB,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeAppB,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY,8GAfzBmQ,KAkCaC,IAEXnd,QAASkd,GACTE,OAAQ,GAAI3pB,GAAAA,SAAY,GAAIknB,GAAAA,SAAYuC,KACxCG,WAAYC,ICPdC,GAAA,yBA/BA,MAAAA,MAgCaC,GAA0BhjB,EAAc+iB,mBAoGnD,QAAFE,GAAqBC,EACPC,EACmBvS,EACAwS,GAH/B,GAAF5wB,GAKIsH,EALJC,KAAApH,OAAAA,IAOI,IAPiBH,EAArB0wB,MAAqBA,EAEY1wB,EAAjCoe,MAAiCA,EACApe,EAAjC4wB,cAAiCA,EAtCjC5wB,EAAA6wB,oBAAgC,EAUhC7wB,EAAA8wB,gBAAmC,GAKnC9wB,EAAA+wB,4BAA+B,EAS/B/wB,EAAA4vB,cAA+C,SAkBtCxR,EACH,KAAM4S,YAGRhxB,GAAKixB,sBAAwBpwB,EAAAA,MAAMud,EAAMG,WAAYH,EAAM6P,cAAeyC,EAAM7mB,SAC3E7I,UAAU,WACLhB,EAAKkxB,aACPlxB,EAAKmxB,yBAIFnxB,EAAKkxB,aAAelxB,EAAKoxB,YAA0C,WAA5BpxB,EAAKoxB,WAAWvO,UAC1D7iB,EAAK+wB,4BAA6B,EAClC/wB,EAAKqxB,8BAA8BtO,UAAW,SAAUF,QAAS7iB,EAAK8wB,mBAGxEH,EAAkBpvB,mBA5B5B,MAtCmCgH,GAAnCkoB,EAAAnpB,GAuCA3F,OAAAC,eAAM6uB,EAANvvB,UAAA,oBAAA,WAAgC,MAAOf,MAAKmuB,mBAC1C,SAAiB3qB,GAAKxD,KAAKmuB,cAAgB9lB,EAAAA,sBAAsB7E,oCA8BjE8sB,EAAFvvB,UAAA+f,SAAE,YACO9gB,KAAKsuB,IAAMtuB,KAAKywB,gBACnBzwB,KAAKsuB,GAAKtuB,KAAKywB,cAAc9Y,MAI/B3X,KAAKgxB,wBACLhxB,KAAKkxB,8BACAxO,QAAS1iB,KAAK+wB,YAAc,SAAW/wB,KAAK2wB,kBAEjD3wB,KAAKie,MAAMmQ,SAASpuB,OAGtBswB,EAAFvvB,UAAAC,YAAE,WACEhB,KAAKie,MAAM0Q,WAAW3uB,MACtBA,KAAK8wB,sBAAsB7vB,eAO7BqvB,EAAFvvB,UAAAowB,yBAAE,SAAyBC,GAEnBpxB,KAAKqxB,eAAiBD,IAE1BpxB,KAAK0wB,mBAAqBU,EAErBpxB,KAAK+wB,cACR/wB,KAAKgxB,wBACDhxB,KAAK0wB,mBACP1wB,KAAKkxB,8BAA8BtO,UAAW5iB,KAAK2wB,gBAAiBjO,QAAS,SAE7E1iB,KAAKkxB,8BAA8BtO,UAAW,OAAQF,QAAS1iB,KAAK2wB,qBAU1EL,EAAFvvB,UAAAmwB,6BAAE,SAA6BI,GAC3BtxB,KAAKixB,WAAaK,EAIdtxB,KAAK4wB,6BACP5wB,KAAKixB,YAAcvO,QAAS4O,EAAU5O,WAK1C4N,EAAFvvB,UAAAgK,aAAE,WACE,IAAI/K,KAAKqxB,cAAT,CAEArxB,KAAKie,MAAMlB,KAAK/c,MAGgB,SAA5BA,KAAKixB,WAAWvO,SAAkD,WAA5B1iB,KAAKixB,WAAWvO,UACxD1iB,KAAK4wB,4BAA6B,EAKpC,IAAMU,GAAsCtxB,KAAK+wB,aAC5CnO,UAAW5iB,KAAK2wB,gBAAiBjO,QAAS,WAC1CE,UAAW,SAAUF,QAAS1iB,KAAK2wB,gBACxC3wB,MAAKkxB,6BAA6BI,GAElCtxB,KAAK0wB,oBAAqB,IAI5BJ,EAAFvvB,UAAAgwB,UAAE,WACE,MAAO/wB,MAAKie,MAAMvR,QAAU1M,KAAKsuB,KACH,QAAzBtuB,KAAKie,MAAMjB,WAAgD,SAAzBhd,KAAKie,MAAMjB,YAIpDsT,EAAFvvB,UAAAwwB,wBAAE,WACE,OAAUvxB,KAAK+wB,YAAc,UAAY,IAAK/wB,KAAK2wB,iBAIrDL,EAAFvvB,UAAAywB,mBAAE,WACE,GAAM5O,GAAY5iB,KAAKixB,WAAWrO,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAM5iB,KAAKixB,WAAWvO,SAajE4N,EAAFvvB,UAAAiwB,sBAAE,WACEhxB,KAAK2wB,gBAAkB3wB,KAAK+wB,YACxB/wB,KAAKie,MAAMjB,UACVhd,KAAK+tB,OAAS/tB,KAAKie,MAAM8P,OAGhCuC,EAAFvvB,UAAAswB,YAAE,WACE,MAAOrxB,MAAKie,MAAM7b,UAAYpC,KAAKoC,UASrCkuB,EAAFvvB,UAAA0wB,sBAAE,WACE,MAAKzxB,MAAK+wB,YAEqB,OAAxB/wB,KAAKie,MAAMjB,UAAqB,YAAc,aAFrB,qBAtNpC9X,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACE8F,SAAU,gBACV7F,SAAU,qiCACVC,QAAF,guCACEQ,MACF6I,UAAA,iBACM8iB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEArsB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACEN,QAAF,YACE2T,YACFiW,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBK,cAClBL,GAAkBO,4FA1DtBzqB,KAAQ+oB,GAAR5nB,aAAAnB,KAAAoB,EAAAA,aAdApB,KAAE0V,EAAAA,aAAFvU,aAAAnB,KAAAoB,EAAAA,cAHAgqB,EAAA/pB,4FA6GAwnB,QAAA7oB,KAAAuB,EAAAA,QAGAqoB,eAAA5pB,KAAAuB,EAAAA,SAMA6pB,mCC/HA,sBAeAprB,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUC,EAAAA,cACVK,SAAUwe,GAASqC,IACnBzgB,cAAeoe,GAASqC,IACxB1d,WAAYod,QAnBd+B,oBCeE,QAAFhY,GAAczU,GACd,MAAI6B,GAAJC,KAAApH,KAAUsF,IAAVtF,KAhBA,MAckCoI,GAAlC2R,EAAA5S,kBAHAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yDAJZH,KAAmBwS,EAAAA,eARnBqC,GAckCiY,EAAAA,yCCKlChyB,KAAA0J,QAAoC,GAAImC,GAAAA,QAGxC7L,KAAAiyB,cAA0B,WAtB1B,sBAaA/sB,KAACioB,EAAAA,WAAD/nB,OAAawa,WAAY,8GAbzB5F,mBjC6DE,QAAFpD,GACW2Z,EACC2B,EACAC,EACR3B,GAHOxwB,KAAXuwB,MAAWA,EACCvwB,KAAZkyB,cAAYA,EACAlyB,KAAZmyB,SAAYA,EAERD,EAAcE,QAAQD,EAASvvB,eAAe,GAC9C5C,KAAKqyB,kBAAoB9B,EAAM7mB,QAAQ7I,UAAU,WAAM,MAAA2vB,GAAkBpvB,iBAR7E,MAWEwV,GAAF7V,UAAAC,YAAE,WACEhB,KAAKqyB,kBAAkBpxB,cACvBjB,KAAKkyB,cAAcI,eAAetyB,KAAKmyB,SAASvvB,gBAIlDgU,EAAF7V,UAAAwxB,aAAE,WACE,MAAOvyB,MAAKwyB,gBAAiBzY,IAAe,KAAO/Z,KAAKwyB,OAI1D5b,EAAF7V,UAAA0xB,eAAE,WACE,MAAOzyB,MAAKwyB,gBAAiBzY,IAAe/Z,KAAKwyB,MAAQ,MAI3D5b,EAAF7V,UAAA2xB,gBAAE,WACE,MAAO1yB,MAAKmyB,SAASvvB,eAIvBgU,EAAF7V,UAAA4xB,gBAAE,WACE,OACE1wB,MAAOjC,KAAKiC,MACZyK,OAAQ1M,KAAK0M,OACbqK,SAAU/W,KAAK+W,WAInBH,EAAF7V,UAAA0B,MAAE,WACEzC,KAAK0yB,kBAAkBjwB,wBA3E3ByC,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU;k9CACVC,QAAF,4nBACEQ,MACFC,MAAA,kBACMuM,KAAN,OAEA9M,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAZAZ,KAAQ6N,EAAAA,aAbR7N,KAAQ+H,EAAAA,qBAGR2J,EAAArQ,8DA8BAsQ,gBAAA3R,KAAAuB,EAAAA,QAGAxE,QAAAiD,KAAGuB,EAAAA,QAGHqQ,WAAA5R,KAAAuB,EAAAA,QAGAiG,SAAAxH,KAAAuB,EAAAA,QAGAsQ,WAAA7R,KAAGuB,EAAAA,SAMHmQ,KC1CaI,IAKXC,yBAA0BC,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAY9T,EAAAA,OAAOC,UAAW,2BAA4B8T,WAAY,YAC5ED,EAAAA,MAAM,UAAW9T,EAAAA,OAAOC,UAAW,OAAQ8T,WAAY,aACvDD,EAAAA,MAAM,OAAQ9T,EAAAA,OAAOC,UAAW,0BAA2B8T,WAAY,YACvEC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BC,uBAAwBL,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAY9T,EAAAA,OAAOsH,OAAQ,MAAOyM,WAAY,YACpDD,EAAAA,MAAM,OAAQ9T,EAAAA,OAAOsH,OAAQ,MAAOyM,WAAY,YAChDD,EAAAA,MAAM,UAAW9T,EAAAA,OAAOsH,OAAQ,IAAKyM,WAAY,aACjDC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCJtC,QAAFE,GAAqBC,GAAAzX,KAArByX,YAAqBA,EA9BrB,sBAuBAvS,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,sEAhBZH,KAA0BwS,EAAAA,iCAoB1BC,OAAAzS,KAAGuB,EAAAA,MAAHrB,MAAS,qBA5BToS,oBCoDE,QAAFI,GAAoDC,EAClBC,GADhC,GAAFjY,GAEIsH,EAFJC,KAAApH,KAEU6X,IAFV7X,WACkCH,GAAlCiY,mBAAkCA,IAHlC,MAF6B1P,GAA7BwP,EAAAzQ,GAUEyQ,EAAF7W,UAAAgX,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqBlY,KAAK8X,mBAAmBC,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWpY,KAAKqY,WAE/D,OAAOH,IAAsBC,kBA3BjCjT,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,uDACVsN,YAAFC,QAAAyF,GAAAxF,YAAA8E,IACEnS,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,UACEvF,gBAAFC,EAAAA,wBAAAC,2KAbA8R,EAAArR,6DAmBAqR,cAlDAW,GAAA,SAAApR,gBA0EA,GAAAtH,GAAA,OAAAsH,GAAAA,EAAA4C,MAAA/J,KAAAwY,YAAAxY,qEAWA,mEAKAyY,EAAAzY,KAAA0Y,OAAAvW,WAAA,OAAA,OAaG,UAbHiH,QAAA,SAAAuO,GACA,GAAAgB,GAAAF,EAAAhM,KAAA,SAAAmM,GAAA,MAAAA,GAAAjB,OAAAA,GAEAgB,KACA9Y,EAAAgZ,eAAAlB,GAAAgB,EAAiClB,eAKjCzX,KAAA8Y,OAAApP,QAAA0C,KAAAC,EAAAA,UAAArM,KAAA+Y,aAAAlY,UAAA,WAAA,MAAAhB,GAAAmZ,iFAMAhZ,KAAAiI,cAAAlG,QAGAwW,EAAAlS,aACAnB,KAAAoJ,EAAAA,UAAAlJ,+IAjCAsT,SAAAxT,KAAAsO,EAAAA,gBAAepO,MAAfoS,MAGAvP,gBAAA/C,KAAAyB,EAAAA,UAMA4R,iBArFAU,GAAA,SAAA9R,gBAiIA,MAAA,QAAAA,GAAAA,EAAA4C,MAAA/J,KAAAwY,YAAAxY,KAHA,uHAdAsF,SAAA,ktCACEC,QAAF,8pDACEC,QAAF,iBACEO,MACFC,MAAe,yBACfkT,mBAAA,aACA3G,KAAA,WAEA4G,YAAanC,GAAbC,0BACArE,YAAAC,QAAA0F,GAAAzF,YAAAmG,IACAxT,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAmT,GACAV,IACAa,GAAA,SAAAjS,+CAoBA,kCAAAtH,gBACAuZ,EAAA/S,aAEAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qDACAC,SAAA,gyFArBAE,QAAA,iBACEO,MACFC,MAAA,uBACAkT,mBAAA,WACA3G,KAAA,WAEE4G,YAAFnC,GAAAO,wBACE3E,YAAFC,QAAA0F,GAAAzF,YAAAsG,IACA3T,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAsT,EAAAC,eAAA,WAAA,QACAnU,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAmCoB,EAAAA,aACnCpB,KAAA+H,EAAAA,uGClJA,MAsBoC7E,GAApCkR,EAAAnS,kBATAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yBACVU,MACE6I,UAAW,kBACX2K,SAAU,QAEZ/T,QAAS,QACToN,YAAaC,QAAS2G,EAAAA,WAAY1G,YAAayF,SApBjDe,GAsBoCG,EAAAA,2FAtBpC,MAkCwCrR,GAAxCsR,EAAAvS,kBATAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,6BACVU,MACE6I,UAAW,sBACX2K,SAAU,QAEZ/T,QAAS,QACToN,YAAaC,QAAS2G,EAAAA,WAAY1G,YAAayF,SAhCjDmB,GAkCwCC,EAAAA,gDClCxC,sBAuBAzU,KAACgK,EAAAA,SAAD9J,OACE+J,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACAsK,GACAC,EAAAA,iBACAC,GACAvK,IAEFE,SACEJ,GACA4J,GACAG,GACAxB,GACAmC,GACAxB,GACAe,GACAI,GACA9C,GACAY,IAEF3H,cACEoJ,GACAG,GACAxB,GACAmC,GACAxB,GACAe,GACAI,GACA9C,GACAY,IAEF5E,WAAYoH,GAAgB1B,QAxD9B2B,oBC6CE,QAAFC,GAAwB7G,EACAlS,EACAuD,EACS6N,EACYtP,GAJ3C,GAAFpD,GAKIsH,EALJC,KAAApH,KAKUqT,EAAUlS,EAAoBuD,EAAa6N,EAAMtP,IAL3DjD,WAAwBH,GAAxBwT,SAAwBA,EACAxT,EAAxBsB,mBAAwBA,EACAtB,EAAxB6E,YAAwBA,EAEqB7E,EAA7CoD,KAA6CA,EAX7CpD,EAAAsa,eAA6B,qBAnB7B,MAiBiC/R,GAAjC8R,EAAA/S,kBAZAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,8BACE8F,SAAU,WACV7F,SAAU8U,EAAAA,mBACV7U,QAAF,w4CACEQ,MACFC,MAAA,aAEAP,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,mGAlBAZ,KAAE6N,EAAAA,aAHF7N,SAAE4J,GAAFzI,aAAAnB,KAAA+J,EAAAA,UAAA7J,MAAA,YAEAF,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cAMA4T,8BCQE,QAAFG,GAA0C/U,GAAxC,GAAFzF,GACIsH,EADJC,KAAApH,KACUsF,IADVtF,WAA0CH,GAA1CyF,SAA0CA,IA3B1C,MAyBgC8C,GAAhCiS,EAAAlT,kBAJAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,eACVuN,YAAaC,QAASyH,EAAAA,WAAYxH,YAAauH,4CAfjDnV,KAAsCwS,EAAAA,eARtC2C,GAyBgCC,EAAAA,2BAiB9B,QAAFC,GAA0CjV,GAAxC,GAAFzF,GACIsH,EADJC,KAAApH,KACUsF,IADVtF,WAA0CH,GAA1CyF,SAA0CA,IA1C1C,MAwCsC8C,GAAtCmS,EAAApT,kBAJAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,qBACVuN,YAAaC,QAAS2H,EAAAA,iBAAkB1H,YAAayH,4CA9BvDrV,KAAsCwS,EAAAA,eARtC6C,GAwCsCC,EAAAA,iCAiBpC,QAAFC,GAA0CnV,GAAxC,GAAFzF,GACIsH,EADJC,KAAApH,KACUsF,IADVtF,WAA0CH,GAA1CyF,SAA0CA,IAzD1C,MAuDsC8C,GAAtCqS,EAAAtT,kBAJAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,qBACVuN,YAAaC,QAAS6H,EAAAA,iBAAkB5H,YAAa2H,4CA7CvDvV,KAAsCwS,EAAAA,eARtC+C,GAuDsCC,EAAAA,6FAvDtC,MAsEkCtS,GAAlCuS,EAAAxT,kBAJAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,iBACVuN,YAAaC,QAAS+H,EAAAA,aAAc9H,YAAa6H,0BAInDhD,OAAAzS,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGTyV,SAAA3V,KAAGuB,EAAAA,QAGHqU,YAAA5V,KAAGuB,EAAAA,SA9EHkU,GAsEkCC,EAAAA,6BAoBhC,QAAFG,GAAcC,EACAjW,GADZ,GAAFlF,GAEIsH,EAFJC,KAAApH,KAEUgb,EAAWjW,IAFrB/E,WAGI+E,GAAWnC,cAAc4F,UAAUG,IAAI,cAAcqS,EAAUC,wBA7FnE,MAyFmC7S,GAAnC2S,EAAA5T,kBAPAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uCACVU,MACEC,MAAS,kBACTuM,KAAQ,wDA1EZrN,KAAE0V,EAAAA,eAJF1V,KAAmB6N,EAAAA,cARnBgI,GAyFmCG,EAAAA,8BAiBjC,QAAFC,GAAcH,EACAjW,GADZ,GAAFlF,GAEIsH,EAFJC,KAAApH,KAEUgb,EAAWjW,IAFrB/E,WAGI+E,GAAWnC,cAAc4F,UAAUG,IAAI,cAAcqS,EAAUC,wBA7GnE,MAyGmC7S,GAAnC+S,EAAAhU,kBAPAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uCACVU,MACEC,MAAS,kBACTuM,KAAQ,oDA1FZrN,KAAE0V,EAAAA,eAJF1V,KAAmB6N,EAAAA,cARnBoI,GAyGmCC,EAAAA,8BAiBjC,QAAFC,GAAcL,EACAjW,GADZ,GAAFlF,GAEIsH,EAFJC,KAAApH,KAEUgb,EAAWjW,IAFrB/E,WAGI+E,GAAWnC,cAAc4F,UAAUG,IAAI,cAAcqS,EAAUC,wBA7HnE,MAyH6B7S,GAA7BiT,EAAAlU,kBAPAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yBACVU,MACEC,MAAS,WACTuM,KAAQ,oDA1GZrN,KAAE0V,EAAAA,eAJF1V,KAAmB6N,EAAAA,cARnBsI,GAyH6BC,EAAAA,wBCvF3B,QAAFC,GAAcjW,EAA4B+N,GAC1C,MAAIlM,GAAJC,KAAApH,KAAUsF,EAAU+N,IAApBrT,KAnCA,MAgCqCoI,GAArCmT,EAAApU,kBALAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,oBACVuN,YAAaC,QAAS2I,EAAAA,gBAAiB1I,YAAayI,IACpD/V,QAAS,2BAA4B,yEAlBvCN,KAAmBwS,EAAAA,cAAnBxS,KAAEoO,EAAAA,mBAZFiI,GAgCqCC,EAAAA,gCAkBnC,QAAFC,GAAcnW,EAA4B+N,GAC1C,MAAIlM,GAAJC,KAAApH,KAAUsF,EAAU+N,IAApBrT,KAnDA,MAgDqCoI,GAArCqT,EAAAtU,kBALAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,oBACVuN,YAAaC,QAAS6I,EAAAA,gBAAiB5I,YAAa2I,IACpDjW,QAAS,2BAA4B,yEAlCvCN,KAAmBwS,EAAAA,cAAnBxS,KAAEoO,EAAAA,mBAZFmI,GAgDqCC,EAAAA,gCAmBnC,QAAFC,GAAcrW,EAA4B+N,GAC1C,MAAIlM,GAAJC,KAAApH,KAAUsF,EAAU+N,IAApBrT,KApEA,MAiEkCoI,GAAlCuT,EAAAxU,kBALAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,cACVuN,YAAaC,QAAS+I,EAAAA,UAAW9I,YAAa6I,IAC9CnW,QAAS,4BAA6B,+DAnDxCN,KAAmBwS,EAAAA,cAAnBxS,KAAEoO,EAAAA,mBAZFqI,GAiEkCC,EAAAA,sFAoBlC,MACkCxT,GAAlCyT,EAAA1U,kBAbAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,qCACEC,SAAUwW,EAAAA,iBACV/V,MACFC,MAAA,iBACMuM,KAAN,OAEA3M,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACEwF,SAAF,eACEyH,YAAFC,QAAAkJ,EAAAA,aAAuCjJ,YAAvC+I,QAGAA,+CAiBA,MAAA,QAAA1U,GAAAA,EAAA4C,MAAA/J,KAAAwY,YAAAxY,KAHA,+HAVA+F,MACAC,MAAA,iBACAuM,KAAA,OAEE3M,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAwF,SAAU,eACVyH,YAAAC,QAAAmJ,EAAAA,aAAAlJ,YAAAmJ,QAGAA,GACAD,EAAAA,yFAaA,cAK4BE,EAA5B7V,uHAbAkM,KAAA,OAEE3M,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,SACAyH,YAAAC,QAAAsJ,EAAAA,OAAArJ,YAAAoJ,QAGAA,GACAC,EAAAA,QCnFMC,IAEJlC,GAGAK,GACAgB,GACAZ,GACAN,GACAsB,GACAlB,GACAgB,GAGAV,GACAM,GACAF,GAGAU,GACAK,GACAD,gCApDF,sBAuDA/W,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUkN,EAAAA,eAAgBjN,EAAAA,aAAcC,IACxCI,QAAS2M,GACTvM,aAAcuM,OA1DhBE,KC+BAC,GAAA,SAAApV,GA2IE,QAAFoV,GAAc1G,OAAd,KAAAA,IAAcA,KAAZ,IAAFhW,GACIsH,EADJC,KAAApH,OAAAA,WAtIAH,GAAA2c,YAAiC,GAAIzG,GAAAA,oBAGrClW,EAAA4c,QAA6B,GAAI1G,GAAAA,gBAAwB,IAMzDlW,EAAA6c,2BAA+BlV,EAAAA,aAAaC,MA2D5C5H,EAAA8c,oBAAM,SAACxJ,EAASyJ,GACZ,GAAMlb,GAAayR,EAAKyJ,EACxB,OAAOC,GAAAA,eAAenb,GAAS8Q,OAAO9Q,GAASA,GAYnD7B,EAAAid,SAAkD,SAAC3J,EAAW4J,GAC1D,GAAMrQ,GAASqQ,EAAKrQ,OACdsQ,EAAYD,EAAKC,SACvB,OAAKtQ,IAAuB,IAAbsQ,EAER7J,EAAK4J,KAAK,SAACE,EAAGC,GACnB,GAAIC,GAAStd,EAAK8c,oBAAoBM,EAAGvQ,GACrC0Q,EAASvd,EAAK8c,oBAAoBO,EAAGxQ,GAMrC2Q,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBd7J,GAsC7CtT,EAAAyd,gBAA4D,SAACnK,EAASlC,GAElE,GAAMsM,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAcrK,EAAKsK,IACvDC,EAAUlc,OAAOmc,KAAKxK,GAAMyK,OAAOL,EAAa,IAAIM,cAGpDC,EAAoB7M,EAAOO,OAAOqM,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvBje,EAAKoW,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtChW,EAAKme,8BA7KT,MA+B2C5V,GAA3CmU,EAAApV,GAyBE3F,OAAFC,eAAM8a,EAANxb,UAAA,YAAE,WAAa,MAAOf,MAAKiW,MAAMvU,WAC/B,SAASyR,GAAanT,KAAKiW,MAAMrJ,KAAKuG,oCAMtC3R,OAAFC,eAAM8a,EAANxb,UAAA,cAAE,WAAuB,MAAOf,MAAKyc,QAAQ/a,WAC3C,SAAWuP,GAAkBjR,KAAKyc,QAAQ7P,KAAKqE,oCAM/CzP,OAAFC,eAAM8a,EAANxb,UAAA,YAAE,WAA6B,MAAOf,MAAKie,WACzC,SAASlB,GACP/c,KAAKie,MAAQlB,EACb/c,KAAKge,6DAcPxc,OAAFC,eAAM8a,EAANxb,UAAA,iBAAE,WAAuC,MAAOf,MAAKke,gBACnD,SAAcC,GACZne,KAAKke,WAAaC,EAClBne,KAAKge,6DA2FPzB,EAAFxb,UAAAid,0BAAE,WAAA,GAAFne,GAAAG,KAOUoe,EAAoCpe,KAAKie,MAC3Cvd,EAAAA,MAAYV,KAAKie,MAAMG,WAAYpe,KAAKie,MAAMI,aAC9ClS,EAAAA,GAAa,MACXmS,EAAyCte,KAAKke,WAChDxd,EAAAA,MAAiBV,KAAKke,WAAWK,KAAMve,KAAKke,WAAWG,aACvDlS,EAAAA,GAAa,MAEXqS,EAAaxe,KAAKiW,MAElBwI,EAAeC,EAAAA,cAAcF,EAAYxe,KAAKyc,SACjDrQ,KAAKpC,EAAAA,IAAI,SAAC2U,GAAjB,GAAkBxL,GAAlBwL,EAAA,EAA4B,OAAA9e,GAAK+e,YAAYzL,MAEnC0L,EAAcH,EAAAA,cAAcD,EAAcL,GAC7ChS,KAAKpC,EAAAA,IAAI,SAAC2U,GAAjB,GAAkBxL,GAAlBwL,EAAA,EAA4B,OAAA9e,GAAKif,WAAW3L,MAElC4L,EAAgBL,EAAAA,cAAcG,EAAaP,GAC9ClS,KAAKpC,EAAAA,IAAI,SAAC2U,GAAjB,GAAkBxL,GAAlBwL,EAAA,EAA4B,OAAA9e,GAAKmf,UAAU7L,KAEvCnT,MAAK0c,2BAA2Bzb,cAChCjB,KAAK0c,2BAA6BqC,EAAcle,UAAU,SAAAsS,GAAQ,MAAAtT,GAAK2c,YAAY5P,KAAKuG,MAQ1FoJ,EAAFxb,UAAA6d,YAAE,SAAYzL,GAAZ,GAAFtT,GAAAG,IASI,OALAA,MAAKye,aACAze,KAAKiR,OAAgBkC,EAAKlC,OAAO,SAAAgO,GAAO,MAAApf,GAAKyd,gBAAgB2B,EAAKpf,EAAKoR,UAAzDkC,EAEfnT,KAAKme,WAAane,KAAKkf,iBAAiBlf,KAAKye,aAAajc,QAEvDxC,KAAKye,cAQdlC,EAAFxb,UAAA+d,WAAE,SAAW3L,GAET,MAAKnT,MAAK+c,KAEH/c,KAAK8c,SAAS3J,EAAKpC,QAAS/Q,KAAK+c,MAFf5J,GAS3BoJ,EAAFxb,UAAAie,UAAE,SAAU7L,GACR,IAAKnT,KAAKme,UAAa,MAAOhL,EAE9B,IAAMgM,GAAanf,KAAKme,UAAUiB,UAAYpf,KAAKme,UAAUkB,QAC7D,OAAOlM,GAAKpC,QAAQuO,OAAOH,EAAYnf,KAAKme,UAAUkB,WAQxD9C,EAAFxb,UAAAme,iBAAE,SAAiBK,GAAjB,GAAF1f,GAAAG,IACIiJ,SAAQC,UAAUC,KAAK,WACrB,GAAKtJ,EAAKse,YAEVte,EAAKse,UAAU3b,OAAS+c,EAGpB1f,EAAKse,UAAUiB,UAAY,GAAG,CAChC,GAAMI,GAAgB/b,KAAKgc,KAAK5f,EAAKse,UAAU3b,OAAS3C,EAAKse,UAAUkB,UAAY,GAAK,CACxFxf,GAAKse,UAAUiB,UAAY3b,KAAKE,IAAI9D,EAAKse,UAAUiB,UAAWI,OASpEjD,EAAFxb,UAAAoV,QAAE,WAAY,MAAOnW,MAAKwc,aAMxBD,EAAFxb,UAAAwV,WAAE,aAvRFgG,GA+B2C/F,EAAAA,YCV9BkJ,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAFhQ,GACYpL,EACAgH,EACiCqU,GAFjC/f,KAAZ0E,YAAYA,EACA1E,KAAZ0L,QAAYA,EACiC1L,KAA7C+f,kBAA6CA,EAtD7C,MA6DEjQ,GAAF/O,UAAAkE,eAAE,SAAe8G,GAAf,GAAFlM,GAAAG,IACIA,MAAK8M,OAEgC,mBAA1BvM,uBACTP,KAAK0L,QAAQO,kBAAkB,WAC7B1L,sBAAsB,WAAM,MAAAV,GAAKmgB,WAAWjU,OAG9C/L,KAAKggB,WAAWjU,IAKpB+D,EAAF/O,UAAA+L,KAAE,WACE9M,KAAK0E,YAAY9B,cAAcS,MAAM+T,WAAa,WAIpDtH,EAAF/O,UAAAgM,KAAE,WACE/M,KAAK0E,YAAY9B,cAAcS,MAAM+T,WAAa,UAO5CtH,EAAV/O,UAAAif,WAAA,SAAqBjU,GACjB,GAAMkU,GAAYjgB,KAAK+f,kBAAkBhU,GACnCmU,EAAsBlgB,KAAK0E,YAAY9B,aAE7Csd,GAAO7c,MAAM8c,KAAOF,EAAUE,KAC9BD,EAAO7c,MAAM+c,MAAQH,EAAUG,sBAhDnClb,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,cACVU,MACEC,MAAS,uDAvCbd,KAAmB6N,EAAAA,aAAnB7N,KAAuD8H,EAAAA,SA8CvD9H,SAAA4J,GAAAzI,aAAAnB,KAAK6J,EAAAA,OAAL3J,MAAYsa,SAtDZ5P,oBCgBE,QAAFJ,GAAc+H,EAA+B4I,GAC7C,MAAIlZ,GAAJC,KAAApH,KAAUyX,EAAa4I,IAAvBrgB,KAjBA,MAeiCoI,GAAjCsH,EAAAvI,kBAHAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,yEALZH,KAAmBwS,EAAAA,cAAnBxS,KAAgC8M,EAAAA,oBARhCtC,GAeiC4Q,EAAAA,yBCF/B,QAAF1Q,GAAqBtK,GAAAtF,KAArBsF,SAAqBA,EAbrB,sBAWAJ,KAACoJ,EAAAA,UAADlJ,OAAYC,SAAU,0DAHtBH,KAAmBwS,EAAAA,eARnB9H,KC+BA2Q,GAAA,yBA/BA,MAAAA,MAgCaC,GAAmBnT,EAAckT,mBAyD5C,QAAF5Q,GAAsB8Q,GAApB,GAAF5gB,GACIsH,EADJC,KAAApH,OAAAA,WAAsBH,GAAtB4gB,kBAAsBA,EAjCtB5gB,EAAA6gB,UAAsC,GAGtC7gB,EAAA8gB,eAAkD,KAQlD9gB,EAAAsK,aAA0B,GAAI0B,GAAAA,QAG9BhM,EAAAoK,eAA4B,GAAI4B,GAAAA,QAMhChM,EAAAwJ,SAA4B,KAM5BxJ,EAAA0J,OAA0B,KAK1B1J,EAAAyJ,UAAa,IA/Bb,MAb4BlB,GAA5BuH,EAAAxI,GAmBE3F,OAAFC,eAAMkO,EAAN5O,UAAA,eAAE,WACE,MAAOf,MAAK2gB,gDA8BdhR,EAAF5O,UAAA6f,YAAE,SAAYlX,GACNA,EAAQmX,eAAe,cACzB7gB,KAAKmK,aAAayC,OAGhBlD,EAAQmX,eAAe,aACzB7gB,KAAKiK,eAAe2C,QAIxB+C,EAAF5O,UAAAC,YAAE,WACEhB,KAAKiK,eAAe4C,WACpB7M,KAAKmK,aAAa0C,YAGpB8C,EAAF5O,UAAA+f,SAAE,WACE9gB,KAAK2gB,eAAiB,GAAII,GAAAA,eACtB/gB,KAAKghB,kBAAoBhhB,KAAKihB,iBAAkBjhB,KAAKygB,mCA5E7Dvb,KAACC,EAAAA,UAADC,OAAAC,SAAA,UACEC,SAAU,uDACVE,QAAF,YACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEwF,SAAF,4EAnBAwE,EAAApJ,wIAyBA0a,mBAAA/b,KAAAsB,EAAAA,UAAApB,MAAgBsS,EAAAA,eAKhBgJ,YAAAxb,KAAAuB,EAAAA,MAAGrB,MAAH,YAMAuK,OCvCauR,IAIXC,aAAcjK,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyD9T,EAAAA,OAAOC,UAAW,UACjF6T,EAAAA,MAAM,OAAQ9T,EAAAA,OAAOC,UAAW,8BAChC6T,EAAAA,MAAM,QAAS9T,EAAAA,OAAOC,UAAW,6BACjC+T,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACThU,EAAAA,OAAOC,UAAW,6BAClBgU,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACThU,EAAAA,OAAOC,UAAW,4BAClBgU,EAAAA,QAAQ,4DCiCZ,QAAFrH,GACImR,EACAf,EAC8CgB,GAHhD,GAAFxhB,GAIMsH,EAJNC,KAAApH,KAIYohB,EAA0Bf,IAJtCrgB,WAGkDH,GAAlDwhB,MAAkDA,EAPlDxhB,EAAAyhB,cAA0B9Z,EAAAA,aAAaC,MAEvC5H,EAAA0hB,YAAwB/Z,EAAAA,aAAaC,QAjErC,MA6DsCW,GAAtC6H,EAAA9I,GAcE8I,EAAFlP,UAAA+f,SAAE,WAAA,GAAFjhB,GAAAG,IACImH,GAAJpG,UAAU+f,SAAV1Z,KAAApH,MAEIA,KAAKshB,cAAgBthB,KAAKqhB,MAAMG,iBAC7BpV,KAAKqV,EAAAA,UAAUzhB,KAAKqhB,MAAMK,kBAAkB1hB,KAAKqhB,MAAMM,aACvD9gB,UAAU,SAAC+gB,GACNA,IAAgB/hB,EAAKgiB,eACvBhiB,EAAKiiB,OAAOjiB,EAAKwhB,MAAMU,YAI7B/hB,KAAKuhB,YAAcvhB,KAAKqhB,MAAMW,oBAAoBnhB,UAAU,WAC1DhB,EAAKoiB,YAKThS,EAAFlP,UAAAC,YAAE,WACEmG,EAAJpG,UAAUC,YAAVoG,KAAApH,MACIA,KAAKshB,cAAcrgB,cACnBjB,KAAKuhB,YAAYtgB,8BArCrBiE,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,2DAtCZH,KAAEgd,EAAAA,2BACFhd,KAAE8M,EAAAA,mBA6FF9M,KAAa8K,GAAb3J,aAAAnB,KA7CK6J,EAAAA,OA6CL3J,MA7CY+c,EAAAA,WAAW,WAAM,MAAAnS,YAtE7BC,GA6DsCmS,EAAAA,+BAoGpC,QAAFpS,GAAsBtL,EACYzB,GADZjD,KAAtB0E,YAAsBA,EACY1E,KAAlCiD,KAAkCA,EA7ClCjD,KAAAqiB,aAA0D,GAAIta,GAAAA,aAG9D/H,KAAAwhB,iBAA+D,GAAIzZ,GAAAA,aAGnE/H,KAAAgiB,oBAAkE,GAAIja,GAAAA,aAGtE/H,KAAAsiB,YAAuD,GAAIva,GAAAA,cAAmB,GAsB9E,MAZAvG,QAAAC,eAAMuO,EAANjP,UAAA,gBAAA,SAAesI,GAETrJ,KAAK2hB,UADHtY,EAAW,EACkC,OAA9BrJ,KAAKK,sBAAiC,OAAS,QACvDgJ,EAAW,EAC2B,OAA9BrJ,KAAKK,sBAAiC,QAAU,OAEhD,0CAOvBmB,OAAAC,eAAMuO,EAANjP,UAAA,cAAA,SAAawI,GACT,GAAc,MAAVA,EAAJ,CAEA,GAAM1G,GAAM7C,KAAKK,qBAEfL,MAAKuiB,QADK,OAAP1f,GAAgB0G,GAAU,GAAc,OAAP1G,GAAgB0G,EAAS,EAC9C,OAEA,0CAYnByG,EAAFjP,UAAA+f,SAAE,WACwB,UAAlB9gB,KAAK2hB,WAAyB3hB,KAAKuiB,UACrCviB,KAAK2hB,UAA4B,QAAhB3hB,KAAKuiB,QAAoB,qBAAuB,wBAIrEvS,EAAFjP,UAAAyhB,uBAAE,SAAuBC,GACrB,GAAMb,GAAc5hB,KAAK0hB,kBAAkBe,EAAEC,QAC7C1iB,MAAKwhB,iBAAiBzf,KAAK6f,GACvBA,GACF5hB,KAAKqiB,aAAatgB,KAAK/B,KAAK0E,YAAY9B,cAAckI,eAI1DkF,EAAFjP,UAAA4hB,wBAAE,SAAwBF,GAElBziB,KAAK0hB,kBAAkBe,EAAEC,UAAY1iB,KAAK0hB,kBAAkB1hB,KAAK2hB,YACnE3hB,KAAKsiB,YAAYvgB,OAGf/B,KAAK0hB,kBAAkBe,EAAEG,aAAe5iB,KAAK0hB,kBAAkB1hB,KAAK2hB,YACtE3hB,KAAKgiB,oBAAoBjgB,QAK7BiO,EAAFjP,UAAAV,oBAAE,WACE,MAAOL,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,OAI1DsO,EAAFjP,UAAA2gB,kBAAE,SAAkBrY,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,kBAnGRnE,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,wOACVC,QAAF,wHACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEqT,YAAa+H,GAAfC,cACEpb,MACFC,MAAe,oIAlFfgK,EAAAzJ,kFAyFAyb,sBAAA9c,KAAAyB,EAAAA,SAGA2b,cAAApd,KAAAyB,EAAAA,SAGAkc,cAAA3d,KAAAsB,EAAAA,UAAApB,MAAA0d,EAAAA,uBAGAf,WAAA7c,KAAAuB,EAAAA,MAAArB,MAAA,aAGAiE,WAAAnE,KAAAuB,EAAAA,QAGA8C,SAAArE,KAAAuB,EAAAA,SAgBAuJ,KCvIA+S,GAAA,yBAbA,MAAAA,MAcaC,GAA+B3V,EAAc0V,mBAcxD,QAAFhT,GAAqBhL,GAAnB,GAAFlF,GACIsH,EADJC,KAAApH,OAAAA,WAAqBH,GAArBkF,WAAqBA,IA5BrB,MA2BwCqD,GAAxC2H,EAAA5I,GAME4I,EAAFhP,UAAA0B,MAAE,WACEzC,KAAK+E,WAAWnC,cAAcH,SAGhCsN,EAAFhP,UAAAsD,cAAE,WACE,MAAOrE,MAAK+E,WAAWnC,cAAcqgB,YAGvClT,EAAFhP,UAAAuD,eAAE,WACE,MAAOtE,MAAK+E,WAAWnC,cAAcI,4BAtBzCkC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uBACVG,QAAS,YACTO,MACE2I,2BAA4B,oDAhBhCxJ,KAAmB6N,EAAAA,cARnBhD,GA2BwCiT,IlCwBxCE,GAAA,yBAnDA,MAAAA,MAoDaC,GAAyBlc,EAAmBic,mBAkFvD,QAAFpiB,GAAsB4D,EACAvD,EACAwK,EACY1I,GAHhC,GAAFpD,GAIIsH,EAJJC,KAAApH,OAAAA,WAAsBH,GAAtB6E,YAAsBA,EACA7E,EAAtBsB,mBAAsBA,EACAtB,EAAtB8L,eAAsBA,EACY9L,EAAlCoD,KAAkCA,EArDlCpD,EAAA0D,gBAA4B,EAG5B1D,EAAAujB,uBAAkC,EAGlCvjB,EAAAY,eAA2B+G,EAAAA,aAAaC,MAGxC5H,EAAAyC,yBAA4B,EAG5BzC,EAAA+E,qBAAwB,EAGxB/E,EAAA8E,sBAAyB,EAczB9E,EAAA+H,eAAmC,EAgBnC/H,EAAA6G,mBAA0C,GAAIqB,GAAAA,aAG9ClI,EAAAiC,aAAoC,GAAIiG,GAAAA,eAAxC,MAzDkCK,GAAlCtH,EAAAqG,GA0CA3F,OAAAC,eAAMX,EAANC,UAAA,qBAAA,WAAgC,MAAOf,MAAK4H,oBAC1C,SAAkBlG,GAChBA,EAAQ4G,EAAAA,qBAAqB5G,GAC7B1B,KAAKojB,sBAAwBpjB,KAAK4H,gBAAkBlG,EACpD1B,KAAK4H,eAAiBlG,EAElB1B,KAAKC,aACPD,KAAKC,YAAYK,sBAAsBoB,oCAiB3CZ,EAAFC,UAAA6H,sBAAE,WAEM5I,KAAKqjB,gBAAkBrjB,KAAKG,eAAeqC,SAC7CxC,KAAKF,oBACLE,KAAKqjB,eAAiBrjB,KAAKG,eAAeqC,OAC1CxC,KAAKmB,mBAAmBC,gBAKtBpB,KAAKojB,wBACPpjB,KAAKuC,eAAevC,KAAK4H,gBACzB5H,KAAKsB,0BACLtB,KAAKD,4BACLC,KAAKojB,uBAAwB,EAC7BpjB,KAAKmB,mBAAmBC,gBAKtBpB,KAAK6D,yBACP7D,KAAKuB,2BACLvB,KAAK6D,wBAAyB,EAC9B7D,KAAKmB,mBAAmBC,iBAI5BN,EAAFC,UAAAuiB,eAAE,SAAexZ,GACb,OAAQA,EAAMyZ,SACZ,IAAKC,GAAAA,KACHxjB,KAAKC,YAAYwjB,qBACjB3Z,EAAMsE,gBACN,MACF,KAAKsV,GAAAA,IACH1jB,KAAKC,YAAY0jB,oBACjB7Z,EAAMsE,gBACN,MACF,KAAKwV,GAAAA,MACL,IAAKC,GAAAA,MACH7jB,KAAK0G,mBAAmB3E,KAAK/B,KAAK4B,YAClCkI,EAAMsE,gBACN,MACF,SACEpO,KAAKC,YAAY6jB,UAAUha,KAOjChJ,EAAFC,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,KACUW,EAAYX,KAAKiD,KAAOjD,KAAKiD,KAAKiJ,OAASC,EAAAA,GAAa,MACxDvL,EAASZ,KAAK2L,eAAeO,OAAO,KACpC1L,EAAU;kGACdX,EAAKC,oBACLD,EAAKE,4BAGPC,MAAKC,YAAc,GAAIC,GAAAA,gBAAgBF,KAAKG,gBACzCC,0BAA0BJ,KAAKK,uBAElCL,KAAKC,YAAYK,sBAAsB,GAIN,mBAA1BC,uBAAwCA,sBAAsBC,GAAWA,IAEhFR,KAAKS,eAAiBC,EAAAA,MAAMC,EAAWC,GAAQC,UAAU,WACvDL,IACAX,EAAKI,YAAYG,0BAA0BP,EAAKQ,0BAIpDS,EAAFC,UAAAC,YAAE,WACEhB,KAAKS,eAAeQ,eAMtBH,EAAFC,UAAAG,kBAAE,WACElB,KAAKF,oBACLE,KAAKD,4BACLC,KAAKmB,mBAAmBC,gBAM1BN,EAAFC,UAAAjB,kBAAE,WACEE,KAAKqB,0BACLrB,KAAKsB,0BACLtB,KAAKuB,4BAIPC,OAAFC,eAAMX,EAANC,UAAA,kBAAE,WACE,MAAOf,MAAKC,YAAcD,KAAKC,YAA2B,gBAAI,OAIhE,SAAeyB,GACR1B,KAAK2B,cAAcD,IAAU1B,KAAK4B,YAAcF,GAAU1B,KAAKC,cAEpED,KAAKC,YAAY4B,cAAcH,GAC/B1B,KAAK8B,aAAaC,KAAKL,GACvB1B,KAAKgC,aAAaN,qCAOpBZ,EAAFC,UAAAY,cAAE,SAAcM,GACZ,IAAKjC,KAAKG,eAAkB,OAAO,CAEnC,IAAM+B,GAAMlC,KAAKG,eAAiBH,KAAKG,eAAegC,UAAUF,GAAS,IACzE,SAASC,IAAQA,EAAIE,UAOvBtB,EAAFC,UAAAiB,aAAE,SAAaK,GAKX,GAJIrC,KAAKsC,yBACPtC,KAAKuC,eAAeF,GAGlBrC,KAAKG,gBAAkBH,KAAKG,eAAeqC,OAAQ,CACrDxC,KAAKG,eAAegC,UAAUE,GAAUI,OAKxC,IAAMC,GAAc1C,KAAK2C,kBAAkBC,cACrCC,EAAM7C,KAAKK,qBAGfqC,GAAYI,WADH,OAAPD,EACuB,EAEAH,EAAYK,YAAcL,EAAYM,cAMrElC,EAAFC,UAAAV,oBAAE,WACE,MAAOL,MAAKiD,MAA4B,QAApBjD,KAAKiD,KAAKvB,MAAkB,MAAQ,OAI1DZ,EAAFC,UAAAQ,yBAAE,WACE,GAAM2B,GAAiBlD,KAAKkD,eACtBC,EAA4C,QAA/BnD,KAAKK,uBAAmC6C,EAAiBA,CAE5ElD,MAAKoD,SAASR,cAAcS,MAAMC,UAAY,eAAeH,EAAjE,aAIE3B,OAAFC,eAAMX,EAANC,UAAA,sBAAE,WAA+B,MAAOf,MAAKuD,qBAC3C,SAAmBC,GACjBxD,KAAKuD,gBAAkBE,KAAKC,IAAI,EAAGD,KAAKE,IAAI3D,KAAK4D,wBAAyBJ,IAI1ExD,KAAK6D,wBAAyB,EAC9B7D,KAAKsB,2DAWPR,EAAFC,UAAA+C,cAAE,SAAcC,GACZ,GAAMC,GAAahE,KAAK2C,kBAAkBC,cAAcI,WAGxDhD,MAAKkD,iBAAgC,UAAba,GAAyB,EAAI,GAAKC,EAAa,GASzElD,EAAFC,UAAAwB,eAAE,SAAe0B,GACb,GAAMC,GAAgBlE,KAAKG,eAAiBH,KAAKG,eAAegC,UAAU8B,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAahE,KAAK2C,kBAAkBC,cAAcI,WAGtB,QAA9BhD,KAAKK,uBACP8D,EAAiBD,EAAcG,gBAC/BD,EAAgBD,EAAiBD,EAAcI,mBAE/CF,EAAgBpE,KAAKoD,SAASR,cAAcI,YAAckB,EAAcG,gBACxEF,EAAiBC,EAAgBF,EAAcI,iBAGjD,IAAMC,GAAmBvE,KAAKkD,eACxBsB,EAAkBxE,KAAKkD,eAAiBc,CAE1CG,GAAiBI,EAEnBvE,KAAKkD,gBAAkBqB,EAAmBJ,EAnTjB,GAoThBC,EAAgBI,IAEzBxE,KAAKkD,gBAAkBkB,EAAgBI,EAtTd,MAkU7B1D,EAAFC,UAAAM,wBAAE,WACE,GAAMoD,GACFzE,KAAKoD,SAASR,cAAcG,YAAc/C,KAAK0E,YAAY9B,cAAcI,WAExEyB,KACHzE,KAAKkD,eAAiB,GAGpBuB,IAAczE,KAAKsC,yBACrBtC,KAAKmB,mBAAmBC,eAG1BpB,KAAKsC,wBAA0BmC,GAYjC3D,EAAFC,UAAAO,wBAAE,WAEEtB,KAAK2E,qBAA8C,GAAvB3E,KAAKkD,eACjClD,KAAK4E,oBAAsB5E,KAAKkD,gBAAkBlD,KAAK4D,wBACvD5D,KAAKmB,mBAAmBC,gBAU1BN,EAAFC,UAAA6C,sBAAE,WAGE,MAFwB5D,MAAKoD,SAASR,cAAcG,YACjC/C,KAAK2C,kBAAkBC,cAAcI,aACf,GAI3ClC,EAAFC,UAAAhB,0BAAE,WACE,GAAM8E,GAAuB7E,KAAKG,gBAAkBH,KAAKG,eAAeqC,OACpExC,KAAKG,eAAegC,UAAUnC,KAAK8E,eAAeC,WAAWnC,cAC7D,IAEJ5C,MAAKgF,QAAQC,eAAeJ,mBAtWhCK,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,+7BACVC,QAAF,0+DACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MACFC,MAAA,iBACMC,qDAAN,0BACIC,6BAAJ,yHAnDAhB,KAAEiB,EAAAA,gBAHFjB,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cARAxF,EAAAyF,2GAsEA5D,oBAAAuC,KAAAsB,EAAAA,UAAApB,MAAA,sBACAhC,WAAA8B,KAAAsB,EAAAA,UAAApB,MAAA,aACAN,gBAAAI,KAAAuB,EAAAA,QACAC,qBAAAxB,KAAAyB,EAAAA,SAmCA7E,eAAAoD,KAAAyB,EAAAA,UAgBA7F,OC9FI8F,GAAS,EAGbC,GAAA,yBAzCA,MAAAA,MAqDAC,GAAA,WACE,QAAFA,GAAqBpC,GAAA1E,KAArB0E,YAAqBA,EAtDrB,MAAAoC,MAwDaC,GAAwBC,EAAWC,EAAmBH,IAAkB,0BA4FnF,QAAFI,GAAcnC,EACQ5D,GADpB,GAAFtB,GAEIsH,EAFJC,KAAApH,KAEU+E,IAFV/E,WACsBH,GAAtBsB,mBAAsBA,EA7DtBtB,EAAAwH,eAA0C,EAG1CxH,EAAAyH,sBAA0C,EAG1CzH,EAAA0H,kBAA8BC,EAAAA,aAAaC,MAG3C5H,EAAA6H,sBAAkCF,EAAAA,aAAaC,MAM/C5H,EAAA8H,gBAAoC,EAQpC9H,EAAA+H,eAA0C,KAG1C/H,EAAAgI,eAAkD,QAmBlDhI,EAAAiI,oBAAiE,GAAIC,GAAAA,aAIrElI,EAAAmI,YAAM,GAAID,GAAAA,aAGVlI,EAAAoI,cAAyD,GAAIF,GAAAA,aAI7DlI,EAAAqI,kBAAM,GAAIH,GAAAA,cAAgC,GAOtClI,EAAKsI,SAAWvB,OARpB,MAjEiCwB,GAAjClB,EAAAC,GAuBA3F,OAAAC,eAAMyF,EAANnG,UAAA,qBAAA,WAAiC,MAAOf,MAAK2H,oBAC3C,SAAkBjG,GAAkB1B,KAAK2H,eAAiBU,EAAAA,sBAAsB3G,oCAKlFF,OAAAC,eAAMyF,EAANnG,UAAA,qBAAA,WAAuC,MAAOf,MAAK4H,oBACjD,SAAkBlG,GAChB1B,KAAKqH,eAAiBiB,EAAAA,qBAAqB5G,EAAO,uCAStDF,OAAAC,eAAMyF,EAANnG,UAAA,uBAAA,WAAwC,MAAOf,MAAKuI,sBAClD,SAAoB7G,GAClB,GAAMkB,GAA6B5C,KAAK0E,YAAY9B,aAEpDA,GAAc4F,UAAUC,OAAO,kBAAkBzI,KAAK0I,iBAElDhH,GACFkB,EAAc4F,UAAUG,IAAI,kBAAkBjH,GAGhD1B,KAAKuI,iBAAmB7G,mCAgC1BwF,EAAFnG,UAAA6H,sBAAE,WAAA,GAAF/I,GAAAG,KAKQ6I,EAAgB7I,KAAKqH,eACrB5D,KAAKE,IAAI3D,KAAK8I,MAAMtG,OAAS,EAAGiB,KAAKC,IAAI1D,KAAKqH,gBAAkB,EAAG,GAIvE,IAAIrH,KAAK4H,gBAAkBiB,GAAwC,MAAvB7I,KAAK4H,eAAwB,CACvE,GAAMmB,GAAiB/I,KAAKgJ,mBAAmBH,EAC/C7I,MAAKkI,kBAAkBnG,KAAKgH,GAG5BE,QAAQC,UAAUC,KAAK,WAAM,MAAAtJ,GAAKiI,oBAAoB/F,KAAK8G,KAI7D7I,KAAK8I,MAAMM,QAAQ,SAAClH,EAAaD,GAC/BC,EAAImH,SAAWpH,EAAQ4G,EACvB3G,EAAIoH,SAAWrH,IAAU4G,EAIE,MAAvBhJ,EAAK+H,gBAA0C,GAAhB1F,EAAImH,UAAkBnH,EAAIqH,SAC3DrH,EAAIqH,OAASV,EAAgBhJ,EAAK+H,kBAIlC5H,KAAK4H,iBAAmBiB,IAC1B7I,KAAK4H,eAAiBiB,EACtB7I,KAAKmB,mBAAmBC,iBAI5B8F,EAAFnG,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAKyJ,wBAILzJ,KAAKuH,kBAAoBvH,KAAK8I,MAAMY,QAAQ7I,UAAU,WACpDhB,EAAK4J,wBACL5J,EAAKsB,mBAAmBC,kBAI5B8F,EAAFnG,UAAAC,YAAE,WACEhB,KAAKuH,kBAAkBtG,cACvBjB,KAAK0H,sBAAsBzG,eAI7BiG,EAAFnG,UAAA4I,cAAE,WACM3J,KAAK4J,YACP5J,KAAK4J,WAAW7J,6BAIpBmH,EAAFnG,UAAA8I,cAAE,SAAc5H,GACZjC,KAAKgI,YAAYjG,KAAK/B,KAAKgJ,mBAAmB/G,KAGxCiF,EAAVnG,UAAAiI,mBAAA,SAA6B/G,GACzB,GAAM6H,GAAQ,GAAIjD,GAKlB,OAJAiD,GAAM7H,MAAQA,EACVjC,KAAK8I,OAAS9I,KAAK8I,MAAMtG,SAC3BsH,EAAM5H,IAAMlC,KAAK8I,MAAM3G,UAAUF,IAE5B6H,GASD5C,EAAVnG,UAAA0I,2CACQzJ,MAAK0H,uBACP1H,KAAK0H,sBAAsBzG,cAG7BjB,KAAK0H,sBAAwBhH,EAAAA,MAAjCqJ,UAAA,GACW/J,KAAK8I,MAAMkB,IAAI,SAAA9H,GAAO,MAAAA,GAAI+H,iBADrCC,OAEWlK,KAAK8I,MAAMkB,IAAI,SAAA9H,GAAO,MAAAA,GAAIiI,iBAAetJ,UAAU,WACxDhB,EAAKsB,mBAAmBC,kBAK5B8F,EAAFnG,UAAAqJ,eAAE,SAAeC,GACb,MAAO,iBAAiBrK,KAAKmI,SAAjC,IAA6CkC,GAI3CnD,EAAFnG,UAAAuJ,iBAAE,SAAiBD,GACf,MAAO,mBAAmBrK,KAAKmI,SAAnC,IAA+CkC,GAO7CnD,EAAFnG,UAAAwJ,yBAAE,SAAyBC,GACvB,GAAKxK,KAAK2H,gBAAmB3H,KAAKsH,sBAAlC,CAEA,GAAMmD,GAAuBzK,KAAK0K,gBAAgB9H,aAElD6H,GAAQpH,MAAMsH,OAAS3K,KAAKsH,sBAAwB,KAIhDtH,KAAK0K,gBAAgB9H,cAAcgI,eACrCH,EAAQpH,MAAMsH,OAASH,EAAY,QAKvCtD,EAAFnG,UAAA8J,4BAAE,WACE7K,KAAKsH,sBAAwBtH,KAAK0K,gBAAgB9H,cAAckI,aAChE9K,KAAK0K,gBAAgB9H,cAAcS,MAAMsH,OAAS,GAClD3K,KAAKiI,cAAclG,QAIrBmF,EAAFnG,UAAAgK,aAAE,SAAa7I,EAAa8I,EAAyBC,GAC5C/I,EAAIE,WACPpC,KAAK8E,cAAgBkG,EAAUpJ,WAAaqJ,IAKhD/D,EAAFnG,UAAAmK,aAAE,SAAahJ,EAAa+I,GACxB,MAAI/I,GAAIE,SACC,KAEFpC,KAAK8E,gBAAkBmG,EAAM,GAAK,kBA1O7C/F,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACE8F,SAAU,cACV7F,SAAU,20CACVC,QAAF,isCACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,QAAA,iBACEO,MACFC,MAAA,gBACMoF,uCAAN,gBACIC,wCAAJ,sHA5DAnE,EAAEX,wHAoEFqD,aAAA1E,KAAAsB,EAAAA,UAAApB,MAAA,eAEAkG,gBAAApG,KAAAuB,EAAAA,QAEA3B,gBAAAI,KAAAuB,EAAAA,QAeAoB,iBAAA3C,KAAAuB,EAAAA,QAMAiC,kBAAAxD,KAAAuB,EAAAA,QAQAqB,sBAAA5C,KAAQyB,EAAAA,SAGRqB,cAAA9C,KAAAyB,EAAAA,SAgBAsB,gBAAA/C,KAAAyB,EAAAA,SAGAuB,oBAAGhD,KAAMyB,EAAAA,UAOTO,OC3FAqE,GAAA,WACE,QAAFA,GAAqB7G,GAAA1E,KAArB0E,YAAqBA,EArDrB,MAAA6G,MAuDaC,GAAsBvE,EAAmBD,EAAWuE,GAAe,2BAgD9E,QAAFE,GAAc1G,EACoB9B,EACZyI,EACAvK,EACAwK,GAJpB,GAAF9L,GAKIsH,EALJC,KAAApH,KAKU+E,IALV/E,WACkCH,GAAlCoD,KAAkCA,EACZpD,EAAtB6L,QAAsBA,EACA7L,EAAtBsB,mBAAsBA,EACAtB,EAAtB8L,eAAsBA,EA/BtB9L,EAAA+L,WAAgC,GAAIC,GAAAA,UAYpC,MAhB+BzD,GAA/BqD,EAAAtE,GAiBA3F,OAAAC,eAAMgK,EAAN1K,UAAA,uBAAA,WAAwC,MAAOf,MAAKuI,sBAClD,SAAoB7G,GAClB,GAAMkB,GAA6B5C,KAAK0E,YAAY9B,aAEpDA,GAAc4F,UAAUC,OAAO,kBAAkBzI,KAAK0I,iBAElDhH,GACFkB,EAAc4F,UAAUG,IAAI,kBAAkBjH,GAGhD1B,KAAKuI,iBAAmB7G,mCAgB1B+J,EAAF1K,UAAA+K,iBAAE,SAAiBC,GAGf/L,KAAKgM,qBAAuBD,EAC5B/L,KAAKmB,mBAAmBC,gBAG1BqK,EAAF1K,UAAAyI,mBAAE,WAAA,GAAF3J,GAAAG,IACIA,MAAK0L,QAAQO,kBAAkB,WAC7B,GAAMtL,GAAYd,EAAKoD,KAAOpD,EAAKoD,KAAKiJ,OAASC,EAAAA,GAAa,KAE9D,OAAOzL,GAAAA,MAAMC,EAAWd,EAAK8L,eAAeO,OAAO,KAC9CE,KAAKC,EAAAA,UAAUxM,EAAK+L,aACpB/K,UAAU,WAAM,MAAAhB,GAAKyM,oBAK9Bb,EAAF1K,UAAA6H,sBAAE,WACE,GAAI5I,KAAKgM,mBAAoB,CAC3B,GAAMO,GAAYvM,KAAKwM,UAAUC,KAAK,SAAAvK,GAAO,MAAAA,GAAIwK,QAEjD1M,MAAK2M,mBAAqBJ,EAAYA,EAAU7H,YAAc,KAC9D1E,KAAKsM,eACLtM,KAAKgM,oBAAqB,IAI9BP,EAAF1K,UAAAC,YAAE,WACEhB,KAAK4L,WAAWgB,OAChB5M,KAAK4L,WAAWiB,YAIlBpB,EAAF1K,UAAAuL,aAAE,WACMtM,KAAK2M,oBACP3M,KAAKgF,QAAQ8H,OACb9M,KAAKgF,QAAQC,eAAejF,KAAK2M,mBAAmB/J,gBAEpD5C,KAAKgF,QAAQ+H,uBA7FnB7H,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACE8F,SAAU,0BACV3F,QAAF,QAAA,iBACEF,SAAU,6HACVC,QAAS,i+BACTQ,MAAFC,MAAA,mBACEP,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAjDAZ,KAAE8H,EAAAA,SAZF9H,KAAQ+H,EAAAA,oBAgBR/H,KAAEiB,EAAAA,iBAdFsF,EAAAlF,wJAwEAmC,kBAAAxD,KAAAuB,EAAAA,SAOAgF,OAxFAyB,GAAA,qCAiKAC,GAAAC,EAAAnG,EAAAoG,EAAAH,6CAqBA,GAAArN,GAAAsH,EAAAC,KAAApH,OAAAA,IAmDA,OAlBAH,GAAAyN,WAAAA,EAAEzN,EAAF6E,YAAAA,oEAVA7E,EAAA0N,eAA+BC,mBAA/B9I,EAAA9B,eAkBI/C,EAAKwC,SAAToL,SAAApL,IAAA,EACAqL,IAEA7N,EAAA8N,cAEAC,qBAAAF,EAAAE,qBACAC,YAAAH,EAAAI,gBACQC,UAARL,EAAAK,YAGAlO,EAzCA,0DA2CAmO,2EAzCAhO,KAAAiO,UAAAvM,EACQ1B,KAAKsN,WAAbxB,iBAAA9L,KAAA0E,eAGAwJ,YAAA,EACAC,cAAA,gJAaAD,YAAA,EACAC,cAAA,uIA+BArE,EAAAsE,kBAGAC,EAAAhI,aACAnB,KAAAoJ,EAAAA,UAAAlJ,+CAhFA+F,SAAA,aACE3F,QAAF,WAAA,gBAAA,YACEO,MACFC,MAAA,eACMuI,sBAAN,SACIC,uBAAJ,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,SACIC,UAAJ,8FAzGA1J,KAAa8H,EAAAA,SArDb9H,KAAE2J,EAAAA,WAIF3J,SAAE4J,GAAFzI,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAA6J,EAAAA,OAAA3J,MAAA4J,QAfA9J,SAAQ4J,GAARzI,aAAAnB,KAAA+J,EAAAA,UAAA7J,MAAA,iBAoNAiJ,EAAA9H,yCA5BA8H,mCChMA,sBAwBAnJ,KAACgK,EAAAA,SAAD9J,OACE+J,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,iBAGFC,SACEJ,GACAnI,GACAwI,GACAC,GACAlE,GACA4C,GACAuB,IAEFC,cACE3I,GACAwI,GACAC,GACAG,GACAC,GACAtE,GACA4C,GACA2B,GACAC,GACAnP,GACA8O,QArDJM,KC0BAC,GAAA,WACE,QAAFA,GAAqBzL,GAAA1E,KAArB0E,YAAqBA,EA3BrB,MAAAyL,MA6BaC,GAAuBpJ,EAAWmJ,gCA7B/C,sBA+BAjL,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,kBACV8F,SAAU,gBACVpF,MAAOC,MAAS,uBAlClBqK,KAoCAC,GAAA,SAAAnJ,GAuBE,QAAFmJ,GACIvL,EACQwL,EACUC,GAHpB,GAAF3Q,GAIIsH,EAJJC,KAAApH,KAIU+E,IAJV/E,WAEYH,GAAZ0Q,UAAYA,EAKR1Q,EAAK4Q,UAAYD,IATrB,MAJgCpI,GAAhCkI,EAAAnJ,GAgBEmJ,EAAFvP,UAAA2P,gBAAE,WAAA,GAAF7Q,GAAAG,IACS2Q,GAAAA,aAAgB3Q,KAAKuQ,UAAUK,YAIpC5Q,KAAK6Q,0BACL7Q,KAAK8Q,aAAapH,QAAQ7I,UAAU,WAAM,MAAAhB,GAAKgR,8BAMzCP,EAAVvP,UAAA8P,6CACI,IAAK7Q,KAAK8Q,aAAatO,OAAvB,IAM2BuO,MAAM3J,KAAKpH,KAAK0E,YAAY9B,cAAcoO,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAK1I,WAAa0I,EAAK1I,UAAU2I,SAAS,sBAC3DF,OAAO,SAAAC,GAAQ,MAAAA,GAAKE,YAAcvR,EAAK4Q,UAAY5Q,EAAK4Q,UAAUY,aAAe,KACjFC,KAAK,SAAAJ,GAAQ,MAAAA,GAAKK,YAAYC,UAG/BC,sBAxDNvM,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACE8F,SAAU,aACV7F,SAAU,8EACVC,QAAF,yiBACEC,QAAF,SACEO,MACFC,MAAA,cACM0L,oCAAN,2BACIC,iCAAJ,6BAEA/L,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAT,SAAE4J,GAAFzI,aAAAnB,KAAA6J,EAAAA,OAAA3J,MAAAwM,EAAAA,eAgDAtB,EAAA/J,mEALA+J,mCCzDA,sBAaApL,KAACgK,EAAAA,SAAD9J,OACE+J,SAAUE,IACVI,SAAUa,GAAYD,GAAehB,IACrCQ,cAAeS,GAAYD,QAhB7BwB,mBCqBE,QAAFC,GAAqBC,GAAA/R,KAArB+R,cAAqBA,EArBrB,sBAiBA7M,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,8DARZH,KAAE8M,EAAAA,oBAVFF,KC6BaG,GAAwB7E,EAAcC,EAAc6E,EAAAA,cACpDC,GAA8B/E,EAAcC,EAAc+E,EAAAA,mCAqBrE,QAAFC,GAAwB3N,EACA4N,EACajQ,GAFnC,GAAFxC,GAGIsH,EAHJC,KAAApH,KAGU0E,EAAa4N,IAHvBtS,WAAwBH,GAAxB6E,YAAwBA,EACA7E,EAAxByS,MAAwBA,EAHxBzS,EAAA0S,KAAwC,WAOpC1S,EAAKwC,SAAWmQ,OAAOnQ,IAAa,IAxDxC,MA+CoC+F,GAApCiK,EAAAlL,kBAZAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,gBACV8F,SAAU,cACV3F,QAAS,WAAY,YACrBO,MACE0M,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf3M,MAAS,iBAEX4M,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CA1BlDnN,KAAE6N,EAAAA,aATF7N,KAAE8N,EAAAA,UA2CF9N,SAAA4J,GAAAzI,aAAAnB,KAAe+J,EAAAA,UAAf7J,MAAyB,mCAJzBmN,OAAArN,KAAGuB,EAAAA,SAjDH4L,GA+CoCJ,+EA/CpC,MAsEuC7J,GAAvC6K,EAAA9L,kBAPAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,mBACVG,QACE,4BAEFoN,YAAaC,QAASK,EAAAA,eAAgBJ,YAAaG,0BAGrDE,OAAAjO,KAAGuB,EAAAA,MAAHrB,MAAS,kBAvET6N,GAsEuCC,EAAAA,+BA4BrC,QAAFE,GAAwB1O,EACA4N,EACAe,EACahR,GAHnC,GAAFxC,GAIIsH,EAJJC,KAAApH,KAIU0E,EAAa4N,EAAOe,IAJ9BrT,WAAwBH,GAAxB6E,YAAwBA,EACA7E,EAAxByS,MAAwBA,EACAzS,EAAxBwT,SAAwBA,EAIpBxT,EAAKwC,SAAWmQ,OAAOnQ,IAAa,IAxGxC,MA2F0C+F,GAA1CgL,EAAAjM,GAmBEiM,EAAFrS,UAAAyI,mBAAE,WACErC,EAAJpG,UAAUyI,mBAAVpC,KAAApH,OAGEoT,EAAFrS,UAAAC,YAAE,WACEmG,EAAJpG,UAAUC,YAAVoG,KAAApH,sBAtCAkF,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uBACV8F,SAAU,oBACVpF,MACE0M,uBAAwB,aACxBE,cAAe,OACf3M,MAAS,wBAEXR,QAAS,WAAY,YACrBoN,YACGC,QAAST,EAAAA,kBAAmBU,YAAaM,IACzCP,QAASX,EAAAA,YAAaY,YAAaM,4CArExClO,KAAE6N,EAAAA,aATF7N,KAAE8N,EAAAA,UAWF9N,KAAEoO,EAAAA,kBAgFFpO,SAAA4J,GAAAzI,aAAAnB,KAAe+J,EAAAA,UAAf7J,MAAyB,mCAPzB8L,OAAAhM,KAAGuB,EAAAA,MAAHrB,MAAS,uBAETmO,aAAArO,KAAGsO,EAAAA,gBAAHpO,MAAmB0M,OAhGnBsB,GA2F0CjB,+EC3F1C,MAkB2C/J,GAA3CqL,EAAAtM,kBAJAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,uBACVuN,YAAaC,QAASa,EAAAA,mBAAoBZ,YAAaW,0BAKzDE,QAAAzO,KAAGuB,EAAAA,MAAHrB,MAAS,wBAGTwO,SAAA1O,KAAGuB,EAAAA,MAAHrB,MAAS,+BAxBTqO,GAkB2CC,EAAAA,+FCa3C,MAFgCtL,GAAhCyL,EAAA1M,kBAdAjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACE8F,SAAU,UACV7F,SAAU,kDACVS,MACFC,MAAA,WACMuM,KAAN,QAEAhN,QAAA,mLACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8M,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCe,sEAMAA,8FCTAhU,GAAAiU,WAA4D,IAtB5D,MAqB0C1L,GAA1C2L,EAAA5M,kBAPAjC,KAACoJ,EAAAA,UAADlJ,OACEC,SAAU,sBACVU,MACE6I,UAAW,mBAEbgE,YAAaC,QAASmB,EAAAA,kBAAmBlB,YAAaiB,0BAGxDD,YAAA5O,KAAGuB,EAAAA,MAAHrB,MAAS,iCAtBT2O,GAqB0CC,EAAAA,mBCFpCC,IACJb,GACAH,GACAQ,GACAM,GACAF,GACAxB,GACAP,gCA1BF,sBA6BA5M,KAACgK,EAAAA,SAAD9J,OACE+J,SAAU+E,EAAAA,cAAe9E,EAAAA,aAAcC,IACvCI,QAASwE,GACTpE,aAAcoE,OAhChBE,KCgDAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAxU,KAArBqU,kBAAqBA,EACArU,KAArBsU,SAAqBA,EACAtU,KAArBuU,aAAqBA,EACAvU,KAArBwU,YAAqBA,EArDrB,MAuDEJ,GAAFrT,UAAA0T,aAAE,SAAavD,EAASyC,EACTe,EAAkBC,GAD/B,GAAF9U,GAAAG,KAEU4U,EAAW5U,KAAKqU,kBAAkBnD,EAAMyC,EAY9C,OAXAe,GAAYG,KAAKD,GAEb5U,KAAKuU,aAAaK,IACpB5U,KAAKwU,YAAYtD,GAAM9E,KAAK0I,EAAAA,KAAK,IAAIjU,UAAU,SAAAkU,GAC7CA,EAAS3L,QAAQ,SAAC4L,EAAO/S,GACvB,GAAIgT,GAA4BN,EAAU5D,OAC1CkE,GAAeJ,KAAK5S,GAAS8S,EAASvS,OAAS,GAC/C3C,EAAK4U,aAAaO,EAAOrB,EAAQ,EAAGe,EAAaO,OAIhDP,GAQTN,EAAFrT,UAAAmU,aAAE,SAAaC,GAAb,GAAFtV,GAAAG,KACQ0U,IAEJ,OADAS,GAAe/L,QAAQ,SAAA8H,GAAQ,MAAArR,GAAK4U,aAAavD,EAAM,EAAGwD,QACnDA,GAOTN,EAAFrT,UAAAqU,qBAAE,SAAqBC,EAAYC,GAAjC,GAAFzV,GAAAG,KACQuV,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMjM,QAAQ,SAAC8H,GAEb,IAAK,GADDuE,IAAS,EACJpL,EAAI,EAAGA,GAAKxK,EAAKyU,SAASpD,GAAO7G,IACxCoL,EAASA,GAAUD,EAAcnL,EAE/BoL,IACFF,EAAQV,KAAK3D,GAEXrR,EAAK0U,aAAarD,KACpBsE,EAAc3V,EAAKyU,SAASpD,GAAQ,GAAKoE,EAAYI,WAAWxE,MAG7DqE,GAxGXnB,KAoHAuB,GAAA,SAAAxO,GAaE,QAAFwO,GAAsBL,EACAM,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAFhW,GAGIsH,EAHJC,KAAApH,OAAAA,WAAsBH,GAAtByV,YAAsBA,EACAzV,EAAtB+V,cAAsBA,EAbtB/V,EAAAiW,eAAmB,GAAIC,GAAAA,oBAEvBlW,EAAAmW,cAAkB,GAAID,GAAAA,oBAclBlW,EAAKoW,MAAQ,GAAIF,GAAAA,gBAAqBF,KArI1C,MAoHiDzN,GAAjDuN,EAAAxO,GAME3F,OAAFC,eAAMkU,EAAN5U,UAAA,YAAE,WAAa,MAAOf,MAAKiW,MAAMvU,WAC/B,SAASA,GACP1B,KAAKiW,MAAMrJ,KAAKlL,GAChB1B,KAAK8V,eAAelJ,KAAK5M,KAAK4V,cAAcV,aAAalV,KAAKmT,OAC9DnT,KAAKsV,YAAYY,UAAYlW,KAAK8V,eAAepU,uCAUnDiU,EAAF5U,UAAAoV,QAAE,SAAQC,GAAR,GAAFvW,GAAAG,KACU0J,GACJ0M,EAAiBC,WACjBrW,KAAKsV,YAAYgB,eAAuB,SACxCtW,KAAK8V,eAEP,OAAOpV,GAAAA,MAAXqJ,UAAA,GAAoBL,GAAS0C,KAAKpC,EAAAA,IAAI,WAGhC,MAFAnK,GAAKmW,cAAcpJ,KACjB/M,EAAK+V,cAAcR,qBAAqBvV,EAAKiW,eAAepU,MAAO7B,EAAKyV,cACnEzV,EAAKmW,cAActU,UAI9BiU,EAAF5U,UAAAwV,WAAE,aArJFZ,GAoHiDa,EAAAA,YCjGjDC,GAAA,SAAAtP,oEACAtH,GAAAoW,MAAU,GAAIF,GAAAA,sBApBd,MAmBgD3N,GAAhDqO,EAAAtP,GAME3F,OAAFC,eAAMgV,EAAN1V,UAAA,YAAE,WAAa,MAAOf,MAAKiW,MAAMvU,WAC/B,SAASA,GAAc1B,KAAKiW,MAAMrJ,KAAKlL,oCAEvC+U,EAAF1V,UAAAoV,QAAE,SAAQC,GAAR,GAAFvW,GAAAG,IACI,OAAOU,GAAAA,MAAXqJ,UAAA,IAAqBqM,EAAiBC,WAAYrW,KAAKiW,QAChD7J,KAAKpC,EAAAA,IAAI,WACR,MAAOnK,GAAKsT,SAIlBsD,EAAF1V,UAAAwV,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,sSC6CO,+BAGD,6tFC/CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU;manBOmB,olFCmFT,6BAGD,mCAGO/W,2BAGR,oCAUUA,mCAMF,khFC5EV"}