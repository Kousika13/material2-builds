{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.0-b589828');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n          // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n          // adding a tab within the `selectedIndexChange` event.\n          this._indexToSelect = this._selectedIndex = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  /**\n   * Current page path. Used to prefix SVG references which\n   * won't work on Safari unless they're prefixed with the path.\n   */\n  _currentPath: string;\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @deletion-target 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n    this._currentPath = location ? location.path() : '';\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @deletion-target 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","Directive","args","selector","ViewContainerRef","MatTreeNodeOutlet","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","this","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatInkBar","_setStyles","element","positions","_inkBarPositioner","inkBar","nativeElement","style","left","width","NgZone","Inject","_MAT_INK_BAR_POSITIONER","MatTabLabel","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_stateChanges","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatSlider","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_roundToDecimal","toString","split","pop","parseFloat","toFixed","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","MatSelect","_getAriaLabelledby","_parentFormField","_getAriaLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_currentPath","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","insertBefore","_outlet","outletElement","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocomplete","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}